{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"blog/index.html","title":"Blog","text":""},{"location":"blog/2024/07/15/retrieving-new-entity-id-in-integration-testing-in-spring-boot-test-using-spybean.html","title":"Retrieving new entity id in integration testing in Spring Boot test using <code>@SpyBean</code>","text":"<p>\u5728 integration test \u4e2d\uff0c\u5e38\u6703\u6d89\u53ca\u5c07\u8cc7\u6599\u5beb\u5165\u8cc7\u6599\u5eab\uff0c\u7136\u5f8c\u518d\u900f\u904e\u5176\u4ed6 API \u5c07\u8cc7\u6599\u6488\u51fa\u4f86\u4ee5\u78ba\u8a8d\u8cc7\u6599\u78ba\u5be6\u5beb\u5165\u8cc7\u6599\u5eab\u3002</p> <pre><code>@SpringBootTest\n@AutoConfigureMockMvc\npublic class IntegrationTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Test\n    public void test() throws Exception {\n        mockMvc.perform(post(\"/data\").content(\"Hello world!\")) // (1)!\n               .andExpect(status().isOk());\n\n        // \u900f\u904e\u53e6\u5916\u4e00\u500b API \u6488\u8cc7\u6599\uff0c\u78ba\u8a8d\n    }\n}\n</code></pre> <ol> <li>\u5047\u8a2d\u6703\u5728 <code>data</code> \u8cc7\u6599\u5eab\u65b0\u589e\u4e00\u7b46\u8cc7\u6599 \"Hello world!\"</li> </ol> <p>\u4f46\u662f\uff0c\u6709\u6642\u5019\u53ef\u80fd\u56e0\u70ba\u7a2e\u7a2e\u539f\u56e0\uff0c\u53ef\u80fd\u662f\u6c92\u6709\u9019\u7a2e\u6488\u8cc7\u6599\u7684 API \u53ef\u7528\uff0c\u4ea6\u6216\u8005\u6e2c\u8a66\u8a2d\u8a08\uff0c\u4e0d\u647b\u96dc\u5176\u4ed6\u52d5\u4f5c\u523b\u610f\u70ba\u4e4b\u7b49\u7b49\u3002</p> <p>\u7e3d\u4e4b\uff0c\u6c92\u6709\u6488\u8cc7\u6599 API \u7684\u60c5\u6cc1\u4e0b\uff0c\u8981\u78ba\u8a8d\u8cc7\u6599\u662f\u5426\u6b63\u78ba\u65b0\u589e\u5230\u8cc7\u6599\u5eab\uff0c\u6709\u4e00\u7a2e\u505a\u6cd5\u662f\u76f4\u63a5\u78ba\u8a8d\u8cc7\u6599\u78ba\u5be6\u5beb\u9032\u8cc7\u6599\u5eab\u3002\u4e0d\u904e\uff0c\u76f4\u63a5\u6488\u8cc7\u6599\u5eab\u6700\u5f8c\u4e00\u7b46\u8cc7\u6599\uff0c\u7136\u5f8c\u9032\u884c\u9a57\u8b49\u7684\u505a\u6cd5\u6703\u6709\u7f3a\u9677\uff0c\u6211\u5011\u5982\u4f55\u78ba\u5b9a\u6700\u5f8c\u4e00\u7b46\u8cc7\u6599\u4e00\u5b9a\u662f\u525b\u624d API \u5beb\u5165\u7684\u8cc7\u6599\u5462\uff1f\u5982\u679c\u6211\u5011\u5728\u4e0d\u540c\u6e2c\u8a66\u5171\u7528\u76f8\u540c\u7684\u6e2c\u8a66\u8cc7\u6599\uff0c\u5c31\u66f4\u96e3\u4ee5\u78ba\u5b9a\u4e86\u3002\u6211\u5011\u53ef\u4ee5\u4f7f\u7528 <code>@SpyBean</code> \u4f86\u89e3\u6c7a\u9019\u500b\u554f\u984c\uff0c\u78ba\u8a8d repository \u5beb\u5165\u8cc7\u6599\u5eab\u7684 method \u78ba\u5be6\u6709\u88ab\u547c\u53eb\uff0c\u4e26\u53d6\u5f97\u65b9\u624d\u65b0\u589e\u8cc7\u6599\u7684 id\u3002</p> <pre><code>@SpringBootTest\n@AutoConfigureMockMvc\npublic class IntegrationTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @SpyBean // (1)!\n    private DataRepository dataRepository;\n\n    @Test\n    public void test() throws Exception {\n        mockMvc.perform(post(\"/data\").content(\"Hello world!\"))\n               .andExpect(status().isOk());\n\n        ArgumentCaptor&lt;Data&gt; dataCaptor = ArgumentCaptor.forClass(Data.class);\n        verify(dataRepository).save(dataCaptor.capture()); // (2)!\n        Integer caseId = savedEntity.getValue().getId(); // (3)!\n        Data actual = dataRepository.findById(caseId); // (4)!\n        assertThat(actual).isEqualTo(new Data(caseId, \"Hello world!\")); // (5)!\n    }\n}\n</code></pre> <ol> <li>\u6a19\u8a18 <code>@SpyBean</code></li> <li>\u78ba\u8a8d <code>dataRepository.save</code> method \u6709\u88ab\u547c\u53eb</li> <li>\u53d6\u5f97\u65b0\u589e\u8cc7\u6599\u7684 id</li> <li>\u900f\u904e id \u53d6\u5f97\u65b0\u589e\u8cc7\u6599</li> <li>\u9a57\u8b49\u65b0\u589e\u8cc7\u6599\u662f\u5426\u6b63\u78ba</li> </ol> <p>Mockito \u7684 <code>spy</code> \u5141\u8a31\u6211\u5011\u4f7f\u7528\u5be6\u969b object \u7684\u547c\u53eb\uff0c\u4e26\u4e14\u5728\u9700\u8981\u7684\u5730\u65b9\u505a\u90e8\u5206\u7684 mock\u3002<code>@SpyBean</code> \u5c31\u662f\u5e6b\u6211\u5011\u57fa\u65bc\u5be6\u969b\u7684 bean \u7522\u751f spy bean\uff0c\u8b93\u6211\u5011\u53ef\u4ee5\u5728\u6e2c\u8a66\u4e2d\u4f7f\u7528\u5be6\u969b\u7684 repository\uff0c\u4e26\u4e14\u5728\u9700\u8981\u7684\u5730\u65b9\u505a\u90e8\u5206\u7684 mock\u3002</p>"},{"location":"blog/2024/07/21/%E9%9B%9C%E6%B9%8A%E5%87%BD%E6%95%B8%E8%A8%AD%E8%A8%88%E4%B8%8D%E8%89%AF%E5%B0%8E%E8%87%B4-on2-%E6%99%82%E9%96%93%E8%A4%87%E9%9B%9C%E5%BA%A6.html","title":"\u96dc\u6e4a\u51fd\u6578\u8a2d\u8a08\u4e0d\u826f\u5c0e\u81f4 \\(O(n^2)\\) \u6642\u9593\u8907\u96dc\u5ea6","text":"<p>\u6700\u8fd1\u5728\u770b Effective Java, 3rd \u4e00\u66f8\u7684 Item 11 \u8a0e\u8ad6 <code>hashCode</code> \u7684\u5be6\u4f5c\uff0c\u8aaa\u5230\u7cdf\u7cd5\u7684 <code>hashCode</code> \u5be6\u4f5c\u5c07\u5c0e\u81f4\u7a0b\u5f0f\u7684\u6642\u9593\u8907\u96dc\u5ea6\u5f9e \\(O(n)\\) \u8b8a\u6210 \\(O(n^2)\\)\u3002</p> <p>\u66f8\u4e2d\u4e26\u6c92\u6709\u8a73\u7d30\u8aaa\u660e\u60c5\u5883\u3002\u800c\u5728\u6211\u7684\u7406\u89e3\uff0chash \u7684\u6642\u9593\u8907\u96dc\u4e0d\u5c31\u662f \\(O(1)\\) \u55ce\uff1f\u90a3\u9ebc \\(O(n)\\) \u8ddf \\(O(n^2)\\) \u662f\u600e\u9ebc\u56de\u4e8b\uff1f \u6240\u4ee5\u6211\u5c31\u81ea\u5df1\u8166\u88dc\u4e00\u500b\u60c5\u5883\u4f86\u89e3\u91cb\u66f8\u4e2d\u6c92\u6709\u63cf\u8ff0\u7684\u60c5\u5883\u3002</p>"},{"location":"blog/2024/07/21/%E9%9B%9C%E6%B9%8A%E5%87%BD%E6%95%B8%E8%A8%AD%E8%A8%88%E4%B8%8D%E8%89%AF%E5%B0%8E%E8%87%B4-on2-%E6%99%82%E9%96%93%E8%A4%87%E9%9B%9C%E5%BA%A6.html#_1","title":"\u60c5\u5883","text":"<p>\u7a0b\u5f0f\u8981\u7dad\u8b77\u4e00\u500b Set\uff0c\u63d2\u5165 \\(n\\) (\\(x_1\\), \\(x_2\\), ..., \\(x_n\\)) \u500b\u4e0d\u76f8\u540c\u7684\u5143\u7d20\u5230 Set \u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba\u4f55\uff1f</p> <p>\u5047\u8a2d\u6211\u5011\u5ba3\u544a\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684 hash table\u3002</p> <p></p> <p>\u6211\u5011\u8981\u5c07\u5143\u7d20 \\(x_m\\) \u5b58\u5230 hash table \u4e2d\uff0c\u9996\u5148\u6211\u5011\u8981\u8a08\u7b97 \\(hash(x_m)\\) \u4ed6\u6703\u662f\u4e00\u500b\u4ecb\u65bc \\(1~n\\) \u7684\u503c\uff0c\u6c7a\u5b9a \\(x_m\\) \u5b58\u5728 hash table \u7684\u54ea\u500b\u4f4d\u7f6e\u3002</p> <p></p> <p>\u7576 hash table \u7684\u67d0\u500b\u4f4d\u7f6e\u5df2\u7d93\u6709\u5143\u7d20\u4e86\uff0c\u5c31\u7528 linked list \u7684\u65b9\u5f0f\u4e32\u63a5\u8d77\u4f86\u3002</p> <p></p> <p>\u4e0d\u904e\uff0c\u9019\u500b hash table \u662f\u70ba\u4e86\u5be6\u73fe Set\u3002\u7576\u7b97\u51fa\u4f86\u7684 hash \u4f4d\u5740\u5df2\u7d93\u6709\u5143\u7d20\u5b58\u5728\uff0c\u6211\u5011\u9700\u8981\u6aa2\u67e5\u5f85\u65b0\u589e\u7684\u5143\u7d20\u662f\u5426\u5df2\u7d93\u5728\u8a72 hash \u4f4d\u5740\u7684 linked list \u4e2d\u5b58\u5728\u3002\u5982\u679c\u5b58\u5728\uff0c\u5c31\u4e0d\u52a0\u5165\uff0c\u5426\u5247\u52a0\u5165\u3002</p>"},{"location":"blog/2024/07/21/%E9%9B%9C%E6%B9%8A%E5%87%BD%E6%95%B8%E8%A8%AD%E8%A8%88%E4%B8%8D%E8%89%AF%E5%B0%8E%E8%87%B4-on2-%E6%99%82%E9%96%93%E8%A4%87%E9%9B%9C%E5%BA%A6.html#_2","title":"\u6700\u4f73\u60c5\u6cc1","text":"<p>\\(x_1\\), \\(x_2\\), ..., \\(x_n\\) \u7684 hash \u503c\u90fd\u4e0d\u76f8\u540c\uff0c\u9019\u6a23\u6bcf\u500b\u5143\u7d20\u90fd\u53ef\u4ee5\u76f4\u63a5\u5b58\u5728 hash table \u7684\u67d0\u500b\u4f4d\u5740\u3002</p> <p></p> <p>\u6642\u9593\u8907\u96dc\u5ea6:</p> <p>\\(O(1) + O(1) + ... + O(1) = \\sum_{1}^n O(1) = O(n)\\)</p>"},{"location":"blog/2024/07/21/%E9%9B%9C%E6%B9%8A%E5%87%BD%E6%95%B8%E8%A8%AD%E8%A8%88%E4%B8%8D%E8%89%AF%E5%B0%8E%E8%87%B4-on2-%E6%99%82%E9%96%93%E8%A4%87%E9%9B%9C%E5%BA%A6.html#_3","title":"\u6700\u7cdf\u60c5\u6cc1","text":"<p>\\(x_1\\), \\(x_2\\), ..., \\(x_n\\) \u7684 hash \u503c\u5168\u76f8\u540c (\u5047\u8a2d\u70ba \\(m\\))\uff0c\u9019\u6a23\u6703\u5c0e\u81f4\u6bcf\u6b21\u52a0\u5165\u5143\u7d20\u6642\uff0c\u90fd\u5fc5\u9808\u6aa2\u67e5 hash table \u7684\u6240\u6709\u5143\u7d20\u3002</p> <p></p> <p>\u63d2\u5165 \\(x_1\\) \u6642\uff0c\u6c92\u6709\u9700\u8981\u6aa2\u67e5\u4efb\u4f55\u5143\u7d20\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba \\(O(1)\\)\u3002</p> <p></p> <p>\u63d2\u5165 \\(x_2\\)\uff0c\u8207 \\(m\\) \u4f4d\u5740\u7684\u5143\u7d20\u76f8\u6bd4\uff0c\u78ba\u8a8d \\(m\\) \u4f4d\u5740\u6c92\u6709\u51fa\u73fe \\(x_2\\) \u518d\u9032\u884c\u63d2\u5165\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba \\(O(2)\\)\u3002(\\(O(1)\\) \u70ba\u8a08\u7b97 hash\uff0c\\(O(1)\\) \u70ba\u8207\u4e00\u500b\u5143\u7d20\u6bd4\u8f03)</p> <p></p> <p>\u63d2\u5165 \\(x_n\\)\u3002\u8207 \\(m\\) \u4f4d\u5740\u7684\u5143\u7d20\u76f8\u6bd4\uff0c\u78ba\u8a8d \\(m\\) \u4f4d\u5740\u6c92\u6709\u51fa\u73fe \\(x_n\\) \u518d\u9032\u884c\u63d2\u5165\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba \\(O(n)\\)\u3002(\\(O(1)\\) \u70ba\u8a08\u7b97 hash\uff0c\\(O(n-1)\\) \u70ba\u8207 \\(n-1\\) \u500b\u5143\u7d20\u6bd4\u8f03)</p> <p>\u56e0\u6b64\uff0c\u6574\u9ad4\u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba:</p> <p>\\(O(1) + O(2) + ... + O(n) = O(1 + 2 + ... + n) = O(\\frac{n(n+1)}{2}) = O(\\frac{n^2+n}{2}) = O(\\frac{n^2}{2} + \\frac{n}{2}) = O(n^2)\\)</p>"},{"location":"blog/2024/07/21/%E9%9B%9C%E6%B9%8A%E5%87%BD%E6%95%B8%E8%A8%AD%E8%A8%88%E4%B8%8D%E8%89%AF%E5%B0%8E%E8%87%B4-on2-%E6%99%82%E9%96%93%E8%A4%87%E9%9B%9C%E5%BA%A6.html#_4","title":"\u7d50\u8ad6","text":"<p>\u4ee5\u4e0a\u6700\u4f73\u7684\u60c5\u5883\u8207\u6700\u7cdf\u7684\u60c5\u5883\u6240\u8a18\u7b97\u51fa\u4f86\u7684\u6642\u9593\u8907\u96dc\u5ea6\uff0c\u8207\u66f8\u4e2d\u6240\u8aaa\u7684 \\(O(n)\\) \u8207 \\(O(n^2)\\) \u662f\u76f8\u7b26\u7684\u3002\u61c9\u8a72\u53ef\u4ee5\u642d\u914d\u9019\u500b\u7bc4\u4f8b\u4f86\u7406\u89e3\u66f8\u4e2d\u7684\u63cf\u8ff0\u3002</p>"},{"location":"ide/jet-brains/shortcuts.html","title":"JetBrains \u71b1\u9375","text":""},{"location":"ide/jet-brains/shortcuts.html#_1","title":"\u5feb\u901f\u9810\u89bd","text":"<p>\u4e0d\u5207\u63db\u7576\u524d\u7684\u7a0b\u5f0f\u78bc\uff0c\u60f3\u770b\u4e00\u4e0b\u5176\u4ed6\u90e8\u5206\u7684\u7d30\u7bc0\u3002</p> <ul> <li>Parameter info: Cmd + P<ul> <li>\u770b\u53c3\u6578\u7684\u7d30\u7bc0</li> </ul> </li> <li>Type info: Ctrl + Shift + P<ul> <li>\u770b type</li> <li>\u518d\u6309\u4e00\u6b21\u71b1\u9375\u53ef\u4ee5\u770b\u5230 value \u7d30\u7bc0\u3002</li> </ul> </li> <li>Quick documentation: Ctrl + J<ul> <li>\u770b Java doc</li> </ul> </li> <li>Quick definition: Cmd + Y<ul> <li>\u770b\u5be6\u4f5c\u7d30\u7bc0</li> </ul> </li> </ul>"},{"location":"ide/jet-brains/shortcuts.html#_2","title":"\u9078\u64c7","text":"<ul> <li>Extend selection: Option + Up</li> <li>Shrink selection: Option + Down</li> </ul>"},{"location":"java/effective-java/001.html","title":"Item 1: Consider static factory methods instead of constructors","text":""},{"location":"java/effective-java/001.html#_1","title":"\u512a\u9ede","text":"<p>\u504f\u597d static factory method \u7684\u512a\u9ede\uff1a</p> <ol> <li> <p>\u53ef\u4ee5\u63d0\u4f9b\u6709\u610f\u7fa9\u7684\u540d\u7a31\uff0c\u5e6b\u52a9\u95b1\u8b80\u7406\u89e3\u7684\u540d\u7a31</p> <ul> <li><code>BigInteger.probablePrime</code> \u6bd4 <code>BigInteger(int, int, Random)</code> \u66f4\u5bb9\u6613\u7406\u89e3\u3002</li> <li>constructor \u4e4b\u9593\u53ea\u80fd\u5920\u900f\u904e\u53c3\u6578\u578b\u5225\u4e0d\u540c\u4f86\u52a0\u4ee5\u5340\u9694\uff0c\u958b\u767c\u4eba\u54e1\u9700\u8981\u77e5\u9053\u9019\u4e9b\u4e0d\u540c constructor \u5c0d\u61c9\u7684\u5be6\u4f5c\u3002\u4f46\u662f\uff0c\u4ed6\u5011\u4e5f\u53ef\u80fd\u6703\u8a18\u932f\u800c\u8aa4\u7528\u3002\u4f8b\u5982\uff0c\u6211\u5011\u6709\u8fa6\u6cd5\u5340\u5206 <code>BigInteger(int[])</code>, <code>BigInteger(int[], int)</code>, <code>BigInteger(int, int[])</code> \u4ed6\u5011\u7684\u4e0d\u540c\u55ce\uff1f</li> </ul> </li> <li> <p>\u4e0d\u5fc5\u6bcf\u6b21\u90fd\u5efa\u7acb\u65b0\u7269\u4ef6</p> <ul> <li>\u5957\u7528 Flyweight pattern, Singleton pattern</li> <li>\u53ef\u4ee5\u907f\u514d\u5efa\u7acb\u4e0d\u5fc5\u8981\u91cd\u8907\u7684\u7269\u4ef6</li> <li>Instance-controlled class</li> </ul> </li> <li> <p>\u53ef\u4ee5\u56de\u50b3 Subclass</p> <ul> <li>interface-based frameworks</li> <li>conceptual weight: \u958b\u767c\u4eba\u54e1\u9700\u8981\u638c\u63e1\u591a\u5c11\u6982\u5ff5\u624d\u80fd\u5920\u4f7f\u7528 API</li> </ul> <p>Info</p> <p>Java 8 \u4ee5\u524d\uff0cinterface \u4e0d\u80fd\u6709 static method\u3002\u5728\u5be6\u4f5c\u4e0a\uff0c\u9700\u8981 static factory methods \u7684 class \u6703\u547d\u540d\u6210 Type + s\uff0c\u4e26\u5c07 constructor \u5ba3\u544a\u6210 private\uff0c\u4f8b\u5982 <code>Collections</code>, <code>Arrays</code>\u3002</p> </li> <li> <p>\u53ef\u4ee5\u4f9d\u64da\u60c5\u6cc1\u56de\u50b3\u4e0d\u540c\u7684 Subclass</p> <ul> <li>\u5141\u8a31\u4e0d\u540c\u7684 release \u66f4\u63db return \u7684 subclass\u3002</li> <li> <p><code>EnumSet</code> \u7684\u5be6\u4f5c\uff0c\u6839\u64da enum \u6578\u91cf\u7684\u4e0d\u540c\uff0c\u56de\u50b3\u4e0d\u540c\u7684 subclass\u3002\u56de\u50b3\u7684 subclass \u8207\u689d\u4ef6\u662f\u53ef\u4ee5\u6539\u8b8a\u800c\u4e0d\u5f71\u97ff\u547c\u53eb\u7aef\u7684\u3002</p> <pre><code>// \u793a\u610f\u7a0b\u5f0f\u78bc\nclass EnumSet {\n   static &lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; noneOf(Class&lt;E&gt; elementType) {\n        if (elementType.getEnumCount() &lt;= 64)\n            return new RegularEnumSet(..)\n        else\n            return new JumboEnumSet(..)\n   }\n}\n</code></pre> <ul> <li>\u689d\u4ef6 (<code>&lt;= 64</code>) \u8207 subclass \u7684\u5be6\u4f5c\u662f\u53ef\u4ee5\u6539\u8b8a\u7684\uff0c\u800c\u4e0d\u5f71\u97ff\u547c\u53eb\u7aef\u7684\u7a0b\u5f0f\u78bc\u3002</li> </ul> </li> </ul> </li> <li> <p>\u5728\u64b0\u5beb\u7a0b\u5f0f\u78bc\u6642\uff0c\u985e\u5225\u4e0d\u5fc5\u5b58\u5728</p> <ul> <li>\u5229\u65bc service provider frameworks<ul> <li>\u6846\u67b6\u958b\u767c\u5546\u4e0d\u5fc5\u63d0\u524d\u77e5\u9053\u6240\u6709 interface \u53ef\u80fd\u7684\u5be6\u4f5c</li> <li>\u8b93 interface \u5be6\u4f5c\u5ef6\u9072\u5230 development time \u6c7a\u5b9a</li> <li>\u4f8b\u5982: JDBC API \u7684 Connection interface\uff0c\u958b\u767c\u4eba\u54e1\u53ef\u4ee5\u5728\u958b\u767c\u6642\u5728\u6c7a\u5b9a\u5177\u9ad4\u7684 Connection \u5be6\u4f5c\uff0c\u50cf\u662f\u900f\u904e property \u8a2d\u5b9a Connection \u662f MySql <code>spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</code></li> </ul> </li> <li>Bridge pattern</li> <li>\u53ef\u4ee5\u914d\u5408 Dependency injection frameworks \u4f7f\u7528</li> <li><code>ServiceLoader</code></li> </ul> </li> </ol>"},{"location":"java/effective-java/001.html#_2","title":"\u9650\u5236","text":"<p>\u504f\u597d static factory method \u7684\u9650\u5236\uff1a</p> <ol> <li> <p>\u62cb\u68c4\u7e7c\u627f:</p> <ul> <li>constructor \u88ab\u5ba3\u544a\u6210 <code>private</code> / <code>protected</code>\uff0c\u4f7f\u5f97 subclass \u7121\u6cd5\u521d\u59cb\u5316 superclass\uff0c\u9020\u6210\u7121\u6cd5\u7e7c\u627f\u3002</li> <li>\u7121\u6cd5\u7e7c\u627f\u610f\u5473\u8457\u653e\u68c4 polymorphism \u7684\u7279\u6027\u3002</li> </ul> <p>Question</p> <p>\u5982\u679c\u540c\u6642\u8b93 class \u4fdd\u6709 static factory methods \u4e26\u4e14\u628a constructor \u5ba3\u544a\u6210 <code>public</code> \u5462?</p> </li> <li> <p>\u589e\u52a0 debug \u96e3\u5ea6:</p> <ul> <li>\u56e0\u70ba\u5efa\u7acb\u7269\u4ef6\u7684\u52d5\u4f5c\u96b1\u85cf\u5728 static factory methods \u88e1\uff0c\u6240\u4ee5 debug \u6642\u7121\u6cd5\u76f4\u63a5\u770b\u5230\u5efa\u7acb\u7269\u4ef6\u7684\u5730\u65b9\uff0c\u4ee5\u53ca\u600e\u9ebc\u88ab\u5efa\u7acb\u7684\u3002</li> <li>\u4ee5\u4e0b\u5e7e\u7a2e\u547d\u540d\u898f\u5247\uff0c\u53ef\u4ee5\u5e6b\u52a9 static factory methods \u7684\u7406\u89e3: (\u6b64\u70ba\u5217\u8209\u800c\u975e\u7aae\u8209)<ul> <li><code>from</code><ul> <li>type-conversion method: \u5f9e \u4e00\u500b type \u7684\u7269\u4ef6\u8f49\u63db\u6210\u53e6\u4e00\u500b type \u7684\u7269\u4ef6</li> <li>\u7bc4\u4f8b:<ul> <li><code>Date.from(instant)</code></li> </ul> </li> </ul> </li> <li><code>of</code><ul> <li>aggregation method: \u5f9e \u591a\u500b \u53c3\u6578\u7684\u7269\u4ef6\u5408\u4f75\u6210\u4e00\u500b type \u7684\u7269\u4ef6</li> <li>\u7bc4\u4f8b:<ul> <li><code>EnumSet.of(JACK, QUEEN, KING)</code></li> <li><code>LocalDate.of(2024, 7, 4)</code></li> </ul> </li> </ul> </li> <li><code>valueOf</code><ul> <li>\u6bd4 <code>from</code> \u8207 <code>of</code> \u66f4\u56c9\u5506\u4e00\u9ede\u7684\u7248\u672c</li> <li>\u7bc4\u4f8b:<ul> <li><code>Integer.valueOf(\"100\")</code> </li> <li><code>Integer.valueOf(\"100\", 2)</code></li> </ul> </li> </ul> </li> <li><code>instance</code> / <code>getInstance</code><ul> <li>\u5f9e 0 \u81f3 \u591a\u500b \u53c3\u6578\u5efa\u7acb\u7269\u4ef6</li> <li>\u96d6\u7136\u8aaa\u662f <code>getInstance</code>\uff0c\u4f46\u662f\u4e0d\u4fdd\u8b49\u56de\u50b3\u7684\u662f\u540c\u4e00\u500b\u7269\u4ef6</li> <li>\u7bc4\u4f8b:<ul> <li><code>Calendar.getInstance()</code> </li> <li><code>Calendar.getInstance(TimeZone.getDefault())</code> </li> </ul> </li> </ul> </li> <li><code>create</code> / <code>newInstance</code><ul> <li>\u5f9e 0 \u81f3 \u591a\u500b \u53c3\u6578\u5efa\u7acb\u7269\u4ef6</li> <li>\u6bcf\u6b21\u90fd\u6703\u5efa\u7acb\u65b0\u7684\u7269\u4ef6</li> <li>\u7bc4\u4f8b:<ul> <li><code>Array.newInstance(Integer.class, 10)</code></li> </ul> </li> </ul> </li> <li><code>getType</code><ul> <li>\u56de\u50b3\u7684\u7269\u4ef6\u662f <code>Type</code> \u7684 instance</li> <li>\u96d6\u7136\u70ba get\uff0c\u4f46\u662f\u4e0d\u4fdd\u8b49\u56de\u50b3\u7684\u662f\u540c\u4e00\u500b\u7269\u4ef6</li> <li>\u7bc4\u4f8b:<ul> <li><code>Files.getFileStore(path)</code></li> </ul> </li> </ul> </li> <li><code>newType</code><ul> <li>\u56de\u50b3\u7684\u7269\u4ef6\u662f <code>Type</code> \u7684 instance</li> <li>\u6bcf\u6b21\u90fd\u6703\u5efa\u7acb\u65b0\u7684\u7269\u4ef6</li> <li>\u7bc4\u4f8b:<ul> <li><code>BufferedReader br = Buffer.newBufferedReader(path)</code></li> </ul> </li> </ul> </li> <li><code>type</code><ul> <li><code>getType</code> \u8207 <code>newType</code> \u7684\u7c21\u5316\u7248</li> <li>\u7bc4\u4f8b:<ul> <li><code>Collections.singletonList(\"apple\")</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ol>"},{"location":"java/effective-java/002.html","title":"Item 2: Consider a builder when faced with many constructor parameters","text":"<p>static factory method \u8207 constructor \u7684\u7f3a\u9ede\u662f\uff0c\u7576\u6709\u592a\u591a\u53c3\u6578\u6642\uff0c\u6703\u8b93\u7a0b\u5f0f\u78bc\u96e3\u4ee5\u95b1\u8b80\u3002\u9019\u6642\u5019\uff0c\u53ef\u4ee5\u8003\u616e\u4f7f\u7528 builder\u3002</p>"},{"location":"java/effective-java/002.html#anti-pattern-telescoping-constructor-pattern","title":"(anti-pattern) telescoping constructor pattern","text":"<pre><code>public class NutritionFacts {\n    private final int servingSize;  // (mL)            required\n    private final int servings;     // (per container) required\n    private final int calories;     // (per serving)   optional\n    private final int fat;          // (g/serving)     optional\n    private final int sodium;       // (mg/serving)    optional\n    private final int carbohydrate; // (g/serving)     optional\n\n    public NutritionFacts(int servingSize, int servings) {\n        this(servingSize, servings, 0);\n    }\n\n    public NutritionFacts(int servingSize, int servings,\n            int calories) {\n        this(servingSize, servings, calories, 0);\n    }\n\n    public NutritionFacts(int servingSize, int servings,\n            int calories, int fat) {\n        this(servingSize, servings, calories, fat, 0);\n    }\n\n    public NutritionFacts(int servingSize, int servings,\n            int calories, int fat, int sodium) {\n        this(servingSize, servings, calories, fat, sodium, 0);\n    }\n\n\n    public NutritionFacts(int servingSize, int servings,\n           int calories, int fat, int sodium, int carbohydrate) {\n        this.servingSize  = servingSize;\n        this.servings     = servings;\n        this.calories     = calories;\n        this.fat          = fat;\n        this.sodium       = sodium;\n        this.carbohydrate = carbohydrate;\n    }\n}\n</code></pre> <p>\u7bc4\u4f8b\u4e2d\u7684 constructor\uff0c\u6bd4\u8f03\u5c11\u53c3\u6578\u7684 constructor \u6703\u547c\u53eb\u6bd4\u8f03\u591a\u53c3\u6578\u7684 constructor \uff0c\u6700\u7d42\u90fd\u547c\u53eb\u6700\u591a\u53c3\u6578\u7684 constructor\u3002</p> <p>\u9019\u7a2e\u5beb\u6cd5\uff0c\u5728 optional field \u8d8a\u591a\u6642\uff0c\u6703\u8b8a\u5f97\u8d8a\u8907\u96dc\u8d8a\u96e3\u4ee5\u7ba1\u7406\uff0c\u7a0b\u5f0f\u78bc\u53ef\u80fd\u6703\u8d8a\u96e3\u95b1\u8b80\u3002</p>"},{"location":"java/effective-java/002.html#javabeans-pattern","title":"JavaBeans pattern","text":"<p>JavaBean \u6d88\u9664\u4e86 telescoping constructor pattern \u7684\u554f\u984c\u3002</p> <pre><code>public class NutritionFacts {\n    // Parameters initialized to default values (if any)\n    private int servingSize  = -1; // Required; no default value\n    private int servings     = -1; // Required; no default value\n    private int calories     = 0;\n    private int fat          = 0;\n    private int sodium       = 0;\n    private int carbohydrate = 0;\n\n    public NutritionFacts() { }\n\n    // Setters\n    public void setServingSize(int val)  { servingSize = val; }\n    public void setServings(int val)    { servings = val; }\n    public void setCalories(int val)    { calories = val; }\n    public void setFat(int val)         { fat = val; }\n    public void setSodium(int val)      { sodium = val; }\n    public void setCarbohydrate(int val) { carbohydrate = val; }\n}\n</code></pre> <p>\u5141\u8a31\u4e00\u500b\u6c92\u6709\u53c3\u6578\u7684 constructor\uff0c\u4e26\u4e14\u900f\u904e setter \u8a2d\u5b9a field values\u3002</p> <pre><code>NutritionFacts cocaCola = new NutritionFacts();\ncocaCola.setServingSize(240);\ncocaCola.setServings(8);\ncocaCola.setCalories(100);\ncocaCola.setSodium(35);\ncocaCola.setCarbohydrate(27);\n</code></pre> <p>JavaBeans pattern \u7684\u7f3a\u9ede:</p> <ul> <li>\u9700\u8981\u591a\u884c\u7a0b\u5f0f\u78bc\uff0c\u4e14\u7269\u4ef6\u5728\u5efa\u7acb\u5f8c\u53ef\u80fd\u8655\u65bc\u4e0d\u4e00\u81f4\u7684\u72c0\u614b\u3002</li> <li>\u5728\u72c0\u614b\u4e0d\u4e00\u81f4\u7684\u72c0\u614b\u4e0b\u64cd\u4f5c\u7269\u4ef6\u53ef\u80fd\u7522\u751f bug\uff0c\u4e14\u96e3\u4ee5 debug\u3002</li> <li>\u4e0d\u4fdd\u8b49\u7269\u4ef6\u7684\u4e0d\u53ef\u8b8a\u6027(immutable)\u3002</li> <li>\u4e0d\u4fdd\u8b49\u7269\u4ef6\u7684 thread safety\u3002</li> </ul>"},{"location":"java/effective-java/002.html#builder-pattern","title":"Builder pattern","text":"<pre><code>public class NutritionFacts {\n    private final int servingSize;\n    private final int servings;\n    private final int calories;\n    private final int fat;\n    private final int sodium;\n    private final int carbohydrate;\n\n    public static class Builder {\n        // Required parameters\n        private final int servingSize;\n        private final int servings;\n\n        // Optional parameters - initialized to default values\n        private int calories      = 0;\n        private int fat           = 0;\n        private int sodium        = 0;\n        private int carbohydrate  = 0;\n\n        public Builder(int servingSize, int servings) {\n            this.servingSize = servingSize;\n            this.servings    = servings;\n        }\n\n        public Builder calories(int val) {\n            calories = val;      \n            return this; \n        }\n        public Builder fat(int val) {\n            fat = val;\n            return this;\n        }\n        public Builder sodium(int val) {\n            sodium = val;\n            return this;\n        }\n        public Builder carbohydrate(int val) {\n            carbohydrate = val;\n            return this;\n        }\n\n        public NutritionFacts build() {\n            return new NutritionFacts(this);\n        }\n    }\n\n    private NutritionFacts(Builder builder) {\n        servingSize  = builder.servingSize;\n        servings     = builder.servings;\n        calories     = builder.calories;\n        fat          = builder.fat;\n        sodium       = builder.sodium;\n        carbohydrate = builder.carbohydrate;\n    }\n}\n</code></pre> <pre><code>NutritionFacts cocaCola = new NutritionFacts.Builder(240, 8)\n        .calories(100).sodium(35).carbohydrate(27).build();\n</code></pre> <p>\u9019\u7a2e Builder \u547c\u53eb method \u56de\u50b3\u81ea\u8eab\u7269\u4ef6\uff0c\u8b93 client \u7aef\u53ef\u4ee5\u4e00\u76f4\u63a5\u8457\u5f80\u4e0b\u547c\u53eb\u7684\u5beb\u6cd5\u7a31\u4f5c fluent API\u3002</p> <p>\u4f7f\u7528 Lobmok Builder (link) \u7c21\u5316\u5be6\u4f5c\u3002</p> <p>\u63d0\u4f9b\u4e86\u4e00\u7a2e\u985e\u4f3c\u65bc Python, Scala \u6216 kotlin \u7684 named optional parameter \u7684\u5beb\u6cd5\u3002</p> <p>validation:</p> <ul> <li>builder constructor, setter \u9032\u884c\u5404\u5225\u53c3\u6578\u7684\u6aa2\u67e5</li> <li>class constructor \u9032\u884c\u6574\u9ad4\u7269\u4ef6\u7684\u6aa2\u67e5</li> <li>\u672a\u901a\u904e\u6aa2\u67e5\u6642\uff0c\u62cb\u51fa <code>IllegalArgumentException</code></li> </ul> <p>\u901a\u5e38\uff0cconstructor \u53c3\u6578\u7684\u6578\u91cf\u8d85\u904e\u56db\u500b\u4ee5\u4e0a\u6bd4\u8f03\u9069\u7528\u3002\u4e26\u4e14\uff0c\u591a\u6578\u53c3\u6578\u662f\u9078\u586b\u7684\u60c5\u6cc1\u3002</p>"},{"location":"java/effective-java/003.html","title":"Item 3: Enforce the singleton property with a private constructor or an enum type","text":"<p>\u5169\u7a2e\u5e38\u898b\u5be6\u4f5c Singleton \u7684\u65b9\u6cd5\uff1a</p> <p>\u65b9\u6cd5\u4e00: \u5c07 constructor \u8a2d\u70ba private\uff0c\u4e26\u4e14\u6709\u4e00\u500b public static final field \u4f86\u5b58\u653e\u552f\u4e00\u7684 instance\u3002</p> <pre><code>// Singleton with public final field\npublic class Elvis {\n    public static final Elvis INSTANCE = new Elvis();\n    private Elvis() { ... }\n\n    public void leaveTheBuilding() { ... }\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c: \u5c07 constructor \u8a2d\u70ba private\uff0c\u4e26\u4e14\u6709\u4e00\u500b public static \u65b9\u6cd5\u4f86\u56de\u50b3\u552f\u4e00\u7684 instance\u3002</p> <pre><code>// Singleton with static factory\npublic class Elvis {\n    private static final Elvis INSTANCE = new Elvis();\n    private Elvis() { ... }\n    public static Elvis getInstance() { return INSTANCE; }\n\n    public void leaveTheBuilding() { ... }\n}\n</code></pre> <p>\u53e6\u4e00\u7a2e\u5be6\u4f5c Singleton \u7684\u65b9\u6cd5\u662f single-element enum\u3002</p> <pre><code>public enum Elvis {\n    INSTANCE;\n\n    public void leaveTheBuilding() { ... }\n}\n</code></pre>"},{"location":"java/effective-java/004.html","title":"Item 4: Enforce noninstantiability with a private constructor","text":"<pre><code>// Noninstantiable utility class\npublic class UtilityClass {\n    // Suppress default constructor for noninstantiability\n    private UtilityClass() {\n        throw new AssertionError();\n    }\n    ... // Remainder omitted\n}\n</code></pre> <p>\u5982\u679c class \u4e0d\u5141\u8a31\u6709 instance\uff0c\u5c31\u5c07 constructor \u8a2d\u70ba private\uff0c\u9019\u6a23\u5c31\u7121\u6cd5\u88ab\u5be6\u4f8b\u5316\u3002\u800c\u4e14\uff0c class \u4e5f\u7121\u6cd5\u88ab\u7e7c\u627f\u3002</p> <p>\u4e0d\u5141\u8a31\u6709 instance \u7684\u985e\u5225\u7684\u7bc4\u4f8b\u6709 <code>Math</code>, <code>Arrays</code>, <code>Collections</code> \u7b49\u7b49\u3002</p>"},{"location":"java/effective-java/005.html","title":"Item 5: Prefer dependency injection to hardwiring resources","text":"<p>\u5be6\u4f5c\u62fc\u5b57\u6aa2\u67e5\u7269\u4ef6\uff0c\u4ee5\u4e0b\u5169\u7a2e\u5be6\u4f5c\u65b9\u6cd5\u6709\u53ef\u4ee5\u66f4\u597d\u7684\u7a7a\u9593\uff1a</p> <p>1: Utility class</p> <pre><code>// Inappropriate use of static utility - inflexible &amp; untestable!\npublic class SpellChecker {\n    private static final Lexicon dictionary = ...;\n\n    private SpellChecker() {} // Noninstantiable\n\n    public static boolean isValid(String word) { ... }\n    public static List&lt;String&gt; suggestions(String typo) { ... }\n}\n</code></pre> <p>2: Singleton</p> <pre><code>// Inappropriate use of singleton - inflexible &amp; untestable!\npublic class SpellChecker {\n    private final Lexicon dictionary = ...;\n\n    private SpellChecker(...) {}\n    public static SpellChecker INSTANCE = new SpellChecker(...);\n\n    public boolean isValid(String word) { ... }\n    public List&lt;String&gt; suggestions(String typo) { ... }\n}\n</code></pre> <p>\u8b93\u7269\u4ef6\u8b8a\u6210\u4e0d\u53ef\u7e7c\u627f\u6703\u589e\u52a0\u6e2c\u8a66\u7684\u96e3\u5ea6</p> <p>\u4f7f\u7528 dependency injection \u6bd4\u8f03\u597d:</p> <pre><code>// Dependency injection provides flexibility and testability\npublic class SpellChecker {\n    private final Lexicon dictionary;\n\n    public SpellChecker(Lexicon dictionary) {\n        this.dictionary = Objects.requireNonNull(dictionary);\n    }\n\n    public boolean isValid(String word) { ... }\n    public List&lt;String&gt; suggestions(String typo) { ... }\n}\n</code></pre> <p>\u5e38\u898b\u7684 Dependency injection framework: Dagger, Guice, Spring</p> <p>\u53e6\u4e00\u500b\u66ff\u4ee3\u65b9\u6cd5\u662f\u4f7f\u7528 Factory Method\u3002</p> <p>\u7e3d\u7684\u4f86\u8aaa\uff0c\u4e0d\u8981\u4f7f\u7528 singleton \u6216 static utility class \u4f86\u5be6\u4f5c\u6709 resource dependency \u7684\u7269\u4ef6\uff0c\u9019\u6a23\u6703\u8b93\u7269\u4ef6\u8b8a\u5f97\u4e0d\u9748\u6d3b\uff0c\u96e3\u4ee5\u6e2c\u8a66\u3002</p>"},{"location":"java/effective-java/006.html","title":"Item 6: Avoid creating unnecessary objects","text":"<p>immutable object \u901a\u5e38\u53ef\u4ee5 reuse\uff0c\u4e0d\u5fc5\u91cd\u65b0\u7522\u751f\u4e00\u500b\u65b0\u7684\u7269\u4ef6\u3002</p> <pre><code>String s = new String(\"bikini\");  // \u5225\u9019\u9ebc\u505a !!\n</code></pre> <p>\u61c9\u8a72\u9019\u9ebc\u505a</p> <pre><code>String s = \"bikini\";\n</code></pre> <p>\u9019\u6a23\u53ef\u4ee5\u78ba\u4fdd <code>s</code> \u6703\u6307\u5411\u540c\u4e00\u500b\u7269\u4ef6\uff0c\u800c\u4e0d\u662f\u91cd\u65b0\u7522\u751f\u4e00\u500b\u65b0\u7684\u7269\u4ef6\u3002\u53ea\u8981\u4f7f\u7528 constructor \u5c31\u6703\u7522\u751f\u65b0\u7684\u7269\u4ef6\u3002</p> <p>\u901a\u5e38 static factory methods \u53ef\u4ee5\u5be6\u4f5c\u907f\u514d\u91cd\u8907\u7522\u751f\u7269\u4ef6\u7684\u6548\u679c\u3002</p> <p><code>Boolean.valueOf(String)</code> \u512a\u65bc <code>Boolean(String)</code>\uff0c\u56e0\u70ba <code>valueOf</code> \u53ef\u4ee5\u91cd\u8907\u4f7f\u7528\u7269\u4ef6\u3002</p>"},{"location":"java/effective-java/006.html#pattern","title":"\u7bc4\u4f8b: \u91cd\u5fa9\u4f7f\u7528 <code>Pattern</code> \u7269\u4ef6","text":"\u53ef\u4ee5\u6539\u9032\u7684\u5beb\u6cd5<pre><code>static boolean isRomanNumeral(String s) {\n    return s.matches(\"^(?=.)M*(C[MD]|D?C{0,3})\"\n            + \"(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$\");\n}\n</code></pre> <p>\u554f\u984c:</p> <ol> <li><code>String.matches</code> \u6703\u5efa\u7acb\u4e00\u500b\u65b0\u7684 <code>Pattern</code> \u7269\u4ef6\uff0c\u4f7f\u7528\u5b8c\u5f8c\u5c31\u6703\u88ab Garbage Collection \u56de\u6536\u3002</li> <li>\u5efa\u7acb <code>Pattern</code> \u7269\u4ef6\u9700\u8981\u5c07 regular expression \u7de8\u8b6f\u6210 finite state machine\uff0c\u9019\u662f\u4e00\u500b\u6602\u8cb4\u7684\u904b\u7b97\u3002</li> </ol> <p>\u6539\u9032:</p> \u6539\u9032\u5f8c\u7684\u5beb\u6cd5<pre><code>// Reusing expensive object for improved performance\npublic class RomanNumerals {\n    private static final Pattern ROMAN = Pattern.compile(\n            \"^(?=.)M*(C[MD]|D?C{0,3})\"\n            + \"(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$\");\n\n    static boolean isRomanNumeral(String s) {\n        return ROMAN.matcher(s).matches();\n    }\n}\n</code></pre> <p>\u539f\u66f8\u4f5c\u8005\u63d0\u4f9b\u7684\u57f7\u884c\u6642\u9593\u63d0\u5347\u7684\u53c3\u8003\u6578\u64da</p> <p>On my machine, the original version takes 1.1 \u00b5s on an 8-character input string, while the improved version takes 0.17 \u00b5s, which is 6.5 times faster.</p>"},{"location":"java/effective-java/006.html#autoboxing","title":"\u7bc4\u4f8b: autoboxing","text":"<pre><code>// Hideously slow! Can you spot the object creation?\nprivate static long sum() {\n    Long sum = 0L;\n    for (long i = 0; i &lt;= Integer.MAX_VALUE; i++)\n        sum += i;\n\n    return sum;\n}\n</code></pre> <p>\u56e0\u70ba <code>sum</code> \u5ba3\u544a\u6210 <code>Long</code>\uff0c\u6240\u4ee5\u6bcf\u6b21 <code>sum += i</code> \u90fd\u6703\u7522\u751f\u4e00\u500b\u65b0\u7684 <code>Long</code> \u7269\u4ef6\u3002\u7a0b\u5f0f\u8dd1\u5b8c\u5171\u6703\u7522\u751f 2<sup>31</sup> \u500b <code>Long</code> \u7269\u4ef6\u3002\u5c07 <code>Long</code> \u6539\u6210 <code>long</code> \u5c31\u53ef\u4ee5\u907f\u514d\u9019\u500b\u554f\u984c\u3002</p> <p>\u4f5c\u8005\u7684\u6578\u64da</p> <p>Changing the declaration of <code>sum</code> from <code>Long</code> to <code>long</code> reduces the runtime from 6.3 seconds to 0.59 seconds on my machine.</p> <p>Prefer primitives to boxed primitives, and watch out for unintentional autoboxing.</p>"},{"location":"java/effective-java/007.html","title":"Item 7: Eliminate obsolete object references","text":"<pre><code>// Can you spot the \"memory leak\"?\npublic class Stack {\n    private Object[] elements;\n    private int size = 0;\n    private static final int DEFAULT_INITIAL_CAPACITY = 16;\n\n    public Stack() {\n        elements = new Object[DEFAULT_INITIAL_CAPACITY];\n    }\n\n    public void push(Object e) {\n        ensureCapacity();\n        elements[size++] = e;\n    }\n\n    public Object pop() {\n        if (size == 0)\n            throw new EmptyStackException();\n        return elements[--size];\n    }\n\n    /**\n     * Ensure space for at least one more element, roughly\n     * doubling the capacity each time the array needs to grow.\n     */\n    private void ensureCapacity() {\n        if (elements.length == size)\n            elements = Arrays.copyOf(elements, 2 * size + 1);\n    }\n}\n</code></pre> <p>stack <code>size</code> = 5</p> <pre>4458236e-974f-46a5-9031-d70430e83ecc</pre> <p><code>pop()</code>\u5f8c\uff0c\u547c\u53eb\u7aef\u7684\u5230 <code>obj 5</code>\uff0c\u4e26\u4e14 stack <code>size</code> = 4</p> <pre>bb3eb039-c6a9-421c-92d9-c6bb1cdce022</pre> <p>\u96d6\u7136 <code>obj 5</code> \u88ab pop \u51fa\u4f86\u4e86\uff0c\u56e0\u70ba stack \u7684 reference \u4ecd\u7136\u6307\u5411 <code>obj 5</code>\uff0c\u5373\u4f7f stack \u5916\u90e8\u6c92\u6709\u4efb\u4f55\u5730\u65b9\u53c3\u8003\u5230 <code>obj 5</code>\uff0c<code>obj 5</code> \u4e5f\u4e0d\u6703\u88ab GC \u56de\u6536\u3002\u9019\u7a2e\u60c5\u6cc1\u5c31\u9020\u6210 memory leak\u3002</p> <p>\u50cf\u9019\u7a2e object \u6307\u5411\u4e00\u500b\u6c92\u6709\u5728\u7dad\u8b77\u7684 reference\uff0c\u7a31\u70ba obsolete object reference\u3002</p> <p>\u89e3\u6c7a\u65b9\u5f0f\u5c31\u662f\u5c07 obsolete object reference \u8a2d\u70ba <code>null</code>\u3002</p> <pre>4a5604fa-5419-4356-853f-0f7a977bdcbe</pre> <p>\u4fee\u6b63\u7684\u7a0b\u5f0f\u78bc\u5982\u4e0b:</p> <pre><code>public Object pop() {\n    if (size == 0)\n        throw new EmptyStackException();\n    Object result = elements[--size];\n    elements[size] = null; // Eliminate obsolete reference\n    return result;\n}\n</code></pre> <p>Nulling out object references should be the exception rather than the norm. (\u5c07\u7269\u4ef6\u53c3\u8003\u8a2d\u70ba null \u61c9\u8a72\u662f\u4f8b\u5916\uff0c\u800c\u4e0d\u662f\u5e38\u614b\u3002)</p> <p>\u53e6\u4e00\u7a2e\u6703\u9020\u6210 memory leak \u7684\u662f\u5feb\u53d6\u3002</p> <ul> <li>\u53ef\u4ee5\u4f7f\u7528 <code>WeakHashMap</code> \u4f86\u5be6\u4f5c\u5feb\u53d6\uff0c\u7576\u5feb\u53d6\u7684 key \u4e0d\u518d\u88ab\u4f7f\u7528\u6642\uff0c<code>WeakHashMap</code> \u6703\u81ea\u52d5\u79fb\u9664\u9019\u500b key-value pair\u3002</li> <li>\u5b9a\u671f\u6e05\u7a7a\u5feb\u53d6\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>ScheduledThreadPoolExecutor</code> \u4f86\u5b9a\u671f\u6e05\u7a7a\u5feb\u53d6\u3002</li> <li>\u6216\u8005\u5728\u65b0\u589e\u65b0\u8cc7\u6599\u5230\u5feb\u53d6\u6642\u9806\u4fbf\u9032\u884c\u6e05\u7406\u3002<code>LinkedHashMap</code> \u985e\u5225\u63d0\u4f9b\u4e86\u4e00\u500b\u65b9\u6cd5 <code>removeEldestEntry</code>\uff0c\u4f86\u5e6b\u52a9\u5be6\u73fe\u3002</li> <li>\u5c0d\u65bc\u66f4\u8907\u96dc\u7684\u5feb\u53d6\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u76f4\u63a5\u4f7f\u7528 <code>java.lang.ref</code>\u3002</li> </ul> <p>\u7b2c\u4e09\u7a2e\u9020\u6210 memory leak \u7684\u60c5\u6cc1\u662f listener \u548c callback\u3002</p>"},{"location":"java/effective-java/008.html","title":"Item 8: Avoid finalizers and cleaners","text":""},{"location":"java/effective-java/008.html#finalizers","title":"\u4ec0\u9ebc\u662f Finalizers","text":"<p>finalizer \u662f Java \u63d0\u4f9b\u7684\u4e00\u7a2e resource \u56de\u6536\u6a5f\u5236\uff0c\u4f5c\u7528\u65bc GC (Garbage Collection) \u5728\u56de\u6536\u7269\u4ef6\u524d\uff0c\u6703\u547c\u53eb\u7269\u4ef6\u7684 <code>finalize</code> \u65b9\u6cd5\u4f86\u91cb\u653e resource\u3002</p> <p></p> <p>\u82e5\u7269\u4ef6\u6709 resource \u9700\u8981\u91cb\u653e\uff0c\u5c31\u5c07\u91cb\u653e\u7684\u7a0b\u5f0f\u78bc\u5beb\u5728 <code>protected void finalize()</code>\u3002</p> <pre><code>public class ClassWithFinalizer {\n    @Override\n    protected void finalize() {\n        // release resource\n    }\n}\n</code></pre> <p>Finalizer \u6709 Security, Reliability, Performance \u98a8\u96aa\uff0c\u4e0d\u5efa\u8b70\u4f7f\u7528\uff0c\u4e26\u88ab\u68c4\u7528\u3002\u5728 Java 9 \u88ab\u6a19\u8a18\u70ba deprecated \u4e14\u70ba removal\u3002</p>"},{"location":"java/effective-java/008.html#finalizer","title":"Finalizer \u7684\u66ff\u4ee3\u65b9\u6848","text":"<p>\u4e0d\u4f7f\u7528 finalizer \u53ef\u4ee5\u4f7f\u7528 <code>try-finally</code> \u66ff\u4ee3\u3002</p> <pre><code>FileInputStream  input  = null;\nFileOutputStream output = null;\ntry {\n  input = new FileInputStream(file1);\n  output = new FileOutputStream(file2);\n\n  // ... copy bytes from input to output ...\n\n} finally {\n  if (output != null) {\n    try {\n      output.close();\n    } catch (Exception e) {\n      // ignore exception\n    }\n  }\n  if (input != null) {\n    try {\n      input.close();\n    } catch (Exception e) {\n      // ignore exception\n    }\n  }\n}\n</code></pre> <p>\u7a0b\u5f0f\u78bc\u4e2d\uff0c\u5728 <code>try</code> \u5340\u584a\u4e2d\u5efa\u7acb resource\uff0c\u4e26\u5728 <code>finally</code> \u5340\u584a\u4e2d\u91cb\u653e resource\u3002\u56e0\u70ba <code>try</code> \u5340\u584a\u4e2d\u4e0d\u6b62\u4e00\u500b resource\uff0c\u6240\u4ee5\u5728 <code>finally</code> \u5340\u584a\u4e2d\u8981\u5206\u5225\u91cb\u653e\u3002\u70ba\u4e86\u907f\u514d\u91cb\u653e resource \u6642\u767c\u751f\u4f8b\u5916\u5f71\u97ff\u5176\u4ed6 resource \u7684\u91cb\u653e\uff0c\u6240\u4ee5\u5728\u91cb\u653e resource \u6642\u8981\u7528 <code>try-catch</code> \u5305\u4f4f\uff0c\u5ffd\u7565\u4f8b\u5916\u3002</p> <p>\u9019\u6a23\u7684\u5beb\u6cd5\u771f\u7684\u662f\u53c8\u81ed\u53c8\u9577\u3002</p>"},{"location":"java/effective-java/008.html#try-with-resources","title":"try-with-resources","text":"<p>Java 7 \u65b0\u589e\u7684 try-with-resources \u53ef\u4ee5\u7528\u4f86\u91cb\u653e resource\uff0c\u6539\u9032\u4e0a\u9762\u6240\u63d0\u5230\u7684 <code>try-finally</code> \u7684\u5beb\u6cd5\u3002\u7b49\u50f9\u5beb\u6cd5\u5982\u4e0b:</p> <pre><code>try (FileInputStream input = new FileInputStream(file1);\n     FileOutputStream output = new FileOutputStream(file2)) {\n    // ... copy bytes from input to output ...\n}\n</code></pre>"},{"location":"java/effective-java/008.html#cleaners","title":"Cleaners","text":"<p>try-with-resource \u4e0d\u9069\u7528\u5728\u751f\u547d\u9031\u671f\u9577\u7684 resource\uff0cJava 9 \u65b0\u589e\u4e86 Cleaner \u7528\u4f86\u91cb\u653e\u9577\u751f\u547d\u9031\u671f\u7684 resource\u3002</p> <p>Cleaner \u5141\u8a31\u8a3b\u518a release action \u7684\u52d5\u4f5c\uff0c\u7576\u7269\u4ef6 unreachable \u6642\uff0cCleaner \u6703\u57f7\u884c release action\u3002</p> <pre><code>public class CleaningExample implements AutoCloseable {\n    private static final Cleaner cleaner = Cleaner.create();\n\n    static class State implements Runnable {\n\n        State(...) {\n            // \u6e96\u5099\u6e05\u7406\u52d5\u4f5c\u6240\u9700\u8981\u7684\u8cc7\u6599\u3002\n        }\n\n        public void run() {\n            // \u57f7\u884c\u6e05\u7406\u52d5\u4f5c\uff0c\u6700\u591a\u57f7\u884c\u4e00\u6b21\u3002\n        }\n    }\n\n    private final State state;\n    private final Cleaner.Cleanable cleanable;\n\n    public CleaningExample() {\n        this.state = new State(...);\n        this.cleanable = cleaner.register(this, state);\n    }\n\n    public void close() {\n        cleanable.clean();\n    }\n}\n</code></pre> <ul> <li><code>State</code> \u7a31\u4f5c clean action\uff0c\u5be6\u4f5c <code>Runnable</code> \u4ecb\u9762\uff0c\u8ca0\u8cac\u57f7\u884c\u91cb\u653e resource \u7684\u52d5\u4f5c\u3002</li> <li><code>CleaningExample</code> \u5be6\u4f5c <code>AutoCloseable</code> \u4ecb\u9762\uff0c\u8ca0\u8cac\u8a3b\u518a clean action\u3002\u7576\u7269\u4ef6\u8b8a\u5f97 unreachable \u6642\uff0cclean action \u6703\u88ab\u57f7\u884c\u3002<ul> <li>\u6ce8\u610f\uff0cclean action \u4e0d\u8981\u56de\u53bb\u53c3\u8003 <code>AutoCloseable</code> \u7269\u4ef6\uff0c\u5426\u5247\u6703\u8b93 unreachable \u72c0\u614b\u6c38\u9060\u7121\u6cd5\u9054\u5230\u3002</li> </ul> </li> <li>\u5411 cleaner \u8a3b\u518a clean action \u5f8c\u56de\u50b3 <code>Cleanable</code> \u7269\u4ef6\uff0c\u7528\u4f86\u57f7\u884c clean action\u3002<ul> <li>\u6700\u6709\u6548\u7387\u7684\u505a\u6cd5\u662f\u5728 resource \u4e0d\u9700\u8981\u6642\uff0c\u547c\u53eb <code>clean()</code> \u4f86\u57f7\u884c clean action\u3002(\u7b2c 23-25 \u884c)</li> </ul> </li> <li>clean action \u5728 cleaner \u7684 thread \u4e2d\u57f7\u884c\uff0c\u6240\u6709 clean action \u62cb\u51fa\u7684\u4f8b\u5916\u90fd\u6703\u88ab\u5ffd\u7565\u3002\u6240\u4ee5 clean action \u7684\u4f8b\u5916\u4e0d\u6703\u5f71\u97ff\u5176\u4ed6\u7684 clean action\u3002</li> <li><code>AutoClosable</code> \u8a3b\u518a\u7684\u6240\u6709 clean action \u90fd\u57f7\u884c\u5b8c\u7562\uff0cGC \u624d\u6703\u56de\u6536\u7269\u4ef6\u3002</li> <li>Clean action \u53ef\u4ee5\u7528 lambda \u4f86\u5be6\u4f5c\uff0c\u4f46\u6703\u5f88\u5bb9\u6613\u4e0d\u5c0f\u5fc3\u53c3\u8003\u5230 <code>AutoCloseable</code> \u7269\u4ef6\u3002\u6240\u4ee5\u6309\u7bc4\u4f8b\u5be6\u4f5c\u6210 nested static class \u53ef\u4ee5\u907f\u514d\u9019\u7a2e\u932f\u8aa4\u3002</li> </ul> <p>\u5982\u679c\u4f9d\u8cf4 cleaner \u81ea\u52d5\u57f7\u884c clean action\uff0c\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e0d\u80fd\u4fdd\u8b49\u5728 <code>System.exit</code> (\u5305\u542b\u7a0b\u5f0f\u6b63\u5e38\u7d50\u675f) \u662f\u5426\u6703\u88ab\u57f7\u884c\u3002\u56e0\u6b64\uff0c\u6709\u53ef\u80fd\u7a0b\u5f0f\u7d50\u675f\u4e86\uff0c\u4f46\u662f clean action \u4e26\u6c92\u6709\u57f7\u884c\u3002</p> <p>\u53e6\u5916\uff0ccleaner \u53d7 GC \u6392\u7a0b\uff0c\u4e5f\u6703\u6709 Reliability \u8207 Performance \u7684\u554f\u984c\u3002</p> <p>\u7c21\u55ae\u4f86\u8aaa\uff0c\u61c9\u907f\u514d\u4f7f\u7528 finalizer \u8207 cleaner\u3002</p>"},{"location":"java/effective-java/008.html#_1","title":"\u984d\u5916\u53c3\u8003","text":"<ul> <li>JEP 421: Deprecate Finalization for Removal</li> </ul>"},{"location":"java/effective-java/009.html","title":"Item 9: Prefer try-with-resources to try-finally","text":"<p>\u4f7f\u7528 <code>try-finally</code> \u53ef\u4ee5\u78ba\u4fdd\u8cc7\u6e90\u53ef\u4ee5\u6b63\u5e38\u88ab\u95dc\u9589\uff0c\u4f46\u5982\u540c Item 8 \u6240\u8ff0\uff0c\u9019\u6a23\u7684\u5beb\u6cd5\u6703\u8b93\u7a0b\u5f0f\u78bc\u8b8a\u5f97\u5197\u9577\u4e14\u96e3\u4ee5\u95b1\u8b80\uff0c\u800c\u4e14\u8f03\u8907\u96dc\u7684\u72c0\u6cc1\u53ef\u80fd\u6703\u9020\u6210\u4f8b\u5916\u8986\u84cb\u96e3\u4ee5\u9664\u932f\u3002</p> <p>Java 7 \u5f15\u5165\u4e86 try-with-resources \u4f86\u89e3\u6c7a\u9019\u500b\u554f\u984c\uff0c\u9019\u500b\u8a9e\u6cd5\u53ef\u4ee5\u8b93\u7a0b\u5f0f\u78bc\u66f4\u7c21\u6f54\u4e14\u6613\u8b80\u3002\u985e\u5225\u9700\u5be6\u4f5c <code>AutoCloseable</code> \u4ecb\u9762\uff0c\u4e26\u5be6\u4f5c <code>close</code> \u65b9\u6cd5\uff0c\u9019\u6a23\u5c31\u53ef\u4ee5\u5728 try-with-resources \u4e2d\u4f7f\u7528\u3002</p>"},{"location":"java/effective-java/009.html#try-with-resources","title":"\u4f7f\u7528 try-with-resources","text":"<pre><code>public class Main {\n    public static class SimpleAutoCloseable implements AutoCloseable { // (1)!\n        public void doIo(){\n            System.err.println(\"SimpleAutoCloseable.doIo()\");\n        }\n\n        @Override\n        public void close() {\n            System.err.println(\"SimpleAutoCloseable.close()\");\n        }\n    }\n\n    public static void main(String[] args) {\n        try (SimpleAutoCloseable sac = new SimpleAutoCloseable()) { // (2)!\n            sac.doIo();\n        }\n    }\n}\n</code></pre> <ol> <li><code>SimpleAutoCloseable</code> \u5be6\u4f5c <code>AutoCloseable</code> \u4ecb\u9762\uff0c\u4e26\u5be6\u4f5c <code>close</code> \u65b9\u6cd5\u3002</li> <li>\u5728 <code>try</code> \u62ec\u865f\u4e2d\u5ba3\u544a <code>SimpleAutoCloseable</code> \u7269\u4ef6\uff0c\u5728 try \u5340\u584a\u7d50\u675f\u6642\uff0c\u7121\u8ad6\u6709\u7121\u767c\u751f\u4f8b\u5916\uff0c\u90fd\u6703\u81ea\u52d5\u547c\u53eb <code>close</code> \u65b9\u6cd5\u3002</li> </ol> <p>\u7a0b\u5f0f\u7684\u57f7\u884c\u7d50\u679c</p> <pre><code>SimpleAutoCloseable.doIo()\nSimpleAutoCloseable.close()\n</code></pre>"},{"location":"java/effective-java/009.html#try-with-multiple-resources","title":"try with multiple resources","text":"<pre><code>try (FileInputStream input = new FileInputStream(file1);\n     FileOutputStream output = new FileOutputStream(file2)) {\n}\n</code></pre>"},{"location":"java/effective-java/009.html#try-close","title":"<code>try</code> \u5340\u584a\u767c\u751f\u4f8b\u5916: <code>close</code> \u65b9\u6cd5\u4f9d\u7136\u6703\u88ab\u547c\u53eb","text":"<pre><code>public class Main {\n    public static class SimpleAutoCloseable implements AutoCloseable {\n        public void doIo(){\n            System.err.println(\"SimpleAutoCloseable.doIo()\");\n            throw new RuntimeException(\"Exception in doIo()\");  // (1)!\n        }\n\n        @Override\n        public void close() {\n            System.err.println(\"SimpleAutoCloseable.close()\");\n        }\n    }\n\n    public static void main(String[] args) {\n        try (SimpleAutoCloseable sac = new SimpleAutoCloseable()) {\n            sac.doIo();\n        }\n    }\n}\n</code></pre> <ol> <li>\u6545\u610f\u5728 <code>doIo</code> \u65b9\u6cd5\u4e2d\u62cb\u51fa\u4f8b\u5916\uff0c\u9019\u6703\u9020\u6210 <code>try</code> \u5340\u584a\u5728\u547c\u53eb\u6642\u767c\u751f\u4f8b\u5916\u3002</li> </ol> <p>\u7a0b\u5f0f\u7684\u57f7\u884c\u7d50\u679c:</p> <pre><code>SimpleAutoCloseable.doIo()\nSimpleAutoCloseable.close()\nException in thread \"main\" java.lang.RuntimeException: Exception in doIo()\n    at ...\n</code></pre> <p>\u5982\u679c\u8981\u6355\u6349 <code>doIo</code> \u65b9\u6cd5\u7684\u4f8b\u5916\uff0c\u53ef\u4ee5\u5728 <code>try</code> \u589e\u52a0 <code>catch</code> \u5340\u584a\u3002</p> <pre><code>try (...) {\n    // ...\n} catch (Exception e) {\n    // handle exception\n}\n</code></pre>"},{"location":"java/effective-java/009.html#finally","title":"<code>finally</code> \u5340\u584a\u767c\u751f\u4f8b\u5916","text":"<pre><code>public class Main {\n    public static class SimpleAutoCloseable implements AutoCloseable {\n        public void doIo(){\n            System.err.println(\"SimpleAutoCloseable.doIo()\");\n        }\n\n        @Override\n        public void close() {\n            System.err.println(\"SimpleAutoCloseable.close()\");\n            throw new RuntimeException(\"Exception in close()\"); // (1)!\n        }\n    }\n\n    public static void main(String[] args) {\n        try (SimpleAutoCloseable sac = new SimpleAutoCloseable()) {\n            sac.doIo();\n        }\n    }\n}\n</code></pre> <ol> <li>\u6545\u610f\u5728 <code>close</code> \u65b9\u6cd5\u4e2d\u62cb\u51fa\u4f8b\u5916\uff0c\u6703\u9020\u6210 <code>try</code> \u5340\u584a\u7d50\u675f\u5f8c\u57f7\u884c\u7684 <code>close</code> \u65b9\u6cd5\u767c\u751f\u4f8b\u5916\u3002</li> </ol> <p>\u57f7\u884c\u7d50\u679c:</p> <pre><code>SimpleAutoCloseable.doIo()\nSimpleAutoCloseable.close()\nException in thread \"main\" java.lang.RuntimeException: Exception in close()\n    at ... \n</code></pre> <p>\u5982\u679c\u8981\u6355\u6349 <code>doIo</code> \u65b9\u6cd5\u7684\u4f8b\u5916\uff0c\u53ef\u4ee5\u5728 <code>try</code> \u589e\u52a0 <code>catch</code> \u5340\u584a\u3002</p> <pre><code>try (...) {\n    // ...\n} catch (Exception e) {\n    // handle exception\n}\n</code></pre>"},{"location":"java/effective-java/009.html#try-finally-close-suppress","title":"<code>try</code> \u5340\u584a\u8207 <code>finally</code> \u5340\u584a\u90fd\u767c\u751f\u4f8b\u5916: <code>close</code> \u65b9\u6cd5\u7684\u4f8b\u5916\u6703\u88ab Suppress","text":"<pre><code>public class Main {\n    public static class SimpleAutoCloseable implements AutoCloseable {\n        public void doIo() {\n            System.err.println(\"SimpleAutoCloseable.doIo()\");\n            throw new RuntimeException(\"Exception in doIo()\");  // (1)!\n        }\n\n        @Override\n        public void close() {\n            System.err.println(\"SimpleAutoCloseable.close()\");\n            throw new RuntimeException(\"Exception in close()\");  // (2)!\n        }\n    }\n\n    public static void main(String[] args) {\n        try (SimpleAutoCloseable sac = new SimpleAutoCloseable()) {\n            sac.doIo();\n        }\n    }\n}\n</code></pre> <ol> <li>\u6545\u610f\u5728 <code>doIo</code> \u65b9\u6cd5\u4e2d\u62cb\u51fa\u4f8b\u5916\uff0c\u9019\u6703\u9020\u6210 <code>try</code> \u5340\u584a\u5728\u547c\u53eb\u6642\u767c\u751f\u4f8b\u5916\u3002</li> <li>\u6545\u610f\u5728 <code>close</code> \u65b9\u6cd5\u4e2d\u62cb\u51fa\u4f8b\u5916\uff0c\u6703\u9020\u6210 <code>try</code> \u5340\u584a\u7d50\u675f\u5f8c\u57f7\u884c\u7684 <code>close</code> \u65b9\u6cd5\u767c\u751f\u4f8b\u5916\u3002</li> </ol> <p>\u57f7\u884c\u7d50\u679c:</p> <pre><code>SimpleAutoCloseable.doIo()\nSimpleAutoCloseable.close()\nException in thread \"main\" java.lang.RuntimeException: Exception in doIo()\n    at ...\n    Suppressed: java.lang.RuntimeException: Exception in close()\n        at ...\n</code></pre> <p>try-finally \u7684\u4f8b\u5916\u8986\u84cb\u884c\u70ba</p> <p>\u503c\u5f97\u95dc\u6ce8\u7684\u662f\uff0ctry-with-resource \u767c\u751f\u591a\u500b\u4f8b\u5916\u7684\u884c\u70ba\uff0c\u8207 try-catch-finally \u7684\u591a\u500b\u4f8b\u5916\u884c\u70ba\u4e0d\u540c\u3002(Java 21)</p> <pre><code>try {\n    throw new RuntimeException(\"Exception in try block\");\n} finally {\n    throw new RuntimeException(\"Exception in finally block\");\n}\n</code></pre> <p>\u57f7\u884c\u7d50\u679c</p> <pre><code>Exception in thread \"main\" java.lang.RuntimeException: Exception in finally block\n    at ...\n</code></pre> <p>\u9019\u7a2e\u60c5\u6cc1\uff0c<code>try</code> \u7684\u4f8b\u5916\u8a0a\u606f\u907a\u5931\u4e86\uff0c\u9019\u6703\u9020\u6210\u9664\u932f\u4e0a\u7684\u56f0\u96e3\u3002\u800c try-with-resource \u7684\u4f8b\u5916\u884c\u70ba\uff0c\u6703\u5c07 <code>try</code> \u7684\u4f8b\u5916\u8a0a\u606f\u4fdd\u7559\u4e0b\u4f86\uff0c\u4e26\u5c07 <code>finally</code> \u7684\u4f8b\u5916\u8a0a\u606f\u4ee5 suppressed \u7684\u65b9\u5f0f\u9644\u52a0\u5728\u5f8c\u9762\u3002</p>"},{"location":"java/effective-java/010.html","title":"Item 10: Obey the general contract when overriding equals","text":"<p><code>Object.equals</code> \u8a2d\u8a08\u4f86\u8b93 subclass \u53ef\u4ee5 override \u81ea\u5b9a\u7fa9\u7269\u4ef6\u7684\u6bd4\u8f03\u908f\u8f2f\u3002</p> <p>\u5982\u679c\u6c92\u6709 override\uff0c\u9810\u8a2d\u884c\u70ba\u662f\u6bd4\u8f03\u5169\u500b\u7269\u4ef6\u7684 reference \u662f\u5426\u76f8\u540c\u3002</p>"},{"location":"java/effective-java/010.html#_1","title":"\u9810\u8a2d\u884c\u70ba\u9069\u7528\u65bc","text":"<ul> <li>\u6bcf\u500b\u7269\u4ef6\u672c\u8cea\u4e0a\u90fd\u662f\u7368\u4e00\u7121\u4e8c\u7684</li> <li>class \u6c92\u6709\u9700\u8981\u63d0\u4f9b\u6aa2\u67e5\u5169\u500b\u7269\u4ef6\u662f\u5426\u76f8\u540c\u7684\u9700\u6c42</li> <li>super class \u5df2\u7d93\u5be6\u4f5c <code>equals</code>\uff0c\u4e14\u5224\u65b7\u689d\u4ef6\u9069\u7528\u65bc subclass</li> <li>class \u662f private \u6216 package-private\uff0c\u6211\u5011\u78ba\u4fe1 class \u4e0d\u6703\u88ab\u5176\u4ed6\u5730\u65b9\u4f7f\u7528</li> </ul>"},{"location":"java/effective-java/010.html#override-equals","title":"\u9700\u8981 override <code>equals</code> \u7684\u60c5\u6cc1","text":"<p>value class \u9700\u8981\u81ea\u5b9a\u7fa9 <code>equals</code>\u3002</p> <ul> <li>\u5982\u679c\u6709\u5be6\u4f5c instance controller \u5247\u53ef\u4ee5\u4e0d\u7528 override <code>equals</code> (Item 1)</li> <li>Enum type \u4e5f\u53ef\u4ee5\u4e0d\u7528 override <code>equals</code></li> </ul>"},{"location":"java/effective-java/010.html#equals","title":"<code>equals</code> \u7684\u7d04\u5b9a","text":"<p><code>equals</code> \u662f\u7528\u4f86\u6aa2\u67e5 equivalence relation\u3002\u4e26\u9700\u8981\u6709\u4ee5\u4e0b\u7279\u6027: (<code>x</code>, <code>y</code>, <code>z</code> \u7686\u4e0d\u70ba <code>null</code>)</p> <ul> <li>Reflexive (\u81ea\u53cd\u6027): <code>x.equals(x)</code> \u5fc5\u9808\u662f <code>true</code></li> <li>Symmetric (\u5c0d\u7a31\u6027): \u82e5 <code>x.equals(y)</code> \u662f <code>true</code> \u5247 <code>y.equals(x)</code> \u4e5f\u5fc5\u9808\u662f <code>true</code></li> <li>Transitive (\u50b3\u905e\u6027): \u82e5 <code>x.equals(y)</code> \u8207 <code>y.equals(z)</code> \u90fd\u662f <code>true</code>\uff0c\u5247 <code>x.equals(z)</code> \u4e5f\u5fc5\u9808\u662f <code>true</code></li> <li>Consistent (\u4e00\u81f4\u6027): \u5728\u6c92\u6709\u8cc7\u6599\u6539\u8b8a\u7684\u60c5\u6cc1\u4e0b\uff0c<code>x.equals(y)</code> \u7684\u4efb\u610f\u6b21\u547c\u53eb\u7d50\u679c\u5fc5\u9808\u662f\u76f8\u540c\u7684\u3002</li> <li><code>x.equals(null)</code> \u5fc5\u9808\u662f <code>false</code></li> </ul> <p>\u82e5\u9055\u53cd\u9019\u4e9b\u898f\u5247\uff0c\u7a0b\u5f0f\u5c07\u6703\u8b8a\u5f97\u4e0d\u7a69\u5b9a\uff0c\u4e14\u589e\u52a0\u9664\u932f\u7684\u96e3\u5ea6\u3002</p>"},{"location":"java/effective-java/010.html#reflexivity","title":"\u9055\u53cd Reflexivity \u7684\u7bc4\u4f8b","text":"<pre><code>public class Main {\n    public static class ClassViolateReflective {\n        @Override\n        public boolean equals(Object obj) {\n            return false; // (1)!\n        }\n    }\n\n    public static void main(String[] args) {\n        Collection&lt;ClassViolateReflective&gt; set = new ArrayList&lt;&gt;();\n        ClassViolateReflective objectViolateReflective = new ClassViolateReflective();\n        set.add(objectViolateReflective); // (2)!\n        System.out.println(set.contains(objectViolateReflective)); // (3)!\n    }\n}\n</code></pre> <ol> <li>\u7121\u5dee\u5225\u56de\u50b3 <code>false</code> \u88fd\u9020\u9055\u53cd Reflexive \u7684\u6548\u679c</li> <li>\u5c07\u7269\u4ef6\u52a0\u5165\u96c6\u5408\u4e2d</li> <li>\u5224\u65b7\u65b9\u624d\u52a0\u5165\u7684\u7269\u4ef6\u662f\u5426\u5b58\u5728\u65bc\u96c6\u5408\u4e2d</li> </ol> <p>\u8f38\u51fa\u7d50\u679c:</p> <pre><code>false  &lt;!-- (1)! --&gt;\n</code></pre> <ol> <li>\u671f\u671b\u70ba <code>true</code>\uff0c\u4f46\u56e0\u70ba\u9055\u53cd Reflexive \u800c\u70ba <code>false</code>\u3002</li> </ol>"},{"location":"java/effective-java/010.html#symmetry","title":"\u9055\u53cd Symmetry \u7684\u7bc4\u4f8b","text":"<pre><code>public class Main {\n    public static class CaseInsensitiveString {\n        private final String value;\n\n        public CaseInsensitiveString(String value) {\n            this.value = value;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (obj instanceof CaseInsensitiveString castedObj) {\n                return value.equalsIgnoreCase(castedObj.value);\n            }\n            if (obj instanceof String castedObj) {\n                return value.equalsIgnoreCase(castedObj);\n            }\n            return false;\n        }\n    }\n\n    public static void main(String[] args) {\n        CaseInsensitiveString cis = new CaseInsensitiveString(\"Polish\");\n        String s = \"polish\";\n        System.out.println(cis.equals(s));\n        System.out.println(s.equals(cis));\n    }\n}\n</code></pre> <p>\u8f38\u51fa\u7d50\u679c</p> <pre><code>true\nfalse &lt;!-- (1)! --&gt;\n</code></pre> <ol> <li>\u671f\u671b\u70ba <code>true</code>\uff0c\u4f46\u56e0\u70ba\u9055\u53cd Symmetric \u800c\u70ba <code>false</code>\u3002</li> </ol> <p>\u5982\u679c\u7a0b\u5f0f\u9055\u53cd Symmetric\uff0c\u6211\u5011\u53ef\u4ee5\u77e5\u9053\u4ee5\u4e0b\u7684\u7a0b\u5f0f\u6703\u8f38\u51fa\u4ec0\u9ebc\u55ce?</p> <pre><code>List&lt;CaseInsensitiveString&gt; list = ...\nlist.add(cis);\nSystem.out.println(list.contains(s));\n</code></pre>"},{"location":"java/effective-java/010.html#transitivity","title":"\u9055\u53cd Transitivity \u7684\u7bc4\u4f8b","text":"<pre><code>public class Point {\n    private final int x;\n\n    private final int y;\n\n    public Point(int x, int y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (obj instanceof Point point) {\n            return point.x == x &amp;&amp; point.y == y;\n        }\n        return false;\n    }\n}\n\npublic class ColorPoint extends Point {\n    private final Color color;\n\n    public ColorPoint(int x, int y, Color color) {\n        super(x, y);\n        this.color = color;\n    }\n}\n\npublic static void main(String[] args) {\n    Point point = new Point(3, 6);\n    ColorPoint colorPoint = new ColorPoint(3, 6, Color.RED);\n\n    System.out.println(point.equals(colorPoint));\n    System.out.println(colorPoint.equals(point));\n}\n</code></pre> <p>\u7a0b\u5f0f\u7684\u57f7\u884c\u7d50\u679c\u70ba:</p> <pre><code>true\ntrue\n</code></pre> <p>\u5982\u679c <code>ColorPoint</code> \u5ffd\u7565 <code>color</code> \u7684\u6bd4\u8f03\uff0c\u90a3\u9ebc <code>ColorPoint</code> \u8207 <code>Point</code> \u4e26\u6c92\u6709\u9055\u53cd <code>equals</code> \u7684\u7d04\u5b9a\uff0c\u4f46\u662f\u9019\u7a2e\u5be6\u4f5c\u53ef\u80fd\u7121\u6cd5\u63a5\u53d7\u3002</p> <p>\u4f46\u662f\u5982\u679c\u6211\u5011\u4e0d\u5ffd\u7565 <code>color</code>\uff0c\u90a3\u9ebc\u4ee5\u4e0b\u5be6\u4f5c\u5c07\u9055\u53cd Symmetry\u3002</p> <pre><code>public class ColorPoint extends Point {\n    // ...\n\n    @Override\n    public boolean equals(Object obj) {\n        if(obj instanceof ColorPoint cp)\n            return cp.color == color &amp;&amp; super.equals(obj); // (1)!\n        return false; // (2)!\n    }\n}\n</code></pre> <ol> <li>override <code>equals</code> \u589e\u52a0 <code>color</code> \u7684\u6bd4\u8f03\u3002</li> <li><code>ColorPoint</code> \u8207\u4e0d\u540c type \u7684\u7269\u4ef6\u7121\u6cd5\u6bd4\u8f03\uff0c\u56de\u50b3 <code>false</code>\u3002</li> </ol> <p>\u7a0b\u5f0f\u57f7\u884c\u7d50\u679c\u5982\u4e0b:</p> <pre><code>true\nfalse\n</code></pre> <p>\u5982\u524d\u6240\u8ff0\uff0c\u5be6\u4f5c\u7834\u58de\u4e86 Symmetry\u3002</p> <p>\u7a0b\u5f0f\u78bc\u53ef\u80fd\u53ef\u4ee5\u5728\u5ea7\u6905\u4e0b\u4fee\u6b63:</p> <pre><code>public class ColorPoint extends Point {\n    // ...\n\n    @Override\n    public boolean equals(Object obj) {\n        if (!(obj instanceof Point)) {\n            return false; // (1)!\n        }\n\n        if (obj instanceof ColorPoint cp) {\n            return cp.color == color &amp;&amp; super.equals(obj);\n        }\n        return obj.equals(this); // (2)!\n    }\n}\n</code></pre> <ol> <li>early return\uff0c\u5982\u679c\u7269\u4ef6\u4e0d\u662f <code>Point</code> \u5247\u56de\u50b3 <code>false</code></li> <li>\u5982\u679c\u7269\u4ef6\u662f <code>Point</code>\uff0c\u5247\u547c\u53eb <code>Point.equals</code> \u4f86\u6bd4\u8f03\u3002</li> </ol> <p>\u7a0b\u5f0f\u57f7\u884c\u7d50\u679c\u6eff\u8db3\u4e86 Symmetry\u3002</p> <pre><code>true\ntrue\n</code></pre> <p>\u4e0d\u904e\u7a0b\u5f0f\u4e5f\u56e0\u6b64\u9055\u53cd\u4e86 Transitivity\u3002</p> <pre><code>public static void main(String[] args) {\n    Point point = new Point(3, 6);\n    ColorPoint redPoint = new ColorPoint(3, 6, Color.RED);\n    ColorPoint bluePoint = new ColorPoint(3, 6, Color.BLUE);\n\n    System.out.println(point.equals(redPoint));\n    System.out.println(point.equals(bluePoint));\n    System.out.println(redPoint.equals(bluePoint));\n}\n</code></pre> <p>\u57f7\u884c\u7d50\u679c\u70ba:</p> <pre><code>true\ntrue\nfalse &lt;!-- (1)! --&gt;\n</code></pre> <ol> <li>\u6eff\u8db3 Transitivity \u7684\u60c5\u6cc1\u61c9\u70ba <code>ture</code>\uff0c\u4e0d\u904e\u56e0\u70ba <code>redPoint</code> \u8207 <code>bluePoint</code> \u4e0d\u76f8\u7b49\uff0c\u6240\u4ee5\u56de\u50b3 <code>false</code>\u3002</li> </ol> <p>A fundamental problem of equivalence relations in object-oriented languages</p> <p>There is no way to extend an instantiable class and add a value component while preserving the equals contract, unless you\u2019re willing to forgo the benefits of object-oriented abstraction.</p> <p>\u7269\u4ef6\u5c0e\u5411\u7684\u7e7c\u627f\u67b6\u69cb\uff0c\u5c0d\u65bc <code>equals</code> \u8a2d\u8a08\u8981\u6eff\u8db3 Transitivity \u7279\u6027\uff0c\u6709\u672c\u8cea\u4e0a\u7684\u56f0\u96e3\u3002</p> <p>\u70ba\u907f\u514d Transitivity \u7684\u554f\u984c\u9020\u6210\u7a0b\u5f0f\u7684\u56f0\u96e3\uff0c\u5982\u679c\u80fd\u7684\u8a71  Favor composition over inheritance\u3002</p> <pre><code>public class ColorPoint {\n    private final Point point;\n\n    private final Color color;\n\n    public ColorPoint(Point point, Color color) {\n        this.point = point;\n        this.color = color;\n    }\n\n    public Point asPoint() { // (1)!\n        return point;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (obj instanceof ColorPoint cp) { // (2)!\n            return cp.point.equals(point) &amp;&amp; cp.color == color;\n        }\n        return false; // (3)!\n    }\n}\n</code></pre> <ol> <li>\u63d0\u4f9b <code>asPoint</code> \u65b9\u6cd5\uff0c\u8b93\u4f7f\u7528\u8005\u53ef\u4ee5\u53d6\u5f97 <code>Point</code> \u7269\u4ef6\u3002</li> <li>\u53ea\u6bd4\u8f03 <code>ColorPoint</code> \u985e\u5225\u7684 <code>point</code> \u8207 <code>color</code>\u3002</li> <li>\u5982\u679c\u7269\u4ef6\u4e0d\u662f <code>ColorPoint</code> \u5247\u56de\u50b3 <code>false</code>\u3002</li> </ol>"},{"location":"java/effective-java/010.html#consistent","title":"\u9055\u53cd Consistent \u7684\u7bc4\u4f8b","text":"<p><code>equals</code> \u7684\u5be6\u4f5c\u76f8\u4f9d\u4e0d\u7a69\u5b9a\u7684\u5c6c\u6027\uff0c\u5c31\u5bb9\u6613\u9055\u53cd Consistent\u3002\u4f8b\u5982\uff0c<code>java.net.URL</code> \u7684 <code>equals</code> \u5be6\u4f5c\u76f8\u4f9d\u65bc Host \u5c0d\u61c9\u7684 IP \u4f4d\u5740\uff0c\u4f46\u662f IP \u7684\u4f4d\u5740\u6839\u64da\u7db2\u8def\u7684\u72c0\u6cc1\u53ef\u80fd\u4e0d\u540c\uff0c\u6240\u4ee5\u7121\u6cd5\u4fdd\u8b49 <code>equals</code> \u7684\u7d50\u679c\u6c38\u9060\u90fd\u6703\u662f\u76f8\u7b49\u7684\u3002\u9019\u6a23\u7684\u5be6\u4f5c\u662f\u932f\u8aa4\uff0c\u56e0\u70ba\u5411\u4e0b\u76f8\u5bb9\u7684\u9700\u8981\uff0c\u6240\u4ee5\u7121\u6cd5\u4fee\u6b63\u9019\u500b\u932f\u8aa4\u3002</p> <p><code>equals</code> \u7684\u5be6\u4f5c\u5fc5\u9808\u50c5\u80fd\u76f8\u4f9d\u65bc\u8a18\u61b6\u9ad4\u4e2d\u7269\u4ef6\u7684\u8a08\u7b97\u5f97\u51fa\uff0c\u4e0d\u5f97\u76f8\u4f9d\u65bc\u5916\u90e8\u8cc7\u6e90\u3002</p>"},{"location":"java/effective-java/010.html#non-nullity","title":"non-nullity \u7684\u91cd\u9ede","text":"<p>\u7121\u8ad6 <code>o.equals(null)</code> \u56de\u50b3\u4ec0\u9ebc\uff0c\u90fd\u4e0d\u61c9\u8a72\u62cb\u51fa <code>NullPointerException</code>\u3002</p> <p>\u5f88\u591a\u7a0b\u5f0f\u6703\u5beb\u6210\u9019\u6a23:</p> <pre><code>@Override\npublic boolean equals(Object o) {\n    if (o == null) {\n        return false;\n    }\n    // ...\n}\n</code></pre> <p>\u9019\u6a23\u660e\u78ba\u6aa2\u67e5\u50b3\u5165\u7269\u4ef6\u5fc5\u9808\u4e0d\u662f <code>null</code> \u7684\u505a\u6cd5\u662f\u4e0d\u9700\u8981\u7684\uff0c\u53ea\u9700\u8981\u4f7f\u7528 <code>instanceof</code> \u4f86\u6aa2\u67e5\u5373\u53ef\u3002</p> <pre><code>@Override\npublic boolean equals(Object o) {\n    if (!(o instanceof SpecificType)) {\n        return false;\n    }\n    // ...\n}\n</code></pre> <p>\u7576 <code>instanceof</code> \u7684\u7b2c\u4e00\u500b\u904b\u7b97\u5143(operand) \u662f <code>null</code> \u6642\uff0c\u8a08\u7b97\u7684\u7d50\u679c\u70ba <code>false</code>\u3002\u56e0\u6b64\uff0c\u4e0d\u9700\u8981\u660e\u78ba\u7684\u6aa2\u67e5\u7269\u4ef6\u662f\u5426\u70ba <code>null</code>\uff0c\u4f7f\u7528 <code>instanceof</code> \u5224\u65b7\u7269\u4ef6\u578b\u5225\u5373\u53ef\u3002</p>"},{"location":"java/effective-java/010.html#_2","title":"\u5176\u4ed6\u91cd\u9ede","text":"<ol> <li>\u4f7f\u7528 <code>==</code> \u4f86\u6bd4\u8f03\u5169\u500b\u7269\u4ef6\u662f\u76f8\u540c\u7684 instance\u3002</li> <li>\u4f7f\u7528 <code>instanceof</code> \u6aa2\u67e5\u7269\u4ef6\u7684\u578b\u5225\u3002</li> <li> <p>\u8f49\u578b\u524d\u4f7f\u7528 <code>instanceof</code> \u4f86\u6aa2\u67e5\u578b\u5225\u3002</p> <ul> <li>JEP 394: Pattern Matching for instanceof (Java 16)</li> </ul> <pre><code>if (obj instance String) { // (1)!\n    String s = (String) obj; // (2)!\n    // ...\n}\n</code></pre> <ol> <li>\u6e2c\u8a66 <code>obj</code> \u662f\u5426\u70ba <code>String</code> \u578b\u5225</li> <li>\u8f49\u578b <code>obj</code> \u70ba <code>String</code>\uff0c\u4e26\u5ba3\u544a\u8b8a\u6578\u5132\u5b58\uff0c\u7a0d\u5f8c\u4f7f\u7528\u3002</li> </ol> <p>Pattern Matching for instanceof \u53ef\u4ee5\u7c21\u5316\u9019\u6a23\u7684\u5beb\u6cd5:</p> <pre><code>if (obj instance String s) {\n    // ...\n}\n</code></pre> </li> <li> <p>\u6bd4\u5c0d\u6bcf\u4e00\u500b\u91cd\u8981\u7684\u6b04\u4f4d\u3002</p> <ul> <li>\u975e <code>float</code>, <code>double</code> \u4f7f\u7528 <code>==</code> \u4f86\u6bd4\u8f03\u3002</li> <li><code>float</code>, <code>double</code> \u4f7f\u7528 <code>Float.compare</code>, <code>Double.compare</code> \u4f86\u6bd4\u8f03\u3002</li> <li>\u7269\u4ef6\u53c3\u8003\u5230\u7684\u7269\u4ef6\uff0c\u4f7f\u7528 <code>equals</code> \u4f86\u6bd4\u8f03\u3002</li> <li>array \u4f7f\u7528 <code>Arrays.equals</code> \u4f86\u6bd4\u8f03\u3002</li> <li>\u70ba\u907f\u514d <code>NullPointerException</code> \u4f7f\u7528 <code>Objects.equals</code> \u4f86\u6bd4\u8f03\u3002</li> <li>\u70ba\u4e86\u9054\u5230\u6bd4\u8f03\u597d\u7684\u6548\u7387\uff0c\u7a0b\u5f0f\u61c9\u7576\u5148\u6bd4\u8f03\u6700\u6709\u53ef\u80fd\u4e0d\u76f8\u7b49\u7684\u6b04\u4f4d\u3001\u6bd4\u8f03\u6210\u672c\u8f03\u4f4e\u7684\u6b04\u4f4d\u3002</li> <li>\u4e0d\u61c9\u7576\u6bd4\u8f03\u4e0d\u5c6c\u65bc\u7a0b\u5f0f\u908f\u8f2f\u7684\u72c0\u614b\uff0c\u4f8b\u5982\u7528\u4f86\u8655\u7406\u540c\u6b65\u554f\u984c\u7684 lock \u6b04\u4f4d\u5c31\u4e0d\u61c9\u7576\u62ff\u4f86\u6bd4\u8f03\u3002</li> <li>\u7a0b\u5f0f\u53ef\u4ee5\u4e0d\u7528\u6bd4\u8f03\u53ef\u4ee5\u7531\u5176\u4ed6\u6b04\u4f4d\u63a8\u5c0e\u51fa\u4f86\u7684\u6b04\u4f4d(derived fields)<ul> <li>\u4f46\u662f\uff0c\u5728\u4e0d\u76f8\u7b49\u7684\u60c5\u6cc1\uff0c\u9032\u884c\u63a8\u5c0e\u51fa\u4f86\u7684\u6b04\u4f4d\u6bd4\u8f03\uff0c\u6709\u6a5f\u6703\u6e1b\u5c11\u6bd4\u8f03\u7684\u6642\u9593</li> </ul> </li> </ul> </li> <li> <p>\u5728\u5be6\u4f5c <code>equals</code> \u6642\uff0c\u61c9\u6aa2\u8996\u662f\u5426 symmetric, transitive, consistent</p> </li> <li>override <code>equals</code> \u6642\uff0c\u4e5f\u8981 override <code>hashCode</code><ul> <li>\u8f14\u52a9\u5de5\u5177: Immutables, AutoValue framework, Lombok</li> </ul> </li> <li>\u5225\u592a\u81ea\u4f5c\u8070\u660e<ul> <li>\u7c21\u55ae\u7684\u6b04\u4f4d\u6bd4\u8f03\uff0c\u5bb9\u6613\u8b93\u7a0b\u5f0f\u7dad\u8b77\u8005\u4e86\u89e3\u7a0b\u5f0f\u7684\u884c\u70ba\u3002</li> </ul> </li> <li>\u4e0d\u8981\u628a <code>equals</code> \u7684\u53c3\u6578\u578b\u614b\u6539\u6210\u975e <code>Object</code><ul> <li>\u9019\u6a23\u5beb\u4e26\u6c92\u6709 override <code>Object.equals</code> \u7684\u6548\u679c</li> </ul> </li> </ol>"},{"location":"java/effective-java/011.html","title":"Item 11: Always override hashCode when you override equals","text":"<p>\u898f\u7bc4: Override <code>equals</code> \u5c31\u5fc5\u9808 override <code>hashCode</code>\u3002</p> <p>\u9055\u53cd: <code>Collection</code> \u50cf\u662f <code>HashMap</code>, <code>HashSet</code>\uff0c\u5c31\u7121\u6cd5\u6b63\u78ba\u904b\u4f5c\u3002</p> <p><code>hashCode</code> \u9700\u8981\u5be6\u4f5c\u7684\u898f\u7bc4:</p> <ul> <li>\u5728 <code>equals</code> \u4e2d\u4f7f\u7528\u5230\u7684\u8cc7\u8a0a\u6c92\u6709\u4fee\u6539\u7684\u60c5\u6cc1\u4e0b\uff0c<code>hashCode</code> \u91cd\u8907\u7684\u547c\u53eb\u5fc5\u9808\u56de\u50b3\u76f8\u540c\u7684\u503c\u3002</li> <li>\u4e0d\u540c\u6b21\u7684\u61c9\u7528\u7a0b\u5f0f\u57f7\u884c\u8a08\u7b97\u7684 <code>hashCode</code> \u53ef\u4ee5\u4e0d\u5fc5\u76f8\u540c\u3002</li> <li>\u5982\u679c <code>equals</code> \u6bd4\u8f03\u5169\u500b\u7269\u4ef6\u76f8\u7b49\uff0c\u90a3\u9ebc\u5169\u500b\u7269\u4ef6\u7684 <code>hashCode</code> \u5fc5\u9808\u76f8\u540c\u3002</li> <li><code>equals</code> \u6bd4\u8f03\u4e0d\u76f8\u7b49\u7684\u5169\u500b\u7269\u4ef6\uff0c\u4ed6\u5011\u7684 <code>hashCode</code> \u4e0d\u5fc5\u4e0d\u76f8\u540c\u3002\u4f46\u662f\uff0c\u7522\u751f\u4e0d\u540c\u7684 <code>hashCode</code> \u53ef\u80fd\u6709\u52a9\u65bc\u52a0\u5feb\u7a0b\u5f0f\u7684\u57f7\u884c\u901f\u5ea6\u3002</li> </ul>"},{"location":"java/effective-java/011.html#hashcode-hashmap","title":"\u672a\u6b63\u78ba\u5be6\u4f5c <code>hashCode</code> \u6703\u5c0e\u81f4 <code>HashMap</code> \u7121\u6cd5\u6b63\u78ba\u904b\u4f5c","text":"<pre><code>public class Main {\n    static class PhoneNumber {\n        private final int areaCode, prefix, lineNum;\n\n        public PhoneNumber(int areaCode, int prefix, int lineNum) {\n            this.areaCode = areaCode;\n            this.prefix = prefix;\n            this.lineNum = lineNum;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (!(obj instanceof PhoneNumber pn)) {return false;}\n            return pn.lineNum == lineNum &amp;&amp; pn.prefix == prefix &amp;&amp; pn.areaCode == areaCode;\n        }\n    }\n\n    public static void main(String[] args) {\n        Map&lt;PhoneNumber, String&gt; m = new HashMap&lt;&gt;();\n        m.put(new PhoneNumber(707, 867, 5309), \"Jenny\");\n        System.out.println(m.get(new PhoneNumber(707, 867, 5309)));\n    }\n}\n</code></pre> <p>\u57f7\u884c\u7d50\u679c:</p> <pre><code>null &lt;!-- (1)! --&gt;\n</code></pre> <ol> <li>\u671f\u671b\u7d50\u679c\u61c9\u70ba \"Jenny\"</li> </ol> <p>\u56e0\u70ba <code>PhoneNumber</code> \u6c92\u6709\u6b63\u78ba\u5be6\u4f5c <code>hashCode</code> \u4f7f\u5f97\u5169\u500b <code>PhoneNumber</code> \u7269\u4ef6\u7684 <code>hashCode</code> \u4e0d\u540c\uff0c\u5c0e\u81f4 <code>HashMap</code> \u5c07\u5169\u500b\u7269\u4ef6\u8996\u70ba\u4e0d\u540c\u7684\u7269\u4ef6\u3002</p> <p>\u6700\u7c21\u55ae\uff0c\u4e5f\u662f\u6700\u4e0d\u597d\u7684\u505a\u6cd5\u5c31\u662f\u8b93 <code>hashCode</code> \u56de\u50b3\u56fa\u5b9a\u7684\u503c\u3002</p> <pre><code>public class Main {\n    static class PhoneNumber {\n        private final int areaCode, prefix, lineNum;\n\n        public PhoneNumber(int areaCode, int prefix, int lineNum) {\n            this.areaCode = areaCode;\n            this.prefix = prefix;\n            this.lineNum = lineNum;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (!(obj instanceof PhoneNumber pn)) {return false;}\n            return pn.lineNum == lineNum &amp;&amp; pn.prefix == prefix &amp;&amp; pn.areaCode == areaCode;\n        }\n\n        @Override\n        public int hashCode() {\n            return 42;\n        }\n    }\n\n    public static void main(String[] args) {\n        Map&lt;PhoneNumber, String&gt; m = new HashMap&lt;&gt;();\n        m.put(new PhoneNumber(707, 867, 5309), \"Jenny\");\n        System.out.println(m.get(new PhoneNumber(707, 867, 5309)));\n    }\n}\n</code></pre> <p>\u57f7\u884c\u7d50\u679c:</p> <pre><code>Jenny\n</code></pre> <p>\u6bd4\u8f03\u597d\u7684\u5be6\u4f5c\u65b9\u6cd5:</p> <pre><code>@Override\npublic int hashCode() {\n    int result = Integer.hashCode(areaCode);\n    result = 31 * result + Integer.hashCode(prefix);\n    result = 31 * result + Integer.hashCode(lineNum);\n    return result;\n}\n</code></pre> <p>\u6216\u8005</p> <pre><code>@Override\npublic int hashCode() {\n    return Objects.hash(areaCode, prefix, lineNum);\n}\n</code></pre> <p>\u5c0d\u65bc immutable \u7269\u4ef6\uff0c\u8003\u91cf\u57f7\u884c\u6642\u9593\uff0c\u53ef\u4ee5\u4f7f\u7528 cache\u3002</p>"},{"location":"java/effective-java/011.html#_1","title":"\u5176\u4ed6\u91cd\u9ede","text":"<ul> <li>\u4e0d\u8981\u70ba\u4e86\u6e1b\u5c11 <code>hashCode</code> \u7684\u57f7\u884c\u6642\u9593\uff0c\u800c\u5c07\u91cd\u8981\u6b04\u4f4d\u6392\u9664\u5728 hash \u7684\u8a08\u7b97\u3002\u9019\u6703\u8b93\u96dc\u6e4a\u7684\u6a5f\u5236\u5d29\u58de\u3002<ul> <li>\u88dc\u5145: \u96dc\u6e4a\u51fd\u6578\u8a2d\u8a08\u4e0d\u826f\u5c0e\u81f4 \\(O(n^2)\\) \u6642\u9593\u8907\u96dc\u5ea6</li> </ul> </li> <li>\u4e0d\u8981\u898f\u7bc4 <code>hashCode</code> \u8a72\u5982\u4f55\u8a08\u7b97\uff0c\u9019\u6709\u52a9\u65bc\u906d\u9047 hash \u904b\u7b97\u6709\u7f3a\u9677\u6642\uff0c\u6709\u66ff\u63db\u6f14\u7b97\u6cd5\u7684\u5f48\u6027\u3002</li> </ul>"},{"location":"java/effective-java/012.html","title":"Item 12: Always override <code>toString</code>","text":"<p>Programmer \u6642\u5e38\u6703\u5c07\u7269\u4ef6\u7684\u8a0a\u606f\u5370\u51fa\u4f86\uff0c\u4ee5\u5e6b\u52a9\u8a3a\u65b7\u7a0b\u5f0f\u7684\u884c\u70ba\u3002\u5be6\u4f5c\u8f38\u51fa\u6709\u610f\u7fa9\u6709\u52a9\u65bc Programmer \u95b1\u8b80\u7684\u8a0a\u606f\u6709\u52a9\u65bc\u8a3a\u65b7\u554f\u984c\u3002</p> <p>\u5728\u81ea\u52d5\u5316\u6e2c\u8a66\uff0c\u932f\u8aa4\u8a0a\u606f\u50cf</p> <pre><code>Assertion failure: expected {abc, 123}, but was {abc, 123}.\n</code></pre> <p>\u5c0d\u9664\u932f\u7684\u5e6b\u52a9\u6709\u9650\u3002</p>"},{"location":"java/effective-java/012.html#_1","title":"\u5176\u4ed6\u88dc\u5145","text":"<ul> <li>\u8f38\u51fa\u7269\u4ef6\u7684\u6240\u6709\u91cd\u8981\u8cc7\u8a0a</li> <li>\u8a0a\u606f\u91cf\u592a\u591a\u7684 field\uff0c\u63d0\u4f9b summary \u5373\u53ef</li> </ul>"},{"location":"java/effective-java/013.html","title":"Item 13: Override <code>clone</code> judiciously (\u660e\u667a\u5730)","text":""},{"location":"java/effective-java/013.html#cloneable-clone","title":"\u4f7f\u7528 <code>Cloneable</code> \u5be6\u4f5c <code>clone</code> \u65b9\u6cd5\u7684\u7bc4\u4f8b","text":"<p>\u4ee5\u4e0b\u662f\u4f7f\u7528 <code>Cloneable</code> \u671f\u671b\u6703\u5be6\u4f5c\u51fa\u4f86\u7684\u7a0b\u5f0f\u78bc\u6a23\u8c8c:</p> <pre><code>public class Main {\n    public static class Person implements Cloneable { // (1)!\n        private final String name;\n\n        public Person(String name) {\n            this.name = name;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if(obj instanceof Person p)\n                return name.equals(p.name);\n            return super.equals(obj);\n        }\n\n        @Override\n        public Person clone() { // (2)!\n            try {\n                return (Person) super.clone();\n            } catch (CloneNotSupportedException e) {\n                throw new AssertionError();\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        Person original = new Person(\"Teddy\");\n        Person clone = original.clone();\n        System.out.println(original == clone); // false\n        System.out.println(original.getClass() == clone.getClass()); // true\n        System.out.println(original.equals(clone)); // true\n\n    }\n}\n</code></pre> <ol> <li>\u5be6\u4f5c <code>Cloneable</code> \u4ecb\u9762\uff0c\u4e26\u4e14\u8986\u5beb <code>clone</code> \u65b9\u6cd5\u3002</li> <li>covariant return types: Java \u5141\u8a31 override \u65b9\u6cd5\u7684 return type \u662f\u539f\u65b9\u6cd5\u7684\u5b50\u985e\u5225\u3002<code>Object.clone</code> \u7684 return type \u662f <code>Object</code>\uff0c\u800c <code>Person.clone</code> \u7684 return type \u662f <code>Person</code>\u3002</li> </ol> <p>\u5148\u8aaa\u7d50\u8ad6\uff0c\u61c9\u907f\u514d\u4f7f\u7528 <code>Cloneable</code> \u5be6\u4f5c <code>clone</code>\u3002\u4ee5\u4e0b\u8aaa\u660e\u539f\u56e0\u3002</p>"},{"location":"java/effective-java/013.html#cloneable","title":"<code>Cloneable</code> \u7684\u554f\u984c","text":""},{"location":"java/effective-java/013.html#cloneable-clone-cloneableclone","title":"<code>Cloneable</code> \u6c92\u6709\u5ba3\u544a <code>clone</code> \u65b9\u6cd5\uff0c\u7121\u6cd5\u76f4\u63a5\u547c\u53eb <code>Cloneable.clone</code>","text":"<p>\u9019\u662f <code>Cloneable</code> \u8a2d\u8a08\u4e0a\u6700\u5927\u7684\u7f3a\u9677\uff0c\u56e0\u70ba\u4ed6\u6c92\u6709\u5ba3\u544a <code>clone</code> method\uff0c\u800c <code>Object.clone</code> \u88ab\u5ba3\u544a\u6210 <code>protected</code>\u3002\u4e5f\u5c31\u662f\u8aaa\uff0c\u547c\u53eb\u7aef\u7121\u6cd5\u56e0\u70ba\u7269\u4ef6\u662f <code>Cloneable</code> \u5c31\u76f4\u63a5\u547c\u53eb <code>clone</code> \u65b9\u6cd5\u3002</p> <pre><code>Cloneable person = new Person(\"Teddy\");\nPerson clone = person.clone(); // \u274c \u8a9e\u6cd5\u932f\u8aa4\uff0c\u56e0\u70ba Cloneable \u6c92\u6709\u5ba3\u544a clone \u65b9\u6cd5\n</code></pre> <p>\u4e5f\u8a31\u6709\u4eba\u53ef\u4ee5\u53cd\u99c1\u8aaa\uff0c\u6211\u5011\u53ef\u4ee5\u900f\u904e reflection \u4f86\u547c\u53eb <code>clone</code> \u65b9\u6cd5:</p> <pre><code>public class Main {\n    public static class Person implements Cloneable {\n        private final String name;\n\n        public Person(String name) {\n            this.name = name;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if(obj instanceof Person p)\n                return name.equals(p.name);\n            return super.equals(obj);\n        }\n\n        @Override\n        public Person clone() {\n            try {\n                return (Person) super.clone();\n            } catch (CloneNotSupportedException e) {\n                throw new AssertionError();\n            }\n        }\n    }\n\n    public static void main(String[] args)\n            throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n        Cloneable original = new Person(\"Teddy\");  // (1)!\n        Person clone = (Person) original.getClass().getMethod(\"clone\").invoke(original);  // (2)!\n\n        System.out.println(original == clone); // false\n        System.out.println(original.getClass() == clone.getClass()); // true\n        System.out.println(original.equals(clone)); // true\n    }\n}\n</code></pre> <ol> <li>\u6211\u5011\u53ea\u95dc\u6ce8\u5728\u7269\u4ef6\u7684 clone \u529f\u80fd\uff0c\u9019\u88e1\u5c07 <code>Person</code> \u5ba3\u544a\u6210 <code>Cloneable</code>\u3002</li> <li>\u4f7f\u7528 reflection \u7684\u65b9\u5f0f\u547c\u53eb <code>clone</code> \u65b9\u6cd5\uff0c\u4f46\u4e0d\u662f\u63a8\u85a6\u7684\u505a\u6cd5\u3002</li> </ol> <p>\u4e0d\u904e <code>Cloneable</code> \u6c92\u6709\u5f37\u8feb\u5be6\u4f5c\u4ecb\u9762\u7684\u985e\u5225\u5fc5\u9808\u5be6\u4f5c <code>clone</code>\u3002\u7576\u6211\u5011\u628a <code>clone</code> (lines 16-23) \u5be6\u4f5c\u522a\u9664\uff0c\u5728\u8dd1\u4e00\u6b21\u7a0b\u5f0f\uff0c\u5c07\u5728\u7b2c 29 \u884c\u7684\u5730\u65b9\uff0c\u56e0\u70ba\u627e\u4e0d\u5230 <code>clone</code> \u65b9\u6cd5\u800c\u62cb\u51fa\u4f8b\u5916 <code>java.lang.NoSuchMethodException</code>\u3002</p> <p><code>Cloneable</code> \u6c92\u6709\u5ba3\u544a\u4efb\u4f55 method\uff0c\u90a3\u4ed6\u5230\u5e95\u505a\u4e86\u4ec0\u9ebc?</p> <p><code>Cloneable</code> \u5f71\u97ff <code>Object.clone</code> \u7684\u884c\u70ba\u3002\u7576\u4e00\u500b\u7269\u4ef6\u5be6\u4f5c <code>Cloneable</code> \u4ecb\u9762\uff0c\u9f4a\u5176 <code>Object.clone</code> \u6703\u5c07\u56de\u50b3\u6b04\u4f4d\u9010\u4e00\u8907\u88fd\u7684\u7269\u4ef6\u526f\u672c\u3002\u5982\u679c\u7269\u4ef6\u6c92\u6709\u5be6\u4f5c <code>Cloneable</code> \u4ecb\u9762\u5c31\u547c\u53eb <code>Object.clone</code> \u5c31\u6703\u62cb\u51fa <code>CloneNotSupportedException</code>\u3002</p> <p>\u9019\u7a2e\u8a2d\u8a08\u4e0d\u662f\u5178\u578b\u7684 interface \u505a\u6cd5\uff0c\u800c\u4e14\u4e0d\u61c9\u6a21\u4eff\u3002</p>"},{"location":"java/effective-java/013.html#cloneableclone-superclone-clone","title":"<code>Cloneable.clone</code> \u6c92\u6709\u547c\u53eb <code>super.clone</code> \u5be6\u4f5c\uff0c\u5c07\u6703\u9020\u6210\u5b50\u985e\u5225 <code>clone</code> \u02cb\u8f49\u578b\u7684\u554f\u984b","text":"<pre><code>public static class Animal implements Cloneable {\n    @Override\n    public Animal clone() {\n        return new Animal(); // (1)!\n    }\n}\n\npublic static class Person extends Animal {\n    @Override\n    public Person clone() {\n        return (Person) super.clone(); // (2)!\n    }\n}\n</code></pre> <ol> <li><code>Animal</code> \u7684 <code>clone</code> \u65b9\u6cd5\u6c92\u6709\u547c\u53eb <code>super.clone</code>\uff0c\u800c\u662f\u900f\u904e\u547c\u53eb constructor \u5efa\u7acb <code>Animal</code> \u7269\u4ef6\u3002\u56e0\u70ba <code>Cloneable.clone</code> \u4e26\u6c92\u6709\u898f\u7bc4\uff0c\u9019\u88e1\u7684\u5be6\u4f5c\u65b9\u6cd5\u6c92\u6709\u4efb\u4f55\u7de8\u8b6f\u7684\u932f\u8aa4\u3002</li> <li>\u56e0\u70ba <code>Animal</code> \u7684 <code>clone</code> \u65b9\u6cd5\u6c92\u6709\u547c\u53eb <code>super.clone</code> \u800c\u662f\u900f\u904e constructor \u5efa\u7acb\u7269\u4ef6\uff0c\u56de\u50b3\u7684\u7269\u4ef6\u578b\u614b\u70ba <code>Animal</code>\uff0c\u5c0e\u81f4\u9019\u88e1\u547c\u53eb <code>super.clone</code> \u6703\u7121\u6cd5\u5c07 <code>Animal</code> \u8f49\u578b\u6210 <code>Person</code> \u7269\u4ef6\uff0c\u800c\u62cb\u51fa <code>java.lang.ClassCastException</code> \u4f8b\u5916\u3002</li> </ol>"},{"location":"java/effective-java/013.html#objectclone-shallow-copy-mutable-field-final","title":"\u9810\u8a2d <code>Object.clone</code> \u7684\u5be6\u4f5c\u662f shallow copy\uff0c\u7576 mutable field \u88ab\u5ba3\u544a\u6210 <code>final</code> \u5c31\u7834\u529f\u4e86","text":"<pre><code>public class Main {\n    public static class Stack implements Cloneable {\n        private Object[] elements;\n        private int size = 0;\n        private static final int DEFAULT_INITIAL_CAPACITY = 16;\n\n        public Stack() {\n            this.elements = new Object[DEFAULT_INITIAL_CAPACITY];\n        }\n\n        public void push(Object e) {\n            ensureCapacity();\n            elements[size++] = e;\n        }\n\n        public Object pop() {\n            if (size == 0)\n                throw new EmptyStackException();\n            Object result = elements[--size];\n            elements[size] = null; // Eliminate obsolete reference\n            return result;\n        }\n\n        // Ensure space for at least one more element.\n        private void ensureCapacity() {\n            if (elements.length == size)\n                elements = Arrays.copyOf(elements, 2 * size + 1);\n        }\n\n        @Override\n        public Stack clone() {\n            try {\n                return (Stack) super.clone();\n            } catch (CloneNotSupportedException e) {\n                throw new AssertionError();\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        Stack stack = new Stack();\n        stack.push(\"a\");\n        stack.push(\"b\");\n        stack.push(\"c\");\n\n        Stack cloned = stack.clone();\n\n        System.out.println(\"stack pop: \" + stack.pop());\n        System.out.println(\"cloned pop: \" + cloned.pop());\n    }\n}\n</code></pre> <p>\u8f38\u51fa\u7d50\u679c:</p> <pre><code>stack pop: c\ncloned pop: null &lt;!-- (1)! --&gt;\n</code></pre> <ol> <li>\u671f\u671b\u7d50\u679c\u662f c\uff0c\u4f46\u5be6\u969b\u662f <code>null</code></li> </ol> <p><code>stack.clone</code> \u5f8c\u7684\u8a18\u61b6\u793a\u610f:</p> <p></p> <p>\u9019\u662f shallow copy \u7684\u7d50\u679c\uff0c<code>cloned</code> \u7269\u4ef6\u7684 <code>elements</code> \u6307\u5411\u7684\u662f <code>stack</code> \u7269\u4ef6\u7684 <code>elements</code>\u3002 \u7576 <code>stack</code> \u7269\u4ef6\u7684 <code>elements</code> \u88ab\u4fee\u6539\u6642\uff0c<code>cloned</code> \u7269\u4ef6\u7684 <code>elements</code> \u4e5f\u6703\u88ab\u4fee\u6539\u3002\u6240\u4ee5 <code>stack.pop</code> \u5f8c\uff0c<code>elements</code> \u4e2d\u7684\u5143\u7d20\u88ab\u8a2d\u5b9a\u6210 <code>null</code> \u5c0e\u81f4\u4e4b\u5f8c <code>cloned.pop</code> \u51fa\u7684\u5167\u5bb9\u5c31\u4e0d\u6703\u662f\u6b63\u78ba\u7684\u3002</p> <p></p> <p>\u7576 client \u7aef\u9032\u4e00\u6b65\u64cd\u4f5c <code>clone.pop</code> \u7684\u7269\u4ef6\u6642\uff0c\u56e0\u70ba <code>null</code> \u5c31\u6703\u5f15\u8d77 <code>NullPointerException</code>\u3002</p> <p>\u6211\u5011\u9700\u8981 <code>clone</code> \u65b9\u6cd5\u5be6\u4f5c deep copy\uff0c\u9019\u6a23\u624d\u80fd\u907f\u514d\u9019\u500b\u554f\u984c\u3002</p> <pre><code>@Override\npublic Stack clone() {\n    try {\n        Stack clone = (Stack) super.clone();\n        clone.elements = clone.elements.clone();\n        return clone;\n    } catch (CloneNotSupportedException e) {\n        throw new AssertionError();\n    }\n}\n</code></pre> <p>\u6ce8\u610f\u5230\uff0c\u5982\u679c <code>elements</code> \u88ab\u5ba3\u544a\u6210 <code>final</code> \u5c31\u7834\u529f\u4e86\uff0c\u56e0\u70ba\u7121\u6cd5\u91cd\u65b0\u88ab assign value\u3002</p>"},{"location":"java/effective-java/013.html#clone","title":"\u6709\u4e9b\u72c0\u6cc1\u9700\u8981\u905e\u8ff4\u7684 clone","text":"<p>\u50c5\u50c5 deep clone \u5230 <code>buckets</code> \u9084\u4e0d\u5920\u3002</p> <p></p> <p><code>buckets</code> \u4e2d\u7684 <code>Entry</code> \u7269\u4ef6\u4e5f\u9700\u8981 deep clone\u3002</p> <p></p> <p>\u76f4\u5230\u6bcf\u4e00\u500b <code>Entry</code> \u7269\u4ef6\u90fd\u88ab clone\u3002</p> <p>\u5be6\u4f5c\u7684\u90e8\u5206\u5c31\u4e0d\u5728\u9019\u88e1\u7ad9\u7bc7\u5e45\u4e86\uff0c\u53ef\u4ee5\u53c3\u8003 <code>Hashtable.Entry</code> \u7684\u7a0b\u5f0f\u78bc\u3002</p>"},{"location":"java/effective-java/013.html#deep-copy-clone","title":"deep copy \u8207 <code>clone</code> \u7684\u8a2d\u8a08\u51fa\u767c\u9ede\u4e0d\u540c","text":"<p>A class implements the <code>Cloneable</code> interface to indicate to the Object. <code>clone()</code> method that it is legal for that method to make a field-for-field copy of instances of that class.</p> <p>field-for-field copy \u6307\u7684\u662f shallow copy\u3002</p> <p>\u5728\u5305\u542b\u6709 mutable field \u7684\u7269\u4ef6\u6642\uff0c\u7a0b\u5f0f\u6703\u9700\u8981</p> <ol> <li>\u547c\u53eb <code>super.clone()</code> \u4f86\u53d6\u5f97 shallow copy</li> <li>\u91cd\u65b0\u521d\u59cb\u5316 mutable field \u6216\u8005 \u4f9d\u7167\u539f\u7269\u4ef6\u7684\u72c0\u614b\u91cd\u65b0\u5efa\u7acb mutable field \u7684\u7269\u4ef6</li> </ol>"},{"location":"java/effective-java/013.html#clone-override","title":"\u7236\u985e\u5225 clone \u65b9\u6cd5\u547c\u53eb\u5b50\u985e\u5225 override \u7684\u65b9\u6cd5\u5c07\u5c0e\u81f4\u72c0\u614b\u4e0d\u4e00\u81f4","text":"<ul> <li> \u66f8\u4e2d\u8aaa\u6703\u6709\u9019\u500b\u554f\u984c\uff0c\u4f46\u662f\u627e\u4e0d\u5230\u5177\u9ad4\u4e26\u5408\u7406\u7684\u7bc4\u4f8b\u5448\u73fe\u771f\u7684\u6703\u6709\u9019\u500b\u554f\u984c\u3002</li> </ul> <p>Quote</p> <p>... If clone invokes a method that is overridden in a subclass, this method will execute before the subclass has had a chance to fix its state in the clone, quite possibly leading to corruption in the clone and the original. ...</p>"},{"location":"java/effective-java/013.html#clone_1","title":"\u4e0d\u4f7f\u7528 <code>clone</code> \u7684\u66ff\u4ee3\u65b9\u6848","text":"<p>\u4f7f\u7528 copy constructor \u6216\u8005 copy factory \u4f86\u53d6\u4ee3 <code>clone</code> \u65b9\u6cd5\u3002</p> Copy ConstructorCopy Factory <pre><code>public Yum(Yum yum) {...}\n</code></pre> <pre><code>public static Yum newInstance(Yum yum) {...}\n</code></pre> <p>\u597d\u8655:</p> <ul> <li>\u5728\u8a9e\u610f\u7684\u5be6\u4f5c\u4e0a\uff0c\u6bd4 clone \u66f4\u6e05\u695a\u3002</li> <li>\u4e0d\u6703\u6709\u9700\u8981\u9075\u5b88\u6587\u4ef6\u4e0a\u7684\u898f\u5b9a\uff0c\u4f46\u9055\u898f\u537b\u4e0d\u6703\u6709\u4efb\u4f55\u8a9e\u6cd5\u932f\u8aa4\u7684\u6a5f\u5236\u3002</li> <li>\u53ef\u4ee5\u907f\u514d <code>clone</code> \u5be6\u4f5c\u5728\u9047\u5230 final \u6b04\u4f4d\u6642\uff0c\u7121\u6cd5\u91cd\u65b0 assign value \u7684\u554f\u984c\u3002</li> <li>\u4e0d\u5fc5\u8655\u7406\u4e0d\u5fc5\u8981\u7684\u4f8b\u5916\uff0c\u50cf\u662f <code>CloneNotSupportedException</code>\u3002</li> <li>\u4e0d\u5fc5\u9032\u884c\u7269\u4ef6\u578b\u614b\u8f49\u578b\uff0c\u53ef\u4ee5\u907f\u514d\u932f\u8aa4\u8f49\u578b\u3002</li> </ul> <p>Method \u63a5\u53d7\u7684\u53c3\u6578\u578b\u5225\u76f8\u4f9d\u65bc\u62bd\u8c61\u985e\u5225\u800c\u975e\u5177\u9ad4\u985e\u5225\u3002\u4f8b\u5982 <code>List</code> \u800c\u975e <code>ArrayList</code>\u3002\u9019\u7a2e\u505a\u6cd5\u7a31\u4f5c conversion constructors \u6216 conversion factories\u3002</p>"},{"location":"java/effective-java/014.html","title":"Item 14: Consider implementing Comparable","text":"<p>\u5be6\u4f5c <code>Comparable</code> \u4ecb\u9762\u4f86\u8868\u9054\u7269\u4ef6\u7684 natural ordering\uff0c\u7528\u4f86\u5728\u6392\u5e8f\u6642\u6bd4\u8f03\u7269\u4ef6\u7684\u5927\u5c0f\u3002</p> <pre><code>public interface Comparable&lt;T&gt; {\n    int compareTo(T t);\n}\n</code></pre>"},{"location":"java/effective-java/014.html#_1","title":"\u5be6\u4f5c\u898f\u683c","text":"<ul> <li><code>x.compareTo(y)</code> \u56de\u50b3\u8ca0\u6578\uff0c\u8868\u793a <code>x &lt; y</code></li> <li><code>x.compareTo(y)</code> \u56de\u50b3\u96f6\uff0c\u8868\u793a <code>x = y</code></li> <li><code>x.compareTo(y)</code> \u56de\u50b3\u6b63\u6578\uff0c\u8868\u793a <code>x &gt; y</code></li> <li>\u62cb\u51fa\u4f8b\u5916 <code>ClassCastException</code> \u8868\u793a\u7121\u6cd5\u8207\u8a72\u7269\u4ef6\u6bd4\u8f03\u3002</li> </ul>"},{"location":"java/effective-java/014.html#compareto","title":"<code>compareTo</code> \u9700\u8981\u6eff\u8db3\u7684\u7279\u6027","text":"<ul> <li><code>x.compareTo(y) == -y.compareTo(x)</code></li> <li>Transitive: \u82e5 <code>x.compartTo(y) &gt; 0 &amp;&amp; y.compareTo(z) &gt; 0</code> \u5247 <code>x.compareTo(z) &gt; 0</code></li> <li>\u82e5 <code>x.compareTo(y) == 0</code> \u5247 <code>x.compareTo(z) == y.compareTo(z)</code></li> <li>\u5efa\u8b70\u4f46\u975e\u5fc5\u8981: <code>x.compareTo(y) == 0</code> \u6642\uff0c<code>x.equals(y) == true</code></li> </ul>"},{"location":"java/effective-java/014.html#_2","title":"\u7bc4\u4f8b: \u6309\u5b78\u751f\u6210\u7e3e\u6392\u5e8f","text":"<p>\u6392\u5e8f\u898f\u5247:</p> <ul> <li>\u6309\u5b78\u751f\u6210\u7e3e\u7531\u4f4e\u81f3\u9ad8\u6392\u5e8f</li> <li>\u6210\u7e3e\u76f8\u540c\u6642\uff0c\u6309\u7167\u59d3\u540d\u5b57\u6bcd\u9806\u5e8f\u6392\u5e8f</li> </ul> <pre><code>class Main {\n\n    public static class Student implements Comparable&lt;Student&gt; {\n        private String name;\n\n        private int grade;\n\n        public Student(String name, int grade) {\n            this.name = name;\n            this.grade = grade;\n        }\n\n        @Override\n        public int compareTo(Student o) {\n            int result = Integer.compare(grade, o.grade);\n            if (result == 0) {\n                result = name.compareTo(o.name);\n            }\n            return result;\n        }\n\n        @Override\n        public String toString() {\n            return String.format(\"Student{name='%s', grade=%d}\", name, grade);\n        }\n    }\n\n    public static void main(String[] args) {\n        List&lt;Student&gt; students = new ArrayList&lt;&gt;();\n        students.add(new Student(\"Charlie\", 85));\n        students.add(new Student(\"Bob\", 95));\n        students.add(new Student(\"Alice\", 85));\n        students.add(new Student(\"David\", 90));\n\n        Collections.sort(students);\n\n        System.out.println(students);\n    }\n}\n</code></pre> <p>\u8f38\u51fa\u7d50\u679c:</p> <pre><code>[Student{name='Alice', grade=85},\n Student{name='Charlie', grade=85},\n Student{name='David', grade=90},\n Student{name='Bob', grade=95}]\n</code></pre>"},{"location":"java/effective-java/014.html#comparator-compareto","title":"\u4f7f\u7528 <code>Comparator</code> \u5be6\u4f5c <code>compareTo</code>","text":"<p>\u9019\u7a2e\u505a\u6cd5\u53ef\u4ee5\u8b93 <code>compareTo</code> \u5be6\u4f5c\u66f4\u70ba\u7c21\u6f54\u6613\u8b80\uff0c\u4f46\u7a0d\u5fae\u72a7\u7272\u4e00\u9ede\u6548\u7387\u3002</p> <pre><code>import static java.util.Comparator.comparingInt;\n\npublic static class Student implements Comparable&lt;Student&gt; {\n        private final Comparator&lt;Student&gt; COMPARATOR = \n                comparingInt((Student s) -&gt; s.grade)\n                        .thenComparing(s -&gt; s.name);\n\n        private String name;\n\n        private int grade;\n\n        public Student(String name, int grade) {\n            this.name = name;\n            this.grade = grade;\n        }\n\n        @Override\n        public int compareTo(Student o) {\n            return COMPARATOR.compare(this, o);\n        }\n\n        @Override\n        public String toString() {\n            return String.format(\"Student{name='%s', grade=%d}\", name, grade);\n        }\n    }\n</code></pre>"},{"location":"java/effective-java/055.html","title":"Item 55: Return optionals judiciously","text":"<p>Java 8 \u4ee5\u524d\uff0c\u7576 method \u7121\u6cd5\u53d6\u5f97\u7d50\u679c\uff0c\u6709\u5169\u7a2e\u505a\u6cd5:</p> <ol> <li>\u4e1f\u4f8b\u5916</li> <li>\u56de\u50b3 <code>null</code></li> </ol> <p>\u4e1f\u4f8b\u5916\u4e0d\u597d\uff0c\u56e0\u70ba (1) \u8981\u628a\u4f8b\u5916\u7559\u7d66\u4f8b\u5916\u72c0\u6cc1 (2) \u4f8b\u5916\u6210\u672c\u9ad8\u3002 \u56de\u50b3 <code>null</code> \u4e5f\u4e0d\u597d\uff0c\u547c\u53eb\u7aef\u9700\u8981\u6aa2\u67e5 <code>null</code> \u4ee5\u514d <code>NullPointerException</code>\uff0c\u4f46\u5c0d\u65bc\u547c\u53eb\u7aef\u662f\u5426\u6aa2\u67e5 <code>null</code> \u4e26\u7121\u5f37\u5236\uff0c\u7a0b\u5f0f\u4f9d\u7136\u53ef\u4ee5\u7de8\u8b6f\u901a\u904e\u3002</p> <p>Java 8 \u65b0\u589e <code>Optional&lt;T&gt;</code> \u6539\u5584\u6b64\u554f\u984c\u3002\u6c92\u6709\u7d50\u679c\uff0c\u7a31\u4f5c empty\u3002\u6709\u7d50\u679c\uff0c\u7a31\u4f5c present\u3002</p>"},{"location":"java/effective-java/055.html#collection","title":"\u7bc4\u4f8b: \u53d6\u5f97 Collection \u4e2d\u6700\u5927\u503c","text":"\u7121 Optional\u4f7f\u7528 Optional\u4f7f\u7528 <code>stream</code> \u6539\u5beb <pre><code>public static &lt;E extends Comparable&lt;E&gt;&gt; E max(Collection&lt;E&gt; collection) {\n    if (collection.isEmpty()) {\n        throw new IllegalArgumentException(\"Empty collection\");\n    }\n\n    E result = null;\n    for (E e : collection) {\n        if (result == null || e.compareTo(result) &gt; 0) {\n            result = Objects.requireNonNull(e);\n        }\n    }\n\n    return result;\n}\n</code></pre> <pre><code>public static &lt;E extends Comparable&lt;E&gt;&gt; Optional&lt;E&gt; max(Collection&lt;E&gt; collection) { // (1)!\n    if (collection.isEmpty()) {\n        return Optional.empty(); // (2)!\n    }\n\n    E result = null;\n    for (E e : collection) {\n        if (result == null || e.compareTo(result) &gt; 0) {\n            result = Objects.requireNonNull(e);\n        }\n    }\n\n    return Optional.of(result); // (3)!\n}\n</code></pre> <ol> <li>\u56de\u50b3 <code>Optional&lt;E&gt;</code> \u4ee5\u8868\u793a\u53ef\u80fd\u6c92\u6709\u7d50\u679c</li> <li>\u56de\u50b3 <code>Optional.empty()</code> \u4ee5\u8868\u793a\u6c92\u6709\u7d50\u679c</li> <li>\u56de\u50b3 <code>Optional.of(result)</code> \u4ee5\u8868\u793a\u6709\u7d50\u679c</li> </ol> <p><code>stream</code> \u7684\u8a2d\u8a08\u57fa\u672c\u4e0a\u8003\u616e <code>Optional</code> \u7684\u60c5\u6cc1\uff0c\u53ef\u4ee5\u6539\u5beb\u6210:</p> <pre><code>public static &lt;E extends Comparable&lt;E&gt;&gt; Optional&lt;E&gt; max(Collection&lt;E&gt; collection) {\n    return collection.stream().max(Comparator.naturalOrder());\n}\n</code></pre> <p>Never return a null value from an Optional-returning method</p>"},{"location":"java/effective-java/055.html#_1","title":"\u64cd\u4f5c\u56de\u50b3\u503c","text":"\u6aa2\u67e5\u662f\u5426\u6709\u7d50\u679c\u9810\u8a2d\u503c\u5674\u4f8b\u5916and more <pre><code>Optional&lt;String&gt; maxOpt = max(..);\nif (maxOpt.isPresent()) {\n    String max = maxOpt.get();\n    // do something\n}\n</code></pre> <pre><code>String maxValue = max(..)\n    .orElse(\"No value present\");\n</code></pre> <pre><code>String maxValue = max(..)\n    .orElseThrow(() -&gt; new NoSuchElementException(\"No value present\"));\n</code></pre> <p><code>orElseGet</code>, <code>orElseCompute</code>, <code>compute</code>, <code>filter</code>, <code>map</code>, <code>flatMap</code>, <code>or</code>, <code>ifPresentOrElse</code>, ...</p>"},{"location":"java/effective-java/055.html#map-orelse-ifpresent-get-else","title":"\u7bc4\u4f8b: \u4f7f\u7528 <code>map</code> + <code>orElse</code> \u53d6\u4ee3 <code>ifPresent</code> + <code>get</code> + <code>else</code>","text":"\u4f7f\u7528 <code>ifPresent</code> + <code>get</code> + <code>else</code>\u4f7f\u7528 <code>map</code> + <code>orElse</code> <pre><code>Optional&lt;User&gt; user = ...\nString name = user.isPresent() ? user.get().name() : \"Unknown\";\n</code></pre> <pre><code>Optional&lt;User&gt; user = ...\nString name = user.map(u -&gt; u.name()).orElse(\"Unknown\");\n</code></pre>"},{"location":"java/effective-java/055.html#stream-present","title":"\u7bc4\u4f8b: <code>stream</code> \u904e\u6ffe present \u7684\u503c","text":"\u4f7f\u7528 <code>filter</code> + <code>map</code>\u4f7f\u7528 `flatMap`` <pre><code>streamOfOptionals\n    .filter(Optional::isPresent)\n    .map(Optional::get)\n</code></pre> <pre><code>streamOfOptionals\n    .flatMap(Optional::stream)\n</code></pre>"},{"location":"java/effective-java/055.html#_2","title":"\u6700\u5f8c","text":"<ul> <li>\u5ba3\u544a\u56de\u50b3 <code>Optional&lt;T&gt;</code> \u8b93\u547c\u53eb\u7aef\u77e5\u9053\u53ef\u80fd\u6c92\u6709\u7d50\u679c</li> <li>\u4f7f\u7528 <code>OptionalInt</code>, <code>OptionalLong</code>, <code>OptionalDouble</code> \u4ee3\u66ff <code>Optional&lt;Integer&gt;</code>, <code>Optional&lt;Long&gt;</code>, <code>Optional&lt;Double&gt;</code></li> <li> <p><code>Optional</code> \u6703\u6709\u6548\u80fd\u7684\u8b70\u984c\uff0c\u5982\u679c\u5728\u6548\u80fd\u8981\u6c42\u8f03\u9ad8\u7684\u529f\u80fd\u906d\u9047\u6548\u80fd\u554f\u984c\uff0c\u9700\u8981\u8003\u616e\u4f7f\u7528\u56de\u50b3 <code>null</code> \u6216\u62cb\u4f8b\u5916\u3002\u4ee5\u4e0b\u7c21\u55ae\u6548\u80fd\u8a55\u4f30\u7d50\u679c:</p> \u672a\u4f7f\u7528 optional\u4f7f\u7528 <code>Optional</code> + <code>isPresent</code>\u4f7f\u7528 <code>Optional</code> + <code>ifPresent</code> <pre><code>private static final Random random = new Random();\n\npublic static String getRandomValue() {\n    if (random.nextBoolean()) {\n        return String.valueOf(random.nextInt());\n    } else {\n        return null;\n    }\n}\n\npublic static void main(String[] args) {\n    long start = System.currentTimeMillis();\n\n    int times = 1000000;\n    List&lt;String&gt; collections = new ArrayList&lt;&gt;(times);\n\n    IntStream.range(0, times).forEach(v -&gt; {\n        String val = getRandomValue();\n        if (val != null)\n            collections.add(val);\n    });\n\n    System.out.println(System.currentTimeMillis() - start + \" millis\");\n}\n</code></pre> <p>\u5e73\u5747\u843d\u5728\u5927\u7d04 42 millis</p> <pre><code>private static final Random random = new Random();\n\npublic static Optional&lt;String&gt; getRandomValue() {\n    if (random.nextBoolean()) {\n        return Optional.of(String.valueOf(random.nextInt()));\n    } else {\n        return Optional.empty();\n    }\n}\n\npublic static void main(String[] args) {\n    long start = System.currentTimeMillis();\n\n    int times = 1000000;\n    List&lt;String&gt; collections = new ArrayList&lt;&gt;(times);\n\n    IntStream.range(0, times).forEach(v -&gt; {\n        Optional&lt;String&gt; val = getRandomValue();\n        if (val.isPresent()) {\n            collections.add(val.get());\n        }\n    });\n\n    System.out.println(System.currentTimeMillis() - start + \" millis\");\n}\n</code></pre> <p>\u5e73\u5747\u843d\u5728\u5927\u7d04 50 millis</p> <pre><code>private static final Random random = new Random();\n\npublic static Optional&lt;String&gt; getRandomValue() {\n    if (random.nextBoolean()) {\n        return Optional.of(String.valueOf(random.nextInt()));\n    } else {\n        return Optional.empty();\n    }\n}\n\npublic static void main(String[] args) {\n    long start = System.currentTimeMillis();\n\n    int times = 1000000;\n    List&lt;String&gt; collections = new ArrayList&lt;&gt;(times);\n\n    IntStream.range(0, times).forEach(v -&gt; {\n        String val = getRandomValue();\n        val.ifPresent(collections::add);\n    });\n\n    System.out.println(System.currentTimeMillis() - start + \" millis\");\n}\n</code></pre> <p>\u5e73\u5747\u843d\u5728\u5927\u7d04 70~80 millis</p> </li> </ul>"},{"location":"kubernetes/pod-topology-spread-constraints.html","title":"Pod Topology Spread Constraints","text":""},{"location":"kubernetes/pod-topology-spread-constraints.html#skew","title":"Skew \u7684\u8a08\u7b97","text":"<p>skew = \u76ee\u524d topology \u4e2d\u7684 Pods \u6578\u91cf - topology \u4e2d\u6700\u5c11 Pods \u6578\u91cf</p> <p>\u53c3\u8003: Introducing PodTopologySpread</p>"},{"location":"kubernetes/pod-topology-spread-constraints.html#1-topology-key-zone","title":"\u7bc4\u4f8b 1: topology key: zone","text":"<p> skew = 3 - 0 = 3</p> <p> skew = 1 - 1 = 0</p> <p> skew = 4 - 2 = 2</p> <p> skew = 4 - 2 = 2</p> <p> skew = 3 - 3 = 0</p> <p> skew = 3 - 3 = 0</p>"},{"location":"kubernetes/pod-topology-spread-constraints.html#2-topology-key-node","title":"\u7bc4\u4f8b 2: topology key: node","text":"<p> skew = 1 - 0 = 1</p> <p> skew = 4 - 0 = 4</p> <p> skew = 3 - 0 = 3</p> <p> skew = 1 - 0 = 1</p>"},{"location":"kubernetes/pod-topology-spread-constraints.html#1-one-topology-spread-constraint","title":"\u7bc4\u4f8b 1: one topology spread constraint","text":"<p>Cluster \u6709 4 \u500b Node\uff0c3 \u500b Pod (label: <code>foo:bar</code>)\uff0c\u5206\u5225\u88ab\u90e8\u7f72\u5230 Node 1, Node 2, Node 3\u3002</p> <p></p> <p>\u65b0\u9032\u4f86\u7684 Pod \u76ee\u6a19\u8981\u5c31\u76ee\u524d\u7684\u72c0\u614b\uff0c\u5e73\u5747\u5206\u6563\u5728\u500b Zone\u3002\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u914d\u7f6e\u3002</p> <pre><code>kind: Pod\napiVersion: v1\nmetadata:\n  name: mypod\n  labels:\n    foo: bar\nspec:\n  topologySpreadConstraints:\n  - maxSkew: 1 # (1)!\n    topologyKey: zone # (2)!\n    whenUnsatisfiable: DoNotSchedule # (3)!\n    labelSelector:\n      matchLabels:\n        foo: bar # (4)!\n  containers:\n  - name: pause\n    image: registry.k8s.io/pause:3.1\n</code></pre> <ol> <li>Pod \u5206\u914d\u7684\u6578\u91cf\u8207\u6700\u5c11\u6578\u91cf\uff0c\u6700\u591a\u76f8\u5dee 1</li> <li>Node \u4ee5 <code>zone</code> \u5206\u7fa4\uff0cPod \u61c9\u5e73\u5747\u5206\u914d\u81f3\u5404\u7fa4\u3002</li> <li>\u7576\u65b0\u9032\u7684 Pod \u7121\u6cd5\u6eff\u8db3\u689d\u4ef6\u6642\uff0c\u4fdd\u6301 pending \u4e0d\u8981\u5206\u914d Node\u3002</li> <li>\u9650\u5236\u689d\u4ef6\u5957\u7528\u5728 label <code>foo: bar</code> \u7684 Pod \u4e0a\u3002</li> </ol>"},{"location":"kubernetes/pod-topology-spread-constraints.html#pod-zone-a","title":"\u2715 \u65b0\u9032\u4f86\u7684 Pod \u88ab\u5206\u914d\u81f3 Zone A","text":"<p>  skew = 3 - 1 = 2\uff0c\u8d85\u904e <code>maxSkew: 1</code> (line 9-10) \u7684\u9650\u5236\u3002</p>"},{"location":"kubernetes/pod-topology-spread-constraints.html#pod-zone-b","title":"\u2713 \u65b0\u9032\u4f86\u7684 Pod \u88ab\u5206\u914d\u81f3 Zone B","text":"<p>  skew = 2 - 2 = 0\uff0c\u7b26\u5408 <code>maxSkew: 1</code> (line 9-10) \u7684\u9650\u5236\u3002</p>"},{"location":"kubernetes/pod-topology-spread-constraints.html#2-multiple-topology-spread-constraints","title":"\u7bc4\u4f8b 2: multiple topology spread constraints","text":"<p>Cluster \u6709 4 \u500b Node\uff0c3 \u500b Pod (label: <code>foo:bar</code>)\uff0c\u5206\u5225\u88ab\u90e8\u7f72\u5230 Node 1, Node 2, Node 3\u3002</p> <p></p> <p>\u65b0\u9032\u4f86\u7684 Pod \u76ee\u6a19\u8981\u5c31\u76ee\u524d\u7684\u72c0\u614b\uff0c\u5e73\u5747\u5206\u6563\u5728\u500b Zone \u8207 Node\u3002\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u914d\u7f6e\u3002</p> <pre><code>kind: Pod\napiVersion: v1\nmetadata:\n  name: mypod\n  labels:\n    foo: bar\nspec:\n  topologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone \n    whenUnsatisfiable: DoNotSchedule\n    labelSelector:\n      matchLabels:\n        foo: bar\n  - maxSkew: 1 # (1)!\n    topologyKey: node # (2)!\n    whenUnsatisfiable: DoNotSchedule # (3)!\n    labelSelector:\n      matchLabels:\n        foo: bar # (4)!\n  containers:\n  - name: pause\n    image: registry.k8s.io/pause:3.1\n</code></pre> <ol> <li>Pod \u5206\u914d\u7684\u6700\u5927\u6578\u91cf\u8207\u6700\u5c11\u6578\u91cf\uff0c\u6700\u591a\u76f8\u5dee 1</li> <li>Node \u4ee5 <code>node</code> \u5206\u7fa4\uff0cPod \u61c9\u5e73\u5747\u5206\u914d\u81f3\u5404\u7fa4\u3002</li> <li>\u7576\u65b0\u9032\u7684 Pod \u7121\u6cd5\u6eff\u8db3\u689d\u4ef6\u6642\uff0c\u4fdd\u6301 pending \u4e0d\u8981\u5206\u914d Node\u3002</li> <li>\u9650\u5236\u689d\u4ef6\u5957\u7528\u5728 label <code>foo: bar</code> \u7684 Pod \u4e0a\u3002</li> </ol>"},{"location":"kubernetes/pod-topology-spread-constraints.html#pod-zone-a_1","title":"\u2715 \u65b0\u9032\u4f86\u7684 Pod \u88ab\u5206\u914d\u81f3 Zone A","text":"<p>  Zone: skew = 3 - 1 = 2\uff0c\u8d85\u904e <code>maxSkew: 1</code> (line 9-10) \u7684\u9650\u5236\u3002</p>"},{"location":"kubernetes/pod-topology-spread-constraints.html#pod-zone-b-node-3","title":"\u2715 \u65b0\u9032\u4f86\u7684 Pod \u88ab\u5206\u914d\u81f3 Zone B \u7684 Node 3","text":"<p> Zone: skew = 2 - 2 = 0\uff0c\u7b26\u5408 <code>maxSkew: 1</code> (line 9-10) \u7684\u9650\u5236\u3002 Node: skew = 2 - 0 = 2\uff0c\u8d85\u904e <code>maxSkew: 1</code> (line 15-16) \u7684\u9650\u5236\u3002</p>"},{"location":"kubernetes/pod-topology-spread-constraints.html#pod-zone-b-node-4","title":"\u2713 \u65b0\u9032\u4f86\u7684 Pod \u88ab\u5206\u914d\u81f3 Zone B \u7684 Node 4","text":"<p> Zone: 2 - 2 = 0\uff0c\u7b26\u5408 <code>maxSkew: 1</code> (line 9-10) \u7684\u9650\u5236\u3002 Node: 1 - 1 = 0\uff0c\u7b26\u5408 <code>maxSkew: 1</code> (line 15-16) \u7684\u9650\u5236\u3002</p>"},{"location":"kubernetes/pod-topology-spread-constraints.html#3-conflicting-topology-spread-constraints","title":"\u7bc4\u4f8b 3: conflicting topology spread constraints","text":"<p>\u8003\u616e\u7bc4\u4f8b 2 \u7684\u8a2d\u5b9a\u906d\u9047\u885d\u7a81\u7684\u72c0\u6cc1</p> <p></p> <p>\u96d6\u7136\u76ee\u524d\u7684\u72c0\u614b\u7b26\u5408\u8a2d\u5b9a\u7684\u9650\u5236\uff0c\u4e0d\u904e\u65b0\u9032\u7684 Pod \u6c92\u6709\u53ef\u80fd\u6709\u6392\u6210\u53ef\u4ee5\u6eff\u8db3\u9650\u5236\uff0c\u6545\u6703\u8655\u65bc Pending \u72c0\u614b\u3002</p>"},{"location":"kubernetes/pod-topology-spread-constraints.html#pod-zone-a_2","title":"\u2715 \u65b0\u9032\u4f86\u7684 Pod \u88ab\u5206\u914d\u81f3 Zone A","text":"<p>  Zone: skew = 4 - 2 = 2\uff0c\u8d85\u904e <code>maxSkew: 1</code> (line 9-10) \u7684\u9650\u5236\u3002</p>"},{"location":"kubernetes/pod-topology-spread-constraints.html#pod-zone-b_1","title":"\u2715 \u65b0\u9032\u4f86\u7684 Pod \u88ab\u5206\u914d\u81f3 Zone B","text":"<p>Zone: skew = 3 - 3 = 0\uff0c\u7b26\u5408 <code>maxSkew: 1</code> (line 9-10) \u7684\u9650\u5236\u3002 Node: skew = 3 - 1 = 2\uff0c\u8d85\u904e <code>maxSkew: 1</code> (line 15-16) \u7684\u9650\u5236\u3002</p>"},{"location":"kubernetes/pod-topology-spread-constraints.html#_1","title":"\u89e3\u6c7a\u65b9\u6cd5","text":"<ul> <li>\u8abf\u6574 <code>maxSkew: 2</code> (line 15)</li> <li>\u8abf\u6574 <code>whenUnsatisfiable: ScheduleAnyway</code> (line 17)</li> </ul>"},{"location":"kubernetes/pod-topology-spread-constraints.html#4-topology-spread-constraints-with-node-affinity","title":"\u7bc4\u4f8b 4: topology spread constraints with node affinity","text":"<p>Cluster \u6709 5 \u500b Node\uff0c\u88ab\u90e8\u7f72\u5230 Zone A, Zone B, Zone C\u3002</p> <p></p> <p>\u6211\u5011\u8981\u6392\u9664 Zone C \u4e0d\u8981\u88ab\u5206\u914d Pod\u3002\u4e5f\u5c31\u662f\u8aaa\uff0cPod \u53ea\u6703\u88ab\u5b89\u6392\u5230 Zone A, Zone B \u7684 Node \u4e0a\u57f7\u884c\u3002\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u914d\u7f6e\u3002</p> <pre><code>kind: Pod\napiVersion: v1\nmetadata:\n  name: mypod\n  labels:\n    foo: bar\nspec:\n  topologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    labelSelector:\n      matchLabels:\n        foo: bar\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n        - matchExpressions:\n          - key: zone\n            operator: NotIn\n            values:\n            - zoneC\n  containers:\n  - name: pause\n    image: registry.k8s.io/pause:3.1\n</code></pre>"},{"location":"kubernetes/pod-topology-spread-constraints.html#_2","title":"\u53c3\u8003","text":"<ul> <li>Pod Topology Spread Constraints</li> </ul>"},{"location":"spring-boot/scheduler/hello_world.html","title":"Quartz: Hello World","text":""},{"location":"spring-boot/scheduler/hello_world.html#5-hello-world","title":"\u6bcf 5 \u79d2\u8f38\u51fa \"Hello World!\" \u5230\u756b\u9762\u4e0a","text":"<pre>c111fc19-2f1e-45d6-8a70-138479ef27b7</pre> <p>\u7576\u7a0b\u5f0f\u555f\u52d5\u6642\uff0c Quartz Scheduler \u6703\u5728\u80cc\u666f\u57f7\u884c\uff0c\u4e26\u5728 <code>helloWorldTrigger</code> \u5b9a\u7fa9\u7684\u6bcf 5 \u79d2\u57f7\u884c\u4e00\u6b21 <code>HelloWorldJob</code> \u5be6\u4f5c\u7684 <code>execute</code> \u8f38\u51fa \"Hello World!\" \u5230\u756b\u9762\u4e0a\u3002</p> <p>\u5728 <code>build.gradle.kts</code> \u4e2d\u65b0\u589e <code>spring-boot-starter-quartz</code> \u76f8\u4f9d\u5957\u4ef6\u3002\u5982\u6b64\uff0c\u7a0b\u5f0f\u555f\u52d5\u5f8c\u5c31\u6703\u6709\u4e00\u500b Quartz Scheduler \u5728\u80cc\u666f\u57f7\u884c\u3002</p> build.gradle.kts<pre><code>implementation(\"org.springframework.boot:spring-boot-starter-quartz\")\n</code></pre> <p>\u63a5\u8457\uff0c\u6211\u5011\u9700\u8981\u5b9a\u7fa9 <code>HelloWorldJob</code> \u5be6\u4f5c <code>Job</code> \u4ecb\u9762\uff0c\u5be6\u4f5c\u8f38\u51fa \"Hello World!\" \u7684\u908f\u8f2f\u3002</p> HelloWorldJob.java<pre><code>public class HelloWorldJob implements Job {\n    @Override\n    public void execute(JobExecutionContext jobExecutionContext) {\n        System.out.println(\"Hello World!\");\n    }\n}\n</code></pre> <p>\u7136\u5f8c\uff0c\u6211\u5011\u9700\u8981\u518d\u65b0\u589e\u5169\u500b Bean \u5b9a\u7fa9 <code>JobDetail</code> \u548c <code>Trigger</code>\u3002\u5176\u4e2d\uff0c<code>JobDetail</code> \u5b9a\u7fa9\u4e86 <code>HelloWorldJob</code> \u7684 metadata\uff0c\u800c <code>Trigger</code> \u5b9a\u7fa9\u4e86 <code>JobDetail</code> \u7684\u89f8\u767c\u689d\u4ef6\u3002</p> QuartzConfig.java<pre><code>@Component\npublic class QuartzConfig {\n\n    @Bean\n    public JobDetail helloWorldJobDetail() {\n        return JobBuilder.newJob(HelloWorldJob.class)\n                         .withIdentity(\"helloWorldJob\")\n                         .storeDurably() // (1)\n                         .build();\n    }\n\n    @Bean\n    public Trigger helloWorldTrigger(JobDetail printHelloWorldJobDetail) {\n        SimpleScheduleBuilder scheduleBuilder = SimpleScheduleBuilder\n                .simpleSchedule()\n                .withIntervalInSeconds(5)\n                .repeatForever();\n        return TriggerBuilder.newTrigger()\n                             .forJob(printHelloWorldJobDetail)\n                             .withIdentity(\"helloWorldTrigger\")\n                             .withSchedule(scheduleBuilder)\n                             .build();\n    }\n}\n</code></pre> <ol> <li><code>Trigger</code> \u8981\u57f7\u884c\u7684 <code>JobDetail</code> \u5fc5\u9808\u8981\u5728 <code>JobStore</code> \u4e2d\uff0c\u8a2d\u5b9a <code>storeDurably()</code> \u4f86\u4fdd\u8b49 <code>JobDetail</code> \u5728 <code>JobStore</code> \u4e2d\u3002\u5426\u5247\uff0c<code>JobDetail</code> \u6703\u5728\u6c92\u6709\u8207 <code>Trigger</code> \u95dc\u806f\u7684\u60c5\u6cc1\u4e0b\u88ab\u79fb\u9664\u3002</li> </ol> <p>\u6700\u5f8c\uff0c\u628a\u7a0b\u5f0f\u8dd1\u8d77\u4f86\u5f8c\uff0c\u6bcf 5 \u79d2\u5c31\u6703\u5728\u756b\u9762\u4e0a\u8f38\u51fa \"Hello World!\"\u3002</p>"},{"location":"spring-boot/scheduler/hello_world.html#5-hello-name","title":"\u6bcf 5 \u79d2\u8f38\u51fa \"Hello {name}!\" \u5230\u756b\u9762\u4e0a","text":"<p>\u9019\u88e1\u5c55\u793a <code>Job</code> \u53ef\u4ee5\u5b58\u53d6\u5230 bean \u7684\u65b9\u5f0f\u3002\u70ba\u4e86\u65b9\u4fbf\u5c55\u793a\uff0c\u6211\u5011\u65b0\u589e\u4e00\u500b <code>name</code> bean\uff0c\u4e26\u5728 <code>HelloWorldJob</code> \u4e2d\u53d6\u5f97 <code>name</code> bean \u7684\u503c\u3002</p> HelloWorldJob.java<pre><code>@Bean\npublic String name() {\n    return \"Teddy\";\n}\n</code></pre> <p>\u4fee\u6539 <code>HelloWorldJob</code> \u7684\u5efa\u69cb\u5f0f\u63a5\u6536 <code>name</code> \u5b57\u4e32\uff0c\u9019\u500b\u8b8a\u6578\u7684\u5be6\u9ad4\uff0c\u6703\u900f\u904e DI \u6ce8\u5165\u3002</p> HelloWorldJob.java<pre><code>public class HelloWorldJob implements Job {\n    private final String name;\n\n    public HelloWorldJob(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public void execute(JobExecutionContext jobExecutionContext) {\n        System.out.println(\"Hello \" + name + \"!\");\n    }\n}\n</code></pre> <p>\u6700\u5f8c\uff0c\u628a\u7a0b\u5f0f\u8dd1\u8d77\u4f86\u5f8c\uff0c\u6bcf 5 \u79d2\u5c31\u6703\u5728\u756b\u9762\u4e0a\u8f38\u51fa \"Hello Teddy!\"\u3002</p>"},{"location":"spring-boot/scheduler/hello_world.html#_1","title":"\u81ea\u52d5\u5316\u6e2c\u8a66","text":"<p>\u4f7f\u7528 awaitility \u4f86\u5be6\u4f5c\u9700\u8981\u7b49\u5f85\u6642\u9593\u7684\u6e2c\u8a66\u3002\u9996\u5148\uff0c\u9700\u8981\u589e\u52a0\u76f8\u4f9d\u5957\u4ef6\u3002</p> build.gradle.kts<pre><code>testImplementation(\"org.awaitility:awaitility\")\n</code></pre> <p>awaitility \u5728 Spring Boot 3.2 \u5df2\u53d7\u5230\u76f8\u4f9d\u63a7\u7ba1\uff0c\u6240\u4ee5\u4f7f\u7528 3.2 \u4ee5\u4e0a\u7684\u7248\u672c\u9019\u88e1\u4e0d\u9700\u8981\u52a0\u7248\u672c\u865f\u78bc\u3002</p> <p>\u4f7f\u7528 JUnit 5 \u9032\u884c\u6e2c\u8a66\u3002\u6e2c\u8a66\u9a57\u8b49 15 \u79d2\u5167\uff0c\u5fc5\u9808\u8981\u6709 \"Hello World!\" \u5b57\u4e32\u8f38\u51fa\u5230 standard output \u4e0a\u3002</p> <pre><code>@SpringBootTest\nclass HelloWorldJobTest {\n    private final PrintStream standardOut = System.out; // (1)!\n\n    private final ByteArrayOutputStream outputStreamCaptor = new ByteArrayOutputStream(); // (2)!\n\n    @BeforeEach\n    public void setUp() {\n        System.setOut(new PrintStream(outputStreamCaptor)); // (3)!\n    }\n\n    @AfterEach\n    public void tearDown() {\n        System.setOut(standardOut); // (4)!\n    }\n\n    @Test\n    void helloWorld() {\n    await().atMost(Duration.ofSeconds(15)) // (5)!\n           .untilAsserted(() -&gt; assertThat(outputStreamCaptor.toString()).contains(\"Hello World!\")); // (6)!\n    }\n}\n</code></pre> <ol> <li>\u5148\u8a18\u4e0b\u9810\u8a2d\u7684 <code>System.out</code>\uff0c\u5728\u6e2c\u8a66\u7d50\u675f\u5f8c\u9084\u539f\u4f7f\u7528\u3002</li> <li>\u5efa\u7acb\u4e00\u500b <code>ByteArrayOutputStream</code> \u4f86\u53d6\u4ee3 <code>System.out</code>\uff0c\u9019\u6a23\u53ef\u4ee5\u628a <code>System.out</code> \u7684\u8f38\u51fa\u6355\u6349\u5230 <code>ByteArrayOutputStream</code> \u4e2d\u3002</li> <li>\u5728\u6bcf\u4e00\u500b\u6e2c\u8a66\u958b\u59cb\u524d\uff0c\u628a <code>System.out</code> \u8a2d\u5b9a\u70ba <code>ByteArrayOutputStream</code>\u3002</li> <li>\u5728\u6bcf\u4e00\u500b\u6e2c\u8a66\u7d50\u675f\u5f8c\uff0c\u628a <code>System.out</code> \u9084\u539f\u70ba\u9810\u8a2d\u7684 <code>System.out</code>\u3002</li> <li>\u7b49\u5f85\u6700\u591a 15 \u79d2\u3002</li> <li>\u78ba\u8a8d standard output \u8f38\u51fa\u5fc5\u9808\u5305\u542b \"Hello World!\"\u3002</li> </ol>"},{"location":"spring-boot/scheduler/hello_world.html#_2","title":"\u53c3\u8003","text":"<ul> <li>Scheduling Tasks</li> <li>Unit Testing of <code>System.out.println()</code> with JUnit</li> </ul>"},{"location":"spring-boot/scheduler/jdbc_job_store.html","title":"Quartz: JDBC JobStore","text":""},{"location":"spring-boot/scheduler/jdbc_job_store.html#job","title":"\u7c21\u55ae\u7684 Job \u7bc4\u4f8b","text":"<p>\u4ee5\u4e0b\u7bc4\u4f8b\u5c55\u793a\uff0c\u5728 Spring Boot \u4e2d\u5982\u4f55\u8a2d\u5b9a Quartz \u4f7f\u7528 JDBC JobStore\u3002\u5982\u6b64\u4e00\u4f86\uff0c\u6211\u5011\u628a Job \u653e\u5230 cluster \u4e0a\u57f7\u884c\u3002</p> <p>\u5728 <code>build.gradle.kts</code> \u4e2d\u65b0\u589e <code>spring-boot-starter-quartz</code> \u76f8\u4f9d\u5957\u4ef6\u3002\u5982\u6b64\uff0c\u7a0b\u5f0f\u555f\u52d5\u5f8c\u5c31\u6703\u6709\u4e00\u500b Quartz Scheduler \u5728\u80cc\u666f\u57f7\u884c\u3002</p> build.gradle.kts<pre><code>implementation(\"org.springframework.boot:spring-boot-starter-quartz\")\n</code></pre> <p>\u4f7f\u7528 docker compose \u57f7\u884c mysql\u3002</p> compose.yml<pre><code>version: '3.1'\n\nservices:\n  database:\n    image: mysql:8.4.0\n    ports:\n      - \"3306:3306\"\n    environment:\n      MYSQL_ALLOW_EMPTY_PASSWORD: true\n      MYSQL_DATABASE: quartz\n</code></pre> <p>\u8a2d\u5b9a spring boot \u7684 properties\u3002</p> src/main/resources/application.yml<pre><code>spring:\n  datasource: #(1)!\n    name: datasource\n    url: jdbc:mysql://localhost:3306/quartz\n    username: root\n    password:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n  quartz:\n    job-store-type: jdbc #(2)!\n    jdbc:\n      initialize-schema: always #(3)!\n    overwrite-existing-jobs: true\n    properties:\n      org:\n        quartz:\n          scheduler:\n            instanceName: scheduler\n            instanceId: AUTO #(4)!\n          dataSource:\n            quartzDataSource: #(5)!\n              driver: com.mysql.cj.jdbc.Driver\n              URL: jdbc:mysql://localhost:3306/quartz\n              user: root\n              password:\n              provider: hikaricp\n          jobStore:\n            class: org.quartz.impl.jdbcjobstore.JobStoreTX\n            dataSource: quartzDataSource #(5)!\n            isClustered: true #(6)!\n</code></pre> <ol> <li><code>spring.quartz.jdbc.initialize-schema</code> \u5403\u7684 Data Source \u8a2d\u5b9a\u3002\u5728 <code>spring.quartz.properties.org.quartz.dataSource</code> \u8a2d\u5b9a\u7684 Data Source \u4e0d\u652f\u63f4 initialize schema\u3002</li> <li>\u4f7f\u7528 JDBC JobStore\u3002</li> <li>\u6bcf\u6b21\u555f\u52d5\u90fd\u6703\u521d\u59cb\u5316 schema\u3002\u63db\u53e5\u8a71\u8aaa\uff0c\u6211\u5011\u53ef\u4ee5\u4e0d\u5fc5\u624b\u52d5\u65b0\u589e quartz \u76f8\u95dc\u7684 tables\u3002(SQL \u53c3\u8003)</li> <li>\u5728 cluster \u4e0a\u7684 pod \u9700\u8981\u6709\u552f\u4e00\u7684 instance id\u3002\u9019\u88e1\u8a2d\u5b9a <code>AUTO</code> \u5373\u53ef\u9054\u5230\u9700\u6c42\u3002</li> <li>data source \u7684\u8a2d\u5b9a\u3002\u9019\u88e1\u7684\u540d\u7a31\u6703\u5728\u4e0b\u9762\u8a2d\u5b9a job store \u7684 dataSource \u53c3\u8003\u3002</li> <li>job store \u4f7f\u7528\u7684 dataSource\u3002</li> <li>\u555f\u7528 cluster\u3002</li> </ol> \u4f7f\u7528\u8b8a\u6578\u4f86\u907f\u514d\u91cd\u8907\u8a2d\u5b9a <pre><code>spring:\n  quartz:\n    properties:\n      org:\n        quartz:\n          dataSource:\n            quartzDataSource:\n              driver: ${spring.datasource.driver-class-name}\n              URL: ${spring.datasource.url}\n              user: ${spring.datasource.username}\n              password: ${spring.datasource.password}\n</code></pre> <p>\u65b0\u589e <code>Job</code> \u5be6\u4f5c\uff0c\u7c21\u55ae\u7684\u5728\u756b\u9762\u8f38\u51fa\u73fe\u5728\u7684\u6642\u9593\u4ee5\u53ca \"Hello World!\"\u3002\u5370\u51fa\u6642\u9593\u662f\u70ba\u4e86\u5e6b\u52a9\u6211\u5011\u8b58\u5225\u9019\u662f\u54ea\u500b\u6642\u9593\u9ede\u6240\u89f8\u767c\u7684 Job\u3002</p> HelloWorldJob.java<pre><code>public class HelloWorldJob implements Job {\n    @Override\n    public void execute(JobExecutionContext jobExecutionContext) {\n        String time = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"hh:mm:ss\"));\n        System.out.println(time + \" Hello World!\");\n    }\n}\n</code></pre> <p>\u65b0\u589e <code>JobDetail</code> \u548c <code>Trigger</code> \u7684 Bean \u5b9a\u7fa9\u3002\u9019\u88e1\u8a2d\u5b9a\u6bcf 10 \u79d2\u89f8\u767c\u4e00\u6b21 Job \u5728\u756b\u9762\u4e0a\u8f38\u51fa \"Hello World!\"\u3002</p> <pre><code>@Component\npublic class QuartzConfig {\n\n    @Bean\n    public JobDetail helloWorldJobDetail() {\n        return JobBuilder.newJob(HelloWorldJob.class)\n                         .withIdentity(\"helloWorldJob\")\n                         .storeDurably()\n                         .build();\n    }\n\n    @Bean\n    public Trigger helloWorldTrigger(JobDetail helloWorldJobDetail) {\n        return TriggerBuilder.newTrigger()\n                             .forJob(helloWorldJobDetail)\n                             .withIdentity(\"helloWorldTrigger\")\n                             .withSchedule(CronScheduleBuilder.cronSchedule(\"*/10 * * * * ?\"))\n                             .build();\n    }\n}\n</code></pre> <p>\u70ba\u4e86\u53ef\u4ee5\u540c\u6642\u57f7\u884c\u591a\u500b instance\uff0c\u6211\u5011\u5c07\u7a0b\u5f0f\u6253\u5305\u6210 tar \u6a94\u3002\u5c08\u6848\u7684\u76ee\u9304 /build/libs \u61c9\u8a72\u6703\u7522\u751f xxx.jar \u6a94\u3002</p> <pre><code>./gradlew bootJar\n</code></pre> <p>\u6253\u958b 3 \u500b terminal\uff0c\u5206\u5225\u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4\u57f7\u884c\u7a0b\u5f0f: (xxx \u66ff\u63db\u6210\u5be6\u969b\u6a94\u6848\u540d\u7a31)</p> <pre><code>java -jar build/libs/xxx.jar\n</code></pre> <p>\u89c0\u5bdf\u6bcf 10 \u79d2\u53ea\u6703\u6709\u4e00\u500b terminal \u8f38\u51fa \"Hello World!\"\u3002\u9019\u8868\u793a Job \u662f\u5728 cluster \u4e0a\u57f7\u884c\u7684\u3002\u5c07\u8f38\u51fa\u8a0a\u606f\u7684 terminal \u95dc\u9589\uff0c\u53ef\u4ee5\u89c0\u5bdf\u5230\u5176\u4ed6 terminal \u6703\u63a5\u7e8c\u57f7\u884c\u8f38\u51fa \"Hello World!\" \u7684 Job\u3002</p> <p>\u4e00\u500b trigger \u4e00\u500b job instance \u7684\u8a2d\u5b9a</p> <p><code>org.quartz.scheduler.batchTriggerAcquisitionMaxCount</code> \u9810\u8a2d\u503c\u70ba 1 \u8a2d\u5b9a\u4e86 Trigger \u7684 job \u4e00\u6b21\u57f7\u884c\u4e00\u500b instance\u3002\u53ef\u4ee5\u8a2d\u5b9a\u5176\u4ed6\u6578\u503c\u4f86\u8b93\u540c\u4e00 trigger \u540c\u6642\u57f7\u884c\u591a\u500b job\u3002</p>"},{"location":"spring-boot/scheduler/jdbc_job_store.html#_1","title":"\u63a2\u8a0e: \u57f7\u884c\u6642\u9593\u8d85\u904e\u4e0b\u4e00\u6b21\u6392\u7a0b\u7684\u6642\u9593\u7684\u884c\u70ba","text":"<p>\u5047\u8a2d\u6211\u5011\u8a2d\u5b9a\u6bcf 10 \u79d2\u8dd1\u4e00\u500b job\u3002\u4e26\u4e14\uff0c\u6bcf\u500b job \u57f7\u884c\u6642\u9593\u9700\u8981 15 \u79d2\u3002\u4e5f\u5c31\u662f\u8aaa\uff0cjob \u7684\u57f7\u884c\u6642\u9593\u5fc5\u5b9a\u6703\u8986\u84cb\u5230\u4e0b\u4e00\u6b21\u89f8\u767c\u7684\u6642\u9593\u3002\u5728\u6c92\u6709\u7279\u5225\u8a2d\u5b9a\u7684\u60c5\u6cc1\u4e0b\uff0c\u7d93\u904e 30 \u79d2\u5f8c\uff0c\u5c07\u6703\u6709 3 \u500b job \u88ab\u8dd1\u8d77\u4f86\u3002job \u8207 job \u7684\u6642\u9593\u6642\u9593\u662f\u6703\u91cd\u758a\u7684\u3002</p> <pre>984dc432-0c69-4b37-8970-e3ba1f136b39</pre>"},{"location":"spring-boot/scheduler/jdbc_job_store.html#disallowconcurrentexecution","title":"\u4f7f\u7528<code>@DisallowConcurrentExecution</code> \u4f86\u907f\u514d\u91cd\u758a\u57f7\u884c","text":"<p>\u5728 Job \u7684\u5ba3\u544a\u52a0\u4e0a <code>@DisallowConcurrentExecution</code> \u4f86\u907f\u514d Job \u91cd\u758a\u57f7\u884c\u3002</p> HelloWorldJob.java<pre><code>@DisallowConcurrentExecution\npublic class HelloWorldJob implements Job {\n    // ...\n}\n</code></pre> <p>\u5982\u6b64\uff0c\u7576 Job \u9084\u5728\u57f7\u884c\u6642\uff0c\u4e0b\u4e00\u6b21\u7684 Job \u5c07\u6703\u88ab\u5ef6\u9072\u5230\u4e0a\u4e00\u6b21\u7684 Job \u57f7\u884c\u5b8c\u7562\u5f8c\u518d\u57f7\u884c\u3002\u8b8a\u66f4\u5f8c\u7684 3 \u500b Job \u57f7\u884c\u6642\u9593\u8ef8\u53c3\u8003\u4e0b\u5716:</p> <pre>2828eb35-55bc-4d48-bf58-b519a0b3ca90</pre>"},{"location":"spring-boot/scheduler/jdbc_job_store.html#trigger","title":"\u8a08\u7b97\u6392\u7a0b\u7684\u6642\u9593\u8207\u89f8\u767c\u7684\u6642\u9593\u5dee\u4f86\u5ffd\u7565\u932f\u904e\u7684 trigger","text":"<p>\u5728 <code>Job.execute</code> \u958b\u59cb\u524d\uff0c\u6aa2\u67e5 job \u89f8\u767c\u7684\u6642\u9593\u8207\u6392\u7a0b\u7684\u6642\u9593\u5dee\uff0c\u5982\u679c\u8d85\u904e\u4e00\u5b9a\u6642\u9593\uff0c\u5247\u5ffd\u7565\u9019\u6b21\u7684 trigger\u3002\u7bc4\u4f8b\u4e2d\u662f\u6642\u9593\u5dee\u8d85\u904e 1000 \u6beb\u79d2 (1 \u79d2) \u5c31\u5ffd\u7565\u9019\u6b21\u7684 trigger\u3002</p> HelloWorldJob.java<pre><code>@DisallowConcurrentExecution\npublic class HelloWorldJob implements Job {\n    @Override\n    public void execute(JobExecutionContext context) {\n        if (context.getFireTime().getTime() - context.getScheduledFireTime().getTime() &gt; 1000) {\n            return;  // skip this trigger\n        }\n        // ...\n    }\n}\n</code></pre> <p>\u5982\u6b64\uff0ctrigger \u7684 job \u90fd\u6703\u843d\u5728\u6392\u7a0b\u8a2d\u5b9a\u7684\u6642\u9593\u9ede\u4e0a\u3002\u8b8a\u66f4\u5f8c\u7684 Job \u57f7\u884c\u6642\u9593\u8ef8\u53c3\u8003\u4e0b\u5716:</p> <pre>f100e429-33a2-4b17-afd1-65ae203d5ce8</pre> <p>Note</p> <p>\u76ee\u524d\u6c92\u6709\u767c\u73fe\u5b98\u65b9\u5c0d\u65bc\u6b64\u65b9\u6848\u7684\u89e3\u6cd5\u3002\u9019\u88e1\u7684\u89e3\u6cd5\u6709\u571f\u6cd5\u7149\u92fc\u7684\u611f\u89ba\u3002</p>"},{"location":"spring-boot/scheduler/jdbc_job_store.html#job_1","title":"\u63a2\u8a0e: Job \u57f7\u884c\u904e\u7a0b\u767c\u751f\u932f\u8aa4\u7684\u884c\u70ba","text":"<p>\u5728 Job \u57f7\u884c\u904e\u7a0b\u4e2d\uff0c\u5982\u679c\u62cb\u51fa\u4f8b\u5916\uff0cJob \u5373\u4e2d\u65b7\u57f7\u884c\u3002\u5982\u679c\u62cb\u51fa\u7684\u4f8b\u5916\u662f <code>JobExecutionException</code> \u4e26\u8a2d\u5b9a <code>refireImmediately</code> \u70ba <code>true</code>\uff0c\u5247 Job \u6703\u7acb\u5373\u91cd\u65b0\u57f7\u884c\uff0c\u4e26\u4e14\u4e0b\u4e00\u6b21 <code>JobExecutionContext.getRefireCount()</code> \u6578\u5b57\u7d2f\u52a0\u3002 \u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u5c55\u793a\u7576 Job \u5931\u6557\u62cb\u51fa\u4f8b\u5916\u6642\uff0c retry 3 \u6b21\u3002</p> HelloWorldJob.java<pre><code>@DisallowConcurrentExecution\npublic class HelloWorldJob implements Job {\n    @Override\n    public void execute(JobExecutionContext context) {\n        if(context.getRefireCount() &gt; 3) {\n            throw new JobExecutionException(\"Too many re-fires\");\n        }\n\n        // ...\n\n        throw new JobExecutionException(\"Something goes wrong\", true);\n    }\n}\n</code></pre>"},{"location":"spring-boot/scheduler/jdbc_job_store.html#_2","title":"\u53c3\u8003","text":"<ul> <li>Sprint Boot Quartz Scheduler</li> <li>Quartz Configuration - Configure Clustering with JDBC-JobStore </li> </ul>"},{"location":"spring-boot/testing/index.html","title":"\u53c3\u8003","text":"<ul> <li>Spring Framework / Testing</li> <li>String Boot / Testing</li> </ul>"},{"location":"blog/archive/2024.html","title":"2024","text":""},{"location":"blog/category/spring-boot.html","title":"Spring Boot","text":""},{"location":"blog/category/testing.html","title":"Testing","text":""}]}