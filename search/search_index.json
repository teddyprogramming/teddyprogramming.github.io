{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"ide/intellij-idea/shortcuts/","title":"IntelliJ IDEA \u5feb\u6377\u9375","text":""},{"location":"ide/intellij-idea/shortcuts/#interface","title":"\u5be6\u4f5c interface","text":"<p>\u5728 interface \u4e0a -&gt; Option + Enter -&gt; Implement interface</p>"},{"location":"java/effective-java/001/","title":"Item 1: Consider static factory methods instead of constructors","text":""},{"location":"java/effective-java/001/#_1","title":"\u512a\u9ede","text":"<p>\u504f\u597d static factory method \u7684\u512a\u9ede\uff1a</p> <ol> <li> <p>\u53ef\u4ee5\u63d0\u4f9b\u6709\u610f\u7fa9\u7684\u540d\u7a31\uff0c\u5e6b\u52a9\u95b1\u8b80\u7406\u89e3\u7684\u540d\u7a31</p> <ul> <li><code>BigInteger.probablePrime</code> \u6bd4 <code>BigInteger(int, int, Random)</code> \u66f4\u5bb9\u6613\u7406\u89e3\u3002</li> <li>constructor \u4e4b\u9593\u53ea\u80fd\u5920\u900f\u904e\u53c3\u6578\u578b\u5225\u4e0d\u540c\u4f86\u52a0\u4ee5\u5340\u9694\uff0c\u958b\u767c\u4eba\u54e1\u9700\u8981\u77e5\u9053\u9019\u4e9b\u4e0d\u540c constructor \u5c0d\u61c9\u7684\u5be6\u4f5c\u3002\u4f46\u662f\uff0c\u4ed6\u5011\u4e5f\u53ef\u80fd\u6703\u8a18\u932f\u800c\u8aa4\u7528\u3002\u4f8b\u5982\uff0c\u6211\u5011\u6709\u8fa6\u6cd5\u5340\u5206 <code>BigInteger(int[])</code>, <code>BigInteger(int[], int)</code>, <code>BigInteger(int, int[])</code> \u4ed6\u5011\u7684\u4e0d\u540c\u55ce\uff1f</li> </ul> </li> <li> <p>\u4e0d\u5fc5\u6bcf\u6b21\u90fd\u5efa\u7acb\u65b0\u7269\u4ef6</p> <ul> <li>\u5957\u7528 Flyweight pattern, Singleton pattern</li> <li>\u53ef\u4ee5\u907f\u514d\u5efa\u7acb\u4e0d\u5fc5\u8981\u91cd\u8907\u7684\u7269\u4ef6</li> <li>Instance-controlled class</li> </ul> </li> <li> <p>\u53ef\u4ee5\u56de\u50b3 Subclass</p> <ul> <li>interface-based frameworks</li> <li>conceptual weight: \u958b\u767c\u4eba\u54e1\u9700\u8981\u638c\u63e1\u591a\u5c11\u6982\u5ff5\u624d\u80fd\u5920\u4f7f\u7528 API</li> </ul> <p>Info</p> <p>Java 8 \u4ee5\u524d\uff0cinterface \u4e0d\u80fd\u6709 static method\u3002\u5728\u5be6\u4f5c\u4e0a\uff0c\u9700\u8981 static factory methods \u7684 class \u6703\u547d\u540d\u6210 Type + s\uff0c\u4e26\u5c07 constructor \u5ba3\u544a\u6210 private\uff0c\u4f8b\u5982 <code>Collections</code>, <code>Arrays</code>\u3002</p> </li> <li> <p>\u53ef\u4ee5\u4f9d\u64da\u60c5\u6cc1\u56de\u50b3\u4e0d\u540c\u7684 Subclass</p> <ul> <li>\u5141\u8a31\u4e0d\u540c\u7684 release \u66f4\u63db return \u7684 subclass\u3002</li> <li> <p><code>EnumSet</code> \u7684\u5be6\u4f5c\uff0c\u6839\u64da enum \u6578\u91cf\u7684\u4e0d\u540c\uff0c\u56de\u50b3\u4e0d\u540c\u7684 subclass\u3002\u56de\u50b3\u7684 subclass \u8207\u689d\u4ef6\u662f\u53ef\u4ee5\u6539\u8b8a\u800c\u4e0d\u5f71\u97ff\u547c\u53eb\u7aef\u7684\u3002</p> <pre><code>// \u793a\u610f\u7a0b\u5f0f\u78bc\nclass EnumSet {\n   static &lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; noneOf(Class&lt;E&gt; elementType) {\n        if (elementType.getEnumCount() &lt;= 64)\n            return new RegularEnumSet(..)\n        else\n            return new JumboEnumSet(..)\n   }\n}\n</code></pre> <ul> <li>\u689d\u4ef6 (<code>&lt;= 64</code>) \u8207 subclass \u7684\u5be6\u4f5c\u662f\u53ef\u4ee5\u6539\u8b8a\u7684\uff0c\u800c\u4e0d\u5f71\u97ff\u547c\u53eb\u7aef\u7684\u7a0b\u5f0f\u78bc\u3002</li> </ul> </li> </ul> </li> <li> <p>\u5728\u64b0\u5beb\u7a0b\u5f0f\u78bc\u6642\uff0c\u985e\u5225\u4e0d\u5fc5\u5b58\u5728</p> <ul> <li>\u5229\u65bc service provider frameworks<ul> <li>\u6846\u67b6\u958b\u767c\u5546\u4e0d\u5fc5\u63d0\u524d\u77e5\u9053\u6240\u6709 interface \u53ef\u80fd\u7684\u5be6\u4f5c</li> <li>\u8b93 interface \u5be6\u4f5c\u5ef6\u9072\u5230 development time \u6c7a\u5b9a</li> <li>\u4f8b\u5982: JDBC API \u7684 Connection interface\uff0c\u958b\u767c\u4eba\u54e1\u53ef\u4ee5\u5728\u958b\u767c\u6642\u5728\u6c7a\u5b9a\u5177\u9ad4\u7684 Connection \u5be6\u4f5c\uff0c\u50cf\u662f\u900f\u904e property \u8a2d\u5b9a Connection \u662f MySql <code>spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</code></li> </ul> </li> <li>Bridge pattern</li> <li>\u53ef\u4ee5\u914d\u5408 Dependency injection frameworks \u4f7f\u7528</li> <li><code>ServiceLoader</code></li> </ul> </li> </ol>"},{"location":"java/effective-java/001/#_2","title":"\u9650\u5236","text":"<p>\u504f\u597d static factory method \u7684\u9650\u5236\uff1a</p> <ol> <li> <p>\u62cb\u68c4\u7e7c\u627f:</p> <ul> <li>constructor \u88ab\u5ba3\u544a\u6210 <code>private</code> / <code>protected</code>\uff0c\u4f7f\u5f97 subclass \u7121\u6cd5\u521d\u59cb\u5316 superclass\uff0c\u9020\u6210\u7121\u6cd5\u7e7c\u627f\u3002</li> <li>\u7121\u6cd5\u7e7c\u627f\u610f\u5473\u8457\u653e\u68c4 polymorphism \u7684\u7279\u6027\u3002</li> </ul> <p>Question</p> <p>\u5982\u679c\u540c\u6642\u8b93 class \u4fdd\u6709 static factory methods \u4e26\u4e14\u628a constructor \u5ba3\u544a\u6210 <code>public</code> \u5462?</p> </li> <li> <p>\u589e\u52a0 debug \u96e3\u5ea6:</p> <ul> <li>\u56e0\u70ba\u5efa\u7acb\u7269\u4ef6\u7684\u52d5\u4f5c\u96b1\u85cf\u5728 static factory methods \u88e1\uff0c\u6240\u4ee5 debug \u6642\u7121\u6cd5\u76f4\u63a5\u770b\u5230\u5efa\u7acb\u7269\u4ef6\u7684\u5730\u65b9\uff0c\u4ee5\u53ca\u600e\u9ebc\u88ab\u5efa\u7acb\u7684\u3002</li> <li>\u4ee5\u4e0b\u5e7e\u7a2e\u547d\u540d\u898f\u5247\uff0c\u53ef\u4ee5\u5e6b\u52a9 static factory methods \u7684\u7406\u89e3: (\u6b64\u70ba\u5217\u8209\u800c\u975e\u7aae\u8209)<ul> <li><code>from</code><ul> <li>type-conversion method: \u5f9e \u4e00\u500b type \u7684\u7269\u4ef6\u8f49\u63db\u6210\u53e6\u4e00\u500b type \u7684\u7269\u4ef6</li> <li>\u7bc4\u4f8b:<ul> <li><code>Date.from(instant)</code></li> </ul> </li> </ul> </li> <li><code>of</code><ul> <li>aggregation method: \u5f9e \u591a\u500b \u53c3\u6578\u7684\u7269\u4ef6\u5408\u4f75\u6210\u4e00\u500b type \u7684\u7269\u4ef6</li> <li>\u7bc4\u4f8b:<ul> <li><code>EnumSet.of(JACK, QUEEN, KING)</code></li> <li><code>LocalDate.of(2024, 7, 4)</code></li> </ul> </li> </ul> </li> <li><code>valueOf</code><ul> <li>\u6bd4 <code>from</code> \u8207 <code>of</code> \u66f4\u56c9\u5506\u4e00\u9ede\u7684\u7248\u672c</li> <li>\u7bc4\u4f8b:<ul> <li><code>Integer.valueOf(\"100\")</code> </li> <li><code>Integer.valueOf(\"100\", 2)</code></li> </ul> </li> </ul> </li> <li><code>instance</code> / <code>getInstance</code><ul> <li>\u5f9e 0 \u81f3 \u591a\u500b \u53c3\u6578\u5efa\u7acb\u7269\u4ef6</li> <li>\u96d6\u7136\u8aaa\u662f <code>getInstance</code>\uff0c\u4f46\u662f\u4e0d\u4fdd\u8b49\u56de\u50b3\u7684\u662f\u540c\u4e00\u500b\u7269\u4ef6</li> <li>\u7bc4\u4f8b:<ul> <li><code>Calendar.getInstance()</code> </li> <li><code>Calendar.getInstance(TimeZone.getDefault())</code> </li> </ul> </li> </ul> </li> <li><code>create</code> / <code>newInstance</code><ul> <li>\u5f9e 0 \u81f3 \u591a\u500b \u53c3\u6578\u5efa\u7acb\u7269\u4ef6</li> <li>\u6bcf\u6b21\u90fd\u6703\u5efa\u7acb\u65b0\u7684\u7269\u4ef6</li> <li>\u7bc4\u4f8b:<ul> <li><code>Array.newInstance(Integer.class, 10)</code></li> </ul> </li> </ul> </li> <li><code>getType</code><ul> <li>\u56de\u50b3\u7684\u7269\u4ef6\u662f <code>Type</code> \u7684 instance</li> <li>\u96d6\u7136\u70ba get\uff0c\u4f46\u662f\u4e0d\u4fdd\u8b49\u56de\u50b3\u7684\u662f\u540c\u4e00\u500b\u7269\u4ef6</li> <li>\u7bc4\u4f8b:<ul> <li><code>Files.getFileStore(path)</code></li> </ul> </li> </ul> </li> <li><code>newType</code><ul> <li>\u56de\u50b3\u7684\u7269\u4ef6\u662f <code>Type</code> \u7684 instance</li> <li>\u6bcf\u6b21\u90fd\u6703\u5efa\u7acb\u65b0\u7684\u7269\u4ef6</li> <li>\u7bc4\u4f8b:<ul> <li><code>BufferedReader br = Buffer.newBufferedReader(path)</code></li> </ul> </li> </ul> </li> <li><code>type</code><ul> <li><code>getType</code> \u8207 <code>newType</code> \u7684\u7c21\u5316\u7248</li> <li>\u7bc4\u4f8b:<ul> <li><code>Collections.singletonList(\"apple\")</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ol>"},{"location":"java/effective-java/002/","title":"Item 2: Consider a builder when faced with many constructor parameters","text":"<p>static factory method \u8207 constructor \u7684\u7f3a\u9ede\u662f\uff0c\u7576\u6709\u592a\u591a\u53c3\u6578\u6642\uff0c\u6703\u8b93\u7a0b\u5f0f\u78bc\u96e3\u4ee5\u95b1\u8b80\u3002\u9019\u6642\u5019\uff0c\u53ef\u4ee5\u8003\u616e\u4f7f\u7528 builder\u3002</p>"},{"location":"java/effective-java/002/#anti-pattern-telescoping-constructor-pattern","title":"(anti-pattern) telescoping constructor pattern","text":"<pre><code>public class NutritionFacts {\n    private final int servingSize;  // (mL)            required\n    private final int servings;     // (per container) required\n    private final int calories;     // (per serving)   optional\n    private final int fat;          // (g/serving)     optional\n    private final int sodium;       // (mg/serving)    optional\n    private final int carbohydrate; // (g/serving)     optional\n\n    public NutritionFacts(int servingSize, int servings) {\n        this(servingSize, servings, 0);\n    }\n\n    public NutritionFacts(int servingSize, int servings,\n            int calories) {\n        this(servingSize, servings, calories, 0);\n    }\n\n    public NutritionFacts(int servingSize, int servings,\n            int calories, int fat) {\n        this(servingSize, servings, calories, fat, 0);\n    }\n\n    public NutritionFacts(int servingSize, int servings,\n            int calories, int fat, int sodium) {\n        this(servingSize, servings, calories, fat, sodium, 0);\n    }\n\n\n    public NutritionFacts(int servingSize, int servings,\n           int calories, int fat, int sodium, int carbohydrate) {\n        this.servingSize  = servingSize;\n        this.servings     = servings;\n        this.calories     = calories;\n        this.fat          = fat;\n        this.sodium       = sodium;\n        this.carbohydrate = carbohydrate;\n    }\n}\n</code></pre> <p>\u7bc4\u4f8b\u4e2d\u7684 constructor\uff0c\u6bd4\u8f03\u5c11\u53c3\u6578\u7684 constructor \u6703\u547c\u53eb\u6bd4\u8f03\u591a\u53c3\u6578\u7684 constructor \uff0c\u6700\u7d42\u90fd\u547c\u53eb\u6700\u591a\u53c3\u6578\u7684 constructor\u3002</p> <p>\u9019\u7a2e\u5beb\u6cd5\uff0c\u5728 optional field \u8d8a\u591a\u6642\uff0c\u6703\u8b8a\u5f97\u8d8a\u8907\u96dc\u8d8a\u96e3\u4ee5\u7ba1\u7406\uff0c\u7a0b\u5f0f\u78bc\u53ef\u80fd\u6703\u8d8a\u96e3\u95b1\u8b80\u3002</p>"},{"location":"java/effective-java/002/#javabeans-pattern","title":"JavaBeans pattern","text":"<p>JavaBean \u6d88\u9664\u4e86 telescoping constructor pattern \u7684\u554f\u984c\u3002</p> <pre><code>public class NutritionFacts {\n    // Parameters initialized to default values (if any)\n    private int servingSize  = -1; // Required; no default value\n    private int servings     = -1; // Required; no default value\n    private int calories     = 0;\n    private int fat          = 0;\n    private int sodium       = 0;\n    private int carbohydrate = 0;\n\n    public NutritionFacts() { }\n\n    // Setters\n    public void setServingSize(int val)  { servingSize = val; }\n    public void setServings(int val)    { servings = val; }\n    public void setCalories(int val)    { calories = val; }\n    public void setFat(int val)         { fat = val; }\n    public void setSodium(int val)      { sodium = val; }\n    public void setCarbohydrate(int val) { carbohydrate = val; }\n}\n</code></pre> <p>\u5141\u8a31\u4e00\u500b\u6c92\u6709\u53c3\u6578\u7684 constructor\uff0c\u4e26\u4e14\u900f\u904e setter \u8a2d\u5b9a field values\u3002</p> <pre><code>NutritionFacts cocaCola = new NutritionFacts();\ncocaCola.setServingSize(240);\ncocaCola.setServings(8);\ncocaCola.setCalories(100);\ncocaCola.setSodium(35);\ncocaCola.setCarbohydrate(27);\n</code></pre> <p>JavaBeans pattern \u7684\u7f3a\u9ede:</p> <ul> <li>\u9700\u8981\u591a\u884c\u7a0b\u5f0f\u78bc\uff0c\u4e14\u7269\u4ef6\u5728\u5efa\u7acb\u5f8c\u53ef\u80fd\u8655\u65bc\u4e0d\u4e00\u81f4\u7684\u72c0\u614b\u3002</li> <li>\u5728\u72c0\u614b\u4e0d\u4e00\u81f4\u7684\u72c0\u614b\u4e0b\u64cd\u4f5c\u7269\u4ef6\u53ef\u80fd\u7522\u751f bug\uff0c\u4e14\u96e3\u4ee5 debug\u3002</li> <li>\u4e0d\u4fdd\u8b49\u7269\u4ef6\u7684\u4e0d\u53ef\u8b8a\u6027(immutable)\u3002</li> <li>\u4e0d\u4fdd\u8b49\u7269\u4ef6\u7684 thread safety\u3002</li> </ul>"},{"location":"java/effective-java/002/#builder-pattern","title":"Builder pattern","text":"<pre><code>public class NutritionFacts {\n    private final int servingSize;\n    private final int servings;\n    private final int calories;\n    private final int fat;\n    private final int sodium;\n    private final int carbohydrate;\n\n    public static class Builder {\n        // Required parameters\n        private final int servingSize;\n        private final int servings;\n\n        // Optional parameters - initialized to default values\n        private int calories      = 0;\n        private int fat           = 0;\n        private int sodium        = 0;\n        private int carbohydrate  = 0;\n\n        public Builder(int servingSize, int servings) {\n            this.servingSize = servingSize;\n            this.servings    = servings;\n        }\n\n        public Builder calories(int val) {\n            calories = val;      \n            return this; \n        }\n        public Builder fat(int val) {\n            fat = val;\n            return this;\n        }\n        public Builder sodium(int val) {\n            sodium = val;\n            return this;\n        }\n        public Builder carbohydrate(int val) {\n            carbohydrate = val;\n            return this;\n        }\n\n        public NutritionFacts build() {\n            return new NutritionFacts(this);\n        }\n    }\n\n    private NutritionFacts(Builder builder) {\n        servingSize  = builder.servingSize;\n        servings     = builder.servings;\n        calories     = builder.calories;\n        fat          = builder.fat;\n        sodium       = builder.sodium;\n        carbohydrate = builder.carbohydrate;\n    }\n}\n</code></pre> <pre><code>NutritionFacts cocaCola = new NutritionFacts.Builder(240, 8)\n        .calories(100).sodium(35).carbohydrate(27).build();\n</code></pre> <p>\u9019\u7a2e Builder \u547c\u53eb method \u56de\u50b3\u81ea\u8eab\u7269\u4ef6\uff0c\u8b93 client \u7aef\u53ef\u4ee5\u4e00\u76f4\u63a5\u8457\u5f80\u4e0b\u547c\u53eb\u7684\u5beb\u6cd5\u7a31\u4f5c fluent API\u3002</p> <p>\u4f7f\u7528 Lobmok Builder (link) \u7c21\u5316\u5be6\u4f5c\u3002</p> <p>\u63d0\u4f9b\u4e86\u4e00\u7a2e\u985e\u4f3c\u65bc Python, Scala \u6216 kotlin \u7684 named optional parameter \u7684\u5beb\u6cd5\u3002</p> <p>validation:</p> <ul> <li>builder constructor, setter \u9032\u884c\u5404\u5225\u53c3\u6578\u7684\u6aa2\u67e5</li> <li>class constructor \u9032\u884c\u6574\u9ad4\u7269\u4ef6\u7684\u6aa2\u67e5</li> <li>\u672a\u901a\u904e\u6aa2\u67e5\u6642\uff0c\u62cb\u51fa <code>IllegalArgumentException</code></li> </ul> <p>\u901a\u5e38\uff0cconstructor \u53c3\u6578\u7684\u6578\u91cf\u8d85\u904e\u56db\u500b\u4ee5\u4e0a\u6bd4\u8f03\u9069\u7528\u3002\u4e26\u4e14\uff0c\u591a\u6578\u53c3\u6578\u662f\u9078\u586b\u7684\u60c5\u6cc1\u3002</p>"},{"location":"java/effective-java/003/","title":"Item 3: Enforce the singleton property with a private constructor or an enum type","text":"<p>\u5169\u7a2e\u5e38\u898b\u5be6\u4f5c Singleton \u7684\u65b9\u6cd5\uff1a</p> <p>\u65b9\u6cd5\u4e00: \u5c07 constructor \u8a2d\u70ba private\uff0c\u4e26\u4e14\u6709\u4e00\u500b public static final field \u4f86\u5b58\u653e\u552f\u4e00\u7684 instance\u3002</p> <pre><code>// Singleton with public final field\npublic class Elvis {\n    public static final Elvis INSTANCE = new Elvis();\n    private Elvis() { ... }\n\n    public void leaveTheBuilding() { ... }\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c: \u5c07 constructor \u8a2d\u70ba private\uff0c\u4e26\u4e14\u6709\u4e00\u500b public static \u65b9\u6cd5\u4f86\u56de\u50b3\u552f\u4e00\u7684 instance\u3002</p> <pre><code>// Singleton with static factory\npublic class Elvis {\n    private static final Elvis INSTANCE = new Elvis();\n    private Elvis() { ... }\n    public static Elvis getInstance() { return INSTANCE; }\n\n    public void leaveTheBuilding() { ... }\n}\n</code></pre> <p>\u53e6\u4e00\u7a2e\u5be6\u4f5c Singleton \u7684\u65b9\u6cd5\u662f single-element enum\u3002</p> <pre><code>public enum Elvis {\n    INSTANCE;\n\n    public void leaveTheBuilding() { ... }\n}\n</code></pre>"},{"location":"java/effective-java/004/","title":"Item 4: Enforce noninstantiability with a private constructor","text":"<pre><code>// Noninstantiable utility class\npublic class UtilityClass {\n    // Suppress default constructor for noninstantiability\n    private UtilityClass() {\n        throw new AssertionError();\n    }\n    ... // Remainder omitted\n}\n</code></pre> <p>\u5982\u679c class \u4e0d\u5141\u8a31\u6709 instance\uff0c\u5c31\u5c07 constructor \u8a2d\u70ba private\uff0c\u9019\u6a23\u5c31\u7121\u6cd5\u88ab\u5be6\u4f8b\u5316\u3002\u800c\u4e14\uff0c class \u4e5f\u7121\u6cd5\u88ab\u7e7c\u627f\u3002</p> <p>\u4e0d\u5141\u8a31\u6709 instance \u7684\u985e\u5225\u7684\u7bc4\u4f8b\u6709 <code>Math</code>, <code>Arrays</code>, <code>Collections</code> \u7b49\u7b49\u3002</p>"},{"location":"java/effective-java/005/","title":"Item 5: Prefer dependency injection to hardwiring resources","text":"<p>\u5be6\u4f5c\u62fc\u5b57\u6aa2\u67e5\u7269\u4ef6\uff0c\u4ee5\u4e0b\u5169\u7a2e\u5be6\u4f5c\u65b9\u6cd5\u6709\u53ef\u4ee5\u66f4\u597d\u7684\u7a7a\u9593\uff1a</p> <p>1: Utility class</p> <pre><code>// Inappropriate use of static utility - inflexible &amp; untestable!\npublic class SpellChecker {\n    private static final Lexicon dictionary = ...;\n\n    private SpellChecker() {} // Noninstantiable\n\n    public static boolean isValid(String word) { ... }\n    public static List&lt;String&gt; suggestions(String typo) { ... }\n}\n</code></pre> <p>2: Singleton</p> <pre><code>// Inappropriate use of singleton - inflexible &amp; untestable!\npublic class SpellChecker {\n    private final Lexicon dictionary = ...;\n\n    private SpellChecker(...) {}\n    public static SpellChecker INSTANCE = new SpellChecker(...);\n\n    public boolean isValid(String word) { ... }\n    public List&lt;String&gt; suggestions(String typo) { ... }\n}\n</code></pre> <p>\u8b93\u7269\u4ef6\u8b8a\u6210\u4e0d\u53ef\u7e7c\u627f\u6703\u589e\u52a0\u6e2c\u8a66\u7684\u96e3\u5ea6</p> <p>\u4f7f\u7528 dependency injection \u6bd4\u8f03\u597d:</p> <pre><code>// Dependency injection provides flexibility and testability\npublic class SpellChecker {\n    private final Lexicon dictionary;\n\n    public SpellChecker(Lexicon dictionary) {\n        this.dictionary = Objects.requireNonNull(dictionary);\n    }\n\n    public boolean isValid(String word) { ... }\n    public List&lt;String&gt; suggestions(String typo) { ... }\n}\n</code></pre> <p>\u5e38\u898b\u7684 Dependency injection framework: Dagger, Guice, Spring</p> <p>\u53e6\u4e00\u500b\u66ff\u4ee3\u65b9\u6cd5\u662f\u4f7f\u7528 Factory Method\u3002</p> <p>\u7e3d\u7684\u4f86\u8aaa\uff0c\u4e0d\u8981\u4f7f\u7528 singleton \u6216 static utility class \u4f86\u5be6\u4f5c\u6709 resource dependency \u7684\u7269\u4ef6\uff0c\u9019\u6a23\u6703\u8b93\u7269\u4ef6\u8b8a\u5f97\u4e0d\u9748\u6d3b\uff0c\u96e3\u4ee5\u6e2c\u8a66\u3002</p>"},{"location":"java/effective-java/006/","title":"Item 6: Avoid creating unnecessary objects","text":"<p>immutable object \u901a\u5e38\u53ef\u4ee5 reuse\uff0c\u4e0d\u5fc5\u91cd\u65b0\u7522\u751f\u4e00\u500b\u65b0\u7684\u7269\u4ef6\u3002</p> <pre><code>String s = new String(\"bikini\");  // \u5225\u9019\u9ebc\u505a !!\n</code></pre> <p>\u61c9\u8a72\u9019\u9ebc\u505a</p> <pre><code>String s = \"bikini\";\n</code></pre> <p>\u9019\u6a23\u53ef\u4ee5\u78ba\u4fdd <code>s</code> \u6703\u6307\u5411\u540c\u4e00\u500b\u7269\u4ef6\uff0c\u800c\u4e0d\u662f\u91cd\u65b0\u7522\u751f\u4e00\u500b\u65b0\u7684\u7269\u4ef6\u3002\u53ea\u8981\u4f7f\u7528 constructor \u5c31\u6703\u7522\u751f\u65b0\u7684\u7269\u4ef6\u3002</p> <p>\u901a\u5e38 static factory methods \u53ef\u4ee5\u5be6\u4f5c\u907f\u514d\u91cd\u8907\u7522\u751f\u7269\u4ef6\u7684\u6548\u679c\u3002</p> <p><code>Boolean.valueOf(String)</code> \u512a\u65bc <code>Boolean(String)</code>\uff0c\u56e0\u70ba <code>valueOf</code> \u53ef\u4ee5\u91cd\u8907\u4f7f\u7528\u7269\u4ef6\u3002</p>"},{"location":"java/effective-java/006/#pattern","title":"\u7bc4\u4f8b: \u91cd\u5fa9\u4f7f\u7528 <code>Pattern</code> \u7269\u4ef6","text":"\u53ef\u4ee5\u6539\u9032\u7684\u5beb\u6cd5<pre><code>static boolean isRomanNumeral(String s) {\n    return s.matches(\"^(?=.)M*(C[MD]|D?C{0,3})\"\n            + \"(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$\");\n}\n</code></pre> <p>\u554f\u984c:</p> <ol> <li><code>String.matches</code> \u6703\u5efa\u7acb\u4e00\u500b\u65b0\u7684 <code>Pattern</code> \u7269\u4ef6\uff0c\u4f7f\u7528\u5b8c\u5f8c\u5c31\u6703\u88ab Garbage Collection \u56de\u6536\u3002</li> <li>\u5efa\u7acb <code>Pattern</code> \u7269\u4ef6\u9700\u8981\u5c07 regular expression \u7de8\u8b6f\u6210 finite state machine\uff0c\u9019\u662f\u4e00\u500b\u6602\u8cb4\u7684\u904b\u7b97\u3002</li> </ol> <p>\u6539\u9032:</p> \u6539\u9032\u5f8c\u7684\u5beb\u6cd5<pre><code>// Reusing expensive object for improved performance\npublic class RomanNumerals {\n    private static final Pattern ROMAN = Pattern.compile(\n            \"^(?=.)M*(C[MD]|D?C{0,3})\"\n            + \"(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$\");\n\n    static boolean isRomanNumeral(String s) {\n        return ROMAN.matcher(s).matches();\n    }\n}\n</code></pre> <p>\u539f\u66f8\u4f5c\u8005\u63d0\u4f9b\u7684\u57f7\u884c\u6642\u9593\u63d0\u5347\u7684\u53c3\u8003\u6578\u64da</p> <p>On my machine, the original version takes 1.1 \u00b5s on an 8-character input string, while the improved version takes 0.17 \u00b5s, which is 6.5 times faster.</p>"},{"location":"java/effective-java/006/#autoboxing","title":"\u7bc4\u4f8b: autoboxing","text":"<pre><code>// Hideously slow! Can you spot the object creation?\nprivate static long sum() {\n    Long sum = 0L;\n    for (long i = 0; i &lt;= Integer.MAX_VALUE; i++)\n        sum += i;\n\n    return sum;\n}\n</code></pre> <p>\u56e0\u70ba <code>sum</code> \u5ba3\u544a\u6210 <code>Long</code>\uff0c\u6240\u4ee5\u6bcf\u6b21 <code>sum += i</code> \u90fd\u6703\u7522\u751f\u4e00\u500b\u65b0\u7684 <code>Long</code> \u7269\u4ef6\u3002\u7a0b\u5f0f\u8dd1\u5b8c\u5171\u6703\u7522\u751f 2<sup>31</sup> \u500b <code>Long</code> \u7269\u4ef6\u3002\u5c07 <code>Long</code> \u6539\u6210 <code>long</code> \u5c31\u53ef\u4ee5\u907f\u514d\u9019\u500b\u554f\u984c\u3002</p> <p>\u4f5c\u8005\u7684\u6578\u64da</p> <p>Changing the declaration of <code>sum</code> from <code>Long</code> to <code>long</code> reduces the runtime from 6.3 seconds to 0.59 seconds on my machine.</p> <p>Prefer primitives to boxed primitives, and watch out for unintentional autoboxing.</p>"},{"location":"java/effective-java/007/","title":"Item 7: Eliminate obsolete object references","text":"<pre><code>// Can you spot the \"memory leak\"?\npublic class Stack {\n    private Object[] elements;\n    private int size = 0;\n    private static final int DEFAULT_INITIAL_CAPACITY = 16;\n\n    public Stack() {\n        elements = new Object[DEFAULT_INITIAL_CAPACITY];\n    }\n\n    public void push(Object e) {\n        ensureCapacity();\n        elements[size++] = e;\n    }\n\n    public Object pop() {\n        if (size == 0)\n            throw new EmptyStackException();\n        return elements[--size];\n    }\n\n    /**\n     * Ensure space for at least one more element, roughly\n     * doubling the capacity each time the array needs to grow.\n     */\n    private void ensureCapacity() {\n        if (elements.length == size)\n            elements = Arrays.copyOf(elements, 2 * size + 1);\n    }\n}\n</code></pre> <p>stack <code>size</code> = 5</p> <pre>d44ea1cb-d81a-415b-bb1c-a6dac045c413</pre> <p><code>pop()</code>\u5f8c\uff0c\u547c\u53eb\u7aef\u7684\u5230 <code>obj 5</code>\uff0c\u4e26\u4e14 stack <code>size</code> = 4</p> <pre>31fc1173-5efd-4056-bfbc-5637bf3985f8</pre> <p>\u96d6\u7136 <code>obj 5</code> \u88ab pop \u51fa\u4f86\u4e86\uff0c\u56e0\u70ba stack \u7684 reference \u4ecd\u7136\u6307\u5411 <code>obj 5</code>\uff0c\u5373\u4f7f stack \u5916\u90e8\u6c92\u6709\u4efb\u4f55\u5730\u65b9\u53c3\u8003\u5230 <code>obj 5</code>\uff0c<code>obj 5</code> \u4e5f\u4e0d\u6703\u88ab GC \u56de\u6536\u3002\u9019\u7a2e\u60c5\u6cc1\u5c31\u9020\u6210 memory leak\u3002</p> <p>\u50cf\u9019\u7a2e object \u6307\u5411\u4e00\u500b\u6c92\u6709\u5728\u7dad\u8b77\u7684 reference\uff0c\u7a31\u70ba obsolete object reference\u3002</p> <p>\u89e3\u6c7a\u65b9\u5f0f\u5c31\u662f\u5c07 obsolete object reference \u8a2d\u70ba <code>null</code>\u3002</p> <pre>b503fffd-0b71-4ff5-9600-917f46b04520</pre> <p>\u4fee\u6b63\u7684\u7a0b\u5f0f\u78bc\u5982\u4e0b:</p> <pre><code>public Object pop() {\n    if (size == 0)\n        throw new EmptyStackException();\n    Object result = elements[--size];\n    elements[size] = null; // Eliminate obsolete reference\n    return result;\n}\n</code></pre> <p>Nulling out object references should be the exception rather than the norm. (\u5c07\u7269\u4ef6\u53c3\u8003\u8a2d\u70ba null \u61c9\u8a72\u662f\u4f8b\u5916\uff0c\u800c\u4e0d\u662f\u5e38\u614b\u3002)</p> <p>\u53e6\u4e00\u7a2e\u6703\u9020\u6210 memory leak \u7684\u662f\u5feb\u53d6\u3002</p> <ul> <li>\u53ef\u4ee5\u4f7f\u7528 <code>WeakHashMap</code> \u4f86\u5be6\u4f5c\u5feb\u53d6\uff0c\u7576\u5feb\u53d6\u7684 key \u4e0d\u518d\u88ab\u4f7f\u7528\u6642\uff0c<code>WeakHashMap</code> \u6703\u81ea\u52d5\u79fb\u9664\u9019\u500b key-value pair\u3002</li> <li>\u5b9a\u671f\u6e05\u7a7a\u5feb\u53d6\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>ScheduledThreadPoolExecutor</code> \u4f86\u5b9a\u671f\u6e05\u7a7a\u5feb\u53d6\u3002</li> <li>\u6216\u8005\u5728\u65b0\u589e\u65b0\u8cc7\u6599\u5230\u5feb\u53d6\u6642\u9806\u4fbf\u9032\u884c\u6e05\u7406\u3002<code>LinkedHashMap</code> \u985e\u5225\u63d0\u4f9b\u4e86\u4e00\u500b\u65b9\u6cd5 <code>removeEldestEntry</code>\uff0c\u4f86\u5e6b\u52a9\u5be6\u73fe\u3002</li> <li>\u5c0d\u65bc\u66f4\u8907\u96dc\u7684\u5feb\u53d6\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u76f4\u63a5\u4f7f\u7528 <code>java.lang.ref</code>\u3002</li> </ul> <p>\u7b2c\u4e09\u7a2e\u9020\u6210 memory leak \u7684\u60c5\u6cc1\u662f listener \u548c callback\u3002</p>"},{"location":"spring-boot/scheduler/hello_world/","title":"Quartz: Hello World","text":""},{"location":"spring-boot/scheduler/hello_world/#5-hello-world","title":"\u6bcf 5 \u79d2\u8f38\u51fa \"Hello World!\" \u5230\u756b\u9762\u4e0a","text":"<pre>7cc90d89-a099-48b7-a11e-a2ff223d6f05</pre> <p>\u7576\u7a0b\u5f0f\u555f\u52d5\u6642\uff0c Quartz Scheduler \u6703\u5728\u80cc\u666f\u57f7\u884c\uff0c\u4e26\u5728 <code>helloWorldTrigger</code> \u5b9a\u7fa9\u7684\u6bcf 5 \u79d2\u57f7\u884c\u4e00\u6b21 <code>HelloWorldJob</code> \u5be6\u4f5c\u7684 <code>execute</code> \u8f38\u51fa \"Hello World!\" \u5230\u756b\u9762\u4e0a\u3002</p> <p>\u5728 <code>build.gradle.kts</code> \u4e2d\u65b0\u589e <code>spring-boot-starter-quartz</code> \u76f8\u4f9d\u5957\u4ef6\u3002\u5982\u6b64\uff0c\u7a0b\u5f0f\u555f\u52d5\u5f8c\u5c31\u6703\u6709\u4e00\u500b Quartz Scheduler \u5728\u80cc\u666f\u57f7\u884c\u3002</p> build.gradle.kts<pre><code>implementation(\"org.springframework.boot:spring-boot-starter-quartz\")\n</code></pre> <p>\u63a5\u8457\uff0c\u6211\u5011\u9700\u8981\u5b9a\u7fa9 <code>HelloWorldJob</code> \u5be6\u4f5c <code>Job</code> \u4ecb\u9762\uff0c\u5be6\u4f5c\u8f38\u51fa \"Hello World!\" \u7684\u908f\u8f2f\u3002</p> HelloWorldJob.java<pre><code>public class HelloWorldJob implements Job {\n    @Override\n    public void execute(JobExecutionContext jobExecutionContext) {\n        System.out.println(\"Hello World!\");\n    }\n}\n</code></pre> <p>\u7136\u5f8c\uff0c\u6211\u5011\u9700\u8981\u518d\u65b0\u589e\u5169\u500b Bean \u5b9a\u7fa9 <code>JobDetail</code> \u548c <code>Trigger</code>\u3002\u5176\u4e2d\uff0c<code>JobDetail</code> \u5b9a\u7fa9\u4e86 <code>HelloWorldJob</code> \u7684 metadata\uff0c\u800c <code>Trigger</code> \u5b9a\u7fa9\u4e86 <code>JobDetail</code> \u7684\u89f8\u767c\u689d\u4ef6\u3002</p> QuartzConfig.java<pre><code>@Component\npublic class QuartzConfig {\n\n    @Bean\n    public JobDetail helloWorldJobDetail() {\n        return JobBuilder.newJob(HelloWorldJob.class)\n                         .withIdentity(\"helloWorldJob\")\n                         .storeDurably() // (1)\n                         .build();\n    }\n\n    @Bean\n    public Trigger helloWorldTrigger(JobDetail printHelloWorldJobDetail) {\n        SimpleScheduleBuilder scheduleBuilder = SimpleScheduleBuilder\n                .simpleSchedule()\n                .withIntervalInSeconds(5)\n                .repeatForever();\n        return TriggerBuilder.newTrigger()\n                             .forJob(printHelloWorldJobDetail)\n                             .withIdentity(\"helloWorldTrigger\")\n                             .withSchedule(scheduleBuilder)\n                             .build();\n    }\n}\n</code></pre> <ol> <li><code>Trigger</code> \u8981\u57f7\u884c\u7684 <code>JobDetail</code> \u5fc5\u9808\u8981\u5728 <code>JobStore</code> \u4e2d\uff0c\u8a2d\u5b9a <code>storeDurably()</code> \u4f86\u4fdd\u8b49 <code>JobDetail</code> \u5728 <code>JobStore</code> \u4e2d\u3002\u5426\u5247\uff0c<code>JobDetail</code> \u6703\u5728\u6c92\u6709\u8207 <code>Trigger</code> \u95dc\u806f\u7684\u60c5\u6cc1\u4e0b\u88ab\u79fb\u9664\u3002</li> </ol> <p>\u6700\u5f8c\uff0c\u628a\u7a0b\u5f0f\u8dd1\u8d77\u4f86\u5f8c\uff0c\u6bcf 5 \u79d2\u5c31\u6703\u5728\u756b\u9762\u4e0a\u8f38\u51fa \"Hello World!\"\u3002</p>"},{"location":"spring-boot/scheduler/hello_world/#5-hello-name","title":"\u6bcf 5 \u79d2\u8f38\u51fa \"Hello {name}!\" \u5230\u756b\u9762\u4e0a","text":"<p>\u9019\u88e1\u5c55\u793a <code>Job</code> \u53ef\u4ee5\u5b58\u53d6\u5230 bean \u7684\u65b9\u5f0f\u3002\u70ba\u4e86\u65b9\u4fbf\u5c55\u793a\uff0c\u6211\u5011\u65b0\u589e\u4e00\u500b <code>name</code> bean\uff0c\u4e26\u5728 <code>HelloWorldJob</code> \u4e2d\u53d6\u5f97 <code>name</code> bean \u7684\u503c\u3002</p> HelloWorldJob.java<pre><code>@Bean\npublic String name() {\n    return \"Teddy\";\n}\n</code></pre> <p>\u4fee\u6539 <code>HelloWorldJob</code> \u7684\u5efa\u69cb\u5f0f\u63a5\u6536 <code>name</code> \u5b57\u4e32\uff0c\u9019\u500b\u8b8a\u6578\u7684\u5be6\u9ad4\uff0c\u6703\u900f\u904e DI \u6ce8\u5165\u3002</p> HelloWorldJob.java<pre><code>public class HelloWorldJob implements Job {\n    private final String name;\n\n    public HelloWorldJob(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public void execute(JobExecutionContext jobExecutionContext) {\n        System.out.println(\"Hello \" + name + \"!\");\n    }\n}\n</code></pre> <p>\u6700\u5f8c\uff0c\u628a\u7a0b\u5f0f\u8dd1\u8d77\u4f86\u5f8c\uff0c\u6bcf 5 \u79d2\u5c31\u6703\u5728\u756b\u9762\u4e0a\u8f38\u51fa \"Hello Teddy!\"\u3002</p>"},{"location":"spring-boot/scheduler/hello_world/#_1","title":"\u81ea\u52d5\u5316\u6e2c\u8a66","text":"<p>\u4f7f\u7528 awaitility \u4f86\u5be6\u4f5c\u9700\u8981\u7b49\u5f85\u6642\u9593\u7684\u6e2c\u8a66\u3002\u9996\u5148\uff0c\u9700\u8981\u589e\u52a0\u76f8\u4f9d\u5957\u4ef6\u3002</p> build.gradle.kts<pre><code>testImplementation(\"org.awaitility:awaitility\")\n</code></pre> <p>awaitility \u5728 Spring Boot 3.2 \u5df2\u53d7\u5230\u76f8\u4f9d\u63a7\u7ba1\uff0c\u6240\u4ee5\u4f7f\u7528 3.2 \u4ee5\u4e0a\u7684\u7248\u672c\u9019\u88e1\u4e0d\u9700\u8981\u52a0\u7248\u672c\u865f\u78bc\u3002</p> <p>\u4f7f\u7528 JUnit 5 \u9032\u884c\u6e2c\u8a66\u3002\u6e2c\u8a66\u9a57\u8b49 15 \u79d2\u5167\uff0c\u5fc5\u9808\u8981\u6709 \"Hello World!\" \u5b57\u4e32\u8f38\u51fa\u5230 standard output \u4e0a\u3002</p> <pre><code>@SpringBootTest\nclass HelloWorldJobTest {\n    private final PrintStream standardOut = System.out; // (1)!\n\n    private final ByteArrayOutputStream outputStreamCaptor = new ByteArrayOutputStream(); // (2)!\n\n    @BeforeEach\n    public void setUp() {\n        System.setOut(new PrintStream(outputStreamCaptor)); // (3)!\n    }\n\n    @AfterEach\n    public void tearDown() {\n        System.setOut(standardOut); // (4)!\n    }\n\n    @Test\n    void helloWorld() {\n    await().atMost(Duration.ofSeconds(15)) // (5)!\n           .untilAsserted(() -&gt; assertThat(outputStreamCaptor.toString()).contains(\"Hello World!\")); // (6)!\n    }\n}\n</code></pre> <ol> <li>\u5148\u8a18\u4e0b\u9810\u8a2d\u7684 <code>System.out</code>\uff0c\u5728\u6e2c\u8a66\u7d50\u675f\u5f8c\u9084\u539f\u4f7f\u7528\u3002</li> <li>\u5efa\u7acb\u4e00\u500b <code>ByteArrayOutputStream</code> \u4f86\u53d6\u4ee3 <code>System.out</code>\uff0c\u9019\u6a23\u53ef\u4ee5\u628a <code>System.out</code> \u7684\u8f38\u51fa\u6355\u6349\u5230 <code>ByteArrayOutputStream</code> \u4e2d\u3002</li> <li>\u5728\u6bcf\u4e00\u500b\u6e2c\u8a66\u958b\u59cb\u524d\uff0c\u628a <code>System.out</code> \u8a2d\u5b9a\u70ba <code>ByteArrayOutputStream</code>\u3002</li> <li>\u5728\u6bcf\u4e00\u500b\u6e2c\u8a66\u7d50\u675f\u5f8c\uff0c\u628a <code>System.out</code> \u9084\u539f\u70ba\u9810\u8a2d\u7684 <code>System.out</code>\u3002</li> <li>\u7b49\u5f85\u6700\u591a 15 \u79d2\u3002</li> <li>\u78ba\u8a8d standard output \u8f38\u51fa\u5fc5\u9808\u5305\u542b \"Hello World!\"\u3002</li> </ol>"},{"location":"spring-boot/scheduler/hello_world/#_2","title":"\u53c3\u8003","text":"<ul> <li>Scheduling Tasks</li> <li>Unit Testing of <code>System.out.println()</code> with JUnit</li> </ul>"},{"location":"spring-boot/scheduler/jdbc_job_store/","title":"Quartz: JDBC JobStore","text":""},{"location":"spring-boot/scheduler/jdbc_job_store/#job","title":"\u7c21\u55ae\u7684 Job \u7bc4\u4f8b","text":"<p>\u4ee5\u4e0b\u7bc4\u4f8b\u5c55\u793a\uff0c\u5728 Spring Boot \u4e2d\u5982\u4f55\u8a2d\u5b9a Quartz \u4f7f\u7528 JDBC JobStore\u3002\u5982\u6b64\u4e00\u4f86\uff0c\u6211\u5011\u628a Job \u653e\u5230 cluster \u4e0a\u57f7\u884c\u3002</p> <p>\u5728 <code>build.gradle.kts</code> \u4e2d\u65b0\u589e <code>spring-boot-starter-quartz</code> \u76f8\u4f9d\u5957\u4ef6\u3002\u5982\u6b64\uff0c\u7a0b\u5f0f\u555f\u52d5\u5f8c\u5c31\u6703\u6709\u4e00\u500b Quartz Scheduler \u5728\u80cc\u666f\u57f7\u884c\u3002</p> build.gradle.kts<pre><code>implementation(\"org.springframework.boot:spring-boot-starter-quartz\")\n</code></pre> <p>\u4f7f\u7528 docker compose \u57f7\u884c mysql\u3002</p> compose.yml<pre><code>version: '3.1'\n\nservices:\n  database:\n    image: mysql:8.4.0\n    ports:\n      - \"3306:3306\"\n    environment:\n      MYSQL_ALLOW_EMPTY_PASSWORD: true\n      MYSQL_DATABASE: quartz\n</code></pre> <p>\u8a2d\u5b9a spring boot \u7684 properties\u3002</p> src/main/resources/application.yml<pre><code>spring:\n  datasource: #(1)!\n    name: datasource\n    url: jdbc:mysql://localhost:3306/quartz\n    username: root\n    password:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n  quartz:\n    job-store-type: jdbc #(2)!\n    jdbc:\n      initialize-schema: always #(3)!\n    overwrite-existing-jobs: true\n    properties:\n      org:\n        quartz:\n          scheduler:\n            instanceName: scheduler\n            instanceId: AUTO #(4)!\n          dataSource:\n            quartzDataSource: #(5)!\n              driver: com.mysql.cj.jdbc.Driver\n              URL: jdbc:mysql://localhost:3306/quartz\n              user: root\n              password:\n              provider: hikaricp\n          jobStore:\n            class: org.quartz.impl.jdbcjobstore.JobStoreTX\n            dataSource: quartzDataSource #(5)!\n            isClustered: true #(6)!\n</code></pre> <ol> <li><code>spring.quartz.jdbc.initialize-schema</code> \u5403\u7684 Data Source \u8a2d\u5b9a\u3002\u5728 <code>spring.quartz.properties.org.quartz.dataSource</code> \u8a2d\u5b9a\u7684 Data Source \u4e0d\u652f\u63f4 initialize schema\u3002</li> <li>\u4f7f\u7528 JDBC JobStore\u3002</li> <li>\u6bcf\u6b21\u555f\u52d5\u90fd\u6703\u521d\u59cb\u5316 schema\u3002\u63db\u53e5\u8a71\u8aaa\uff0c\u6211\u5011\u53ef\u4ee5\u4e0d\u5fc5\u624b\u52d5\u65b0\u589e quartz \u76f8\u95dc\u7684 tables\u3002(SQL \u53c3\u8003)</li> <li>\u5728 cluster \u4e0a\u7684 pod \u9700\u8981\u6709\u552f\u4e00\u7684 instance id\u3002\u9019\u88e1\u8a2d\u5b9a <code>AUTO</code> \u5373\u53ef\u9054\u5230\u9700\u6c42\u3002</li> <li>data source \u7684\u8a2d\u5b9a\u3002\u9019\u88e1\u7684\u540d\u7a31\u6703\u5728\u4e0b\u9762\u8a2d\u5b9a job store \u7684 dataSource \u53c3\u8003\u3002</li> <li>job store \u4f7f\u7528\u7684 dataSource\u3002</li> <li>\u555f\u7528 cluster\u3002</li> </ol> \u4f7f\u7528\u8b8a\u6578\u4f86\u907f\u514d\u91cd\u8907\u8a2d\u5b9a <pre><code>spring:\n  quartz:\n    properties:\n      org:\n        quartz:\n          dataSource:\n            quartzDataSource:\n              driver: ${spring.datasource.driver-class-name}\n              URL: ${spring.datasource.url}\n              user: ${spring.datasource.username}\n              password: ${spring.datasource.password}\n</code></pre> <p>\u65b0\u589e <code>Job</code> \u5be6\u4f5c\uff0c\u7c21\u55ae\u7684\u5728\u756b\u9762\u8f38\u51fa\u73fe\u5728\u7684\u6642\u9593\u4ee5\u53ca \"Hello World!\"\u3002\u5370\u51fa\u6642\u9593\u662f\u70ba\u4e86\u5e6b\u52a9\u6211\u5011\u8b58\u5225\u9019\u662f\u54ea\u500b\u6642\u9593\u9ede\u6240\u89f8\u767c\u7684 Job\u3002</p> HelloWorldJob.java<pre><code>public class HelloWorldJob implements Job {\n    @Override\n    public void execute(JobExecutionContext jobExecutionContext) {\n        String time = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"hh:mm:ss\"));\n        System.out.println(time + \" Hello World!\");\n    }\n}\n</code></pre> <p>\u65b0\u589e <code>JobDetail</code> \u548c <code>Trigger</code> \u7684 Bean \u5b9a\u7fa9\u3002\u9019\u88e1\u8a2d\u5b9a\u6bcf 10 \u79d2\u89f8\u767c\u4e00\u6b21 Job \u5728\u756b\u9762\u4e0a\u8f38\u51fa \"Hello World!\"\u3002</p> <pre><code>@Component\npublic class QuartzConfig {\n\n    @Bean\n    public JobDetail helloWorldJobDetail() {\n        return JobBuilder.newJob(HelloWorldJob.class)\n                         .withIdentity(\"helloWorldJob\")\n                         .storeDurably()\n                         .build();\n    }\n\n    @Bean\n    public Trigger helloWorldTrigger(JobDetail printHelloWorldJobDetail) {\n        return TriggerBuilder.newTrigger()\n                             .forJob(printHelloWorldJobDetail)\n                             .withIdentity(\"helloWorldTrigger\")\n                             .withSchedule(CronScheduleBuilder.cronSchedule(\"*/10 * * * * ?\"))\n                             .build();\n    }\n}\n</code></pre> <p>\u70ba\u4e86\u53ef\u4ee5\u540c\u6642\u57f7\u884c\u591a\u500b instance\uff0c\u6211\u5011\u5c07\u7a0b\u5f0f\u6253\u5305\u6210 tar \u6a94\u3002\u5c08\u6848\u7684\u76ee\u9304 /build/libs \u61c9\u8a72\u6703\u7522\u751f xxx.jar \u6a94\u3002</p> <pre><code>./gradlew bootJar\n</code></pre> <p>\u6253\u958b 3 \u500b terminal\uff0c\u5206\u5225\u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4\u57f7\u884c\u7a0b\u5f0f: (xxx \u66ff\u63db\u6210\u5be6\u969b\u6a94\u6848\u540d\u7a31)</p> <pre><code>java -jar build/libs/xxx.jar\n</code></pre> <p>\u89c0\u5bdf\u6bcf 10 \u79d2\u53ea\u6703\u6709\u4e00\u500b terminal \u8f38\u51fa \"Hello World!\"\u3002\u9019\u8868\u793a Job \u662f\u5728 cluster \u4e0a\u57f7\u884c\u7684\u3002\u5c07\u8f38\u51fa\u8a0a\u606f\u7684 terminal \u95dc\u9589\uff0c\u53ef\u4ee5\u89c0\u5bdf\u5230\u5176\u4ed6 terminal \u6703\u63a5\u7e8c\u57f7\u884c\u8f38\u51fa \"Hello World!\" \u7684 Job\u3002</p> <p>\u4e00\u500b trigger \u4e00\u500b job instance \u7684\u8a2d\u5b9a</p> <p><code>org.quartz.scheduler.batchTriggerAcquisitionMaxCount</code> \u9810\u8a2d\u503c\u70ba 1 \u8a2d\u5b9a\u4e86 Trigger \u7684 job \u4e00\u6b21\u57f7\u884c\u4e00\u500b instance\u3002\u53ef\u4ee5\u8a2d\u5b9a\u5176\u4ed6\u6578\u503c\u4f86\u8b93\u540c\u4e00 trigger \u540c\u6642\u57f7\u884c\u591a\u500b job\u3002</p>"},{"location":"spring-boot/scheduler/jdbc_job_store/#_1","title":"\u63a2\u8a0e: \u57f7\u884c\u6642\u9593\u8d85\u904e\u4e0b\u4e00\u6b21\u6392\u7a0b\u7684\u6642\u9593\u7684\u884c\u70ba","text":"<p>\u5047\u8a2d\u6211\u5011\u8a2d\u5b9a\u6bcf 10 \u79d2\u8dd1\u4e00\u500b job\u3002\u4e26\u4e14\uff0c\u6bcf\u500b job \u57f7\u884c\u6642\u9593\u9700\u8981 15 \u79d2\u3002\u4e5f\u5c31\u662f\u8aaa\uff0cjob \u7684\u57f7\u884c\u6642\u9593\u5fc5\u5b9a\u6703\u8986\u84cb\u5230\u4e0b\u4e00\u6b21\u89f8\u767c\u7684\u6642\u9593\u3002\u5728\u6c92\u6709\u7279\u5225\u8a2d\u5b9a\u7684\u60c5\u6cc1\u4e0b\uff0c\u7d93\u904e 30 \u79d2\u5f8c\uff0c\u5c07\u6703\u6709 3 \u500b job \u88ab\u8dd1\u8d77\u4f86\u3002job \u8207 job \u7684\u6642\u9593\u6642\u9593\u662f\u6703\u91cd\u758a\u7684\u3002</p> <pre>5c452e70-9ccc-4a47-8f28-5c9d6842a3f8</pre>"},{"location":"spring-boot/scheduler/jdbc_job_store/#disallowconcurrentexecution","title":"\u4f7f\u7528<code>@DisallowConcurrentExecution</code> \u4f86\u907f\u514d\u91cd\u758a\u57f7\u884c","text":"<p>\u5728 Job \u7684\u5ba3\u544a\u52a0\u4e0a <code>@DisallowConcurrentExecution</code> \u4f86\u907f\u514d Job \u91cd\u758a\u57f7\u884c\u3002</p> HelloWorldJob.java<pre><code>@DisallowConcurrentExecution\npublic class HelloWorldJob implements Job {\n    // ...\n}\n</code></pre> <p>\u5982\u6b64\uff0c\u7576 Job \u9084\u5728\u57f7\u884c\u6642\uff0c\u4e0b\u4e00\u6b21\u7684 Job \u5c07\u6703\u88ab\u5ef6\u9072\u5230\u4e0a\u4e00\u6b21\u7684 Job \u57f7\u884c\u5b8c\u7562\u5f8c\u518d\u57f7\u884c\u3002\u8b8a\u66f4\u5f8c\u7684 3 \u500b Job \u57f7\u884c\u6642\u9593\u8ef8\u53c3\u8003\u4e0b\u5716:</p> <pre>97b85dd9-1901-4b99-b10c-0d27c641a571</pre>"},{"location":"spring-boot/scheduler/jdbc_job_store/#trigger","title":"\u8a08\u7b97\u6392\u7a0b\u7684\u6642\u9593\u8207\u89f8\u767c\u7684\u6642\u9593\u5dee\u4f86\u5ffd\u7565\u932f\u904e\u7684 trigger","text":"<p>\u5728 <code>Job.execute</code> \u958b\u59cb\u524d\uff0c\u6aa2\u67e5 job \u89f8\u767c\u7684\u6642\u9593\u8207\u6392\u7a0b\u7684\u6642\u9593\u5dee\uff0c\u5982\u679c\u8d85\u904e\u4e00\u5b9a\u6642\u9593\uff0c\u5247\u5ffd\u7565\u9019\u6b21\u7684 trigger\u3002\u7bc4\u4f8b\u4e2d\u662f\u6642\u9593\u5dee\u8d85\u904e 1000 \u6beb\u79d2 (1 \u79d2) \u5c31\u5ffd\u7565\u9019\u6b21\u7684 trigger\u3002</p> HelloWorldJob.java<pre><code>@DisallowConcurrentExecution\npublic class HelloWorldJob implements Job {\n    @Override\n    public void execute(JobExecutionContext context) {\n        if (context.getFireTime().getTime() - context.getScheduledFireTime().getTime() &gt; 1000) {\n            return;  // skip this trigger\n        }\n        // ...\n    }\n}\n</code></pre> <p>\u5982\u6b64\uff0ctrigger \u7684 job \u90fd\u6703\u843d\u5728\u6392\u7a0b\u8a2d\u5b9a\u7684\u6642\u9593\u9ede\u4e0a\u3002\u8b8a\u66f4\u5f8c\u7684 Job \u57f7\u884c\u6642\u9593\u8ef8\u53c3\u8003\u4e0b\u5716:</p> <pre>d0960942-bb69-474b-afbe-c58456556043</pre> <p>Note</p> <p>\u76ee\u524d\u6c92\u6709\u767c\u73fe\u5b98\u65b9\u5c0d\u65bc\u6b64\u65b9\u6848\u7684\u89e3\u6cd5\u3002\u9019\u88e1\u7684\u89e3\u6cd5\u6709\u571f\u6cd5\u7149\u92fc\u7684\u611f\u89ba\u3002</p>"},{"location":"spring-boot/scheduler/jdbc_job_store/#job_1","title":"\u63a2\u8a0e: Job \u57f7\u884c\u904e\u7a0b\u767c\u751f\u932f\u8aa4\u7684\u884c\u70ba","text":"<p>\u5728 Job \u57f7\u884c\u904e\u7a0b\u4e2d\uff0c\u5982\u679c\u62cb\u51fa\u4f8b\u5916\uff0cJob \u5373\u4e2d\u65b7\u57f7\u884c\u3002\u5982\u679c\u62cb\u51fa\u7684\u4f8b\u5916\u662f <code>JobExecutionException</code> \u4e26\u8a2d\u5b9a <code>refireImmediately</code> \u70ba <code>true</code>\uff0c\u5247 Job \u6703\u7acb\u5373\u91cd\u65b0\u57f7\u884c\uff0c\u4e26\u4e14\u4e0b\u4e00\u6b21 <code>JobExecutionContext.getRefireCount()</code> \u6578\u5b57\u7d2f\u52a0\u3002 \u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u5c55\u793a\u7576 Job \u5931\u6557\u62cb\u51fa\u4f8b\u5916\u6642\uff0c retry 3 \u6b21\u3002</p> HelloWorldJob.java<pre><code>@DisallowConcurrentExecution\npublic class HelloWorldJob implements Job {\n    @Override\n    public void execute(JobExecutionContext context) {\n        if(context.getRefireCount() &gt; 3) {\n            throw new JobExecutionException(\"Too many re-fires\");\n        }\n\n        // ...\n\n        throw new JobExecutionException(\"Something goes wrong\", true);\n    }\n}\n</code></pre>"},{"location":"spring-boot/scheduler/jdbc_job_store/#_2","title":"\u53c3\u8003","text":"<ul> <li>Sprint Boot Quartz Scheduler</li> <li>Quartz Configuration - Configure Clustering with JDBC-JobStore </li> </ul>"}]}