{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"blog/index.html","title":"Blog","text":""},{"location":"blog/2024/07/15/retrieving-new-entity-id-in-integration-testing-in-spring-boot-test-using-spybean.html","title":"Retrieving new entity id in integration testing in Spring Boot test using <code>@SpyBean</code>","text":"<p>\u5728 integration test \u4e2d\uff0c\u5e38\u6703\u6d89\u53ca\u5c07\u8cc7\u6599\u5beb\u5165\u8cc7\u6599\u5eab\uff0c\u7136\u5f8c\u518d\u900f\u904e\u5176\u4ed6 API \u5c07\u8cc7\u6599\u6488\u51fa\u4f86\u4ee5\u78ba\u8a8d\u8cc7\u6599\u78ba\u5be6\u5beb\u5165\u8cc7\u6599\u5eab\u3002</p> <pre><code>@SpringBootTest\n@AutoConfigureMockMvc\npublic class IntegrationTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Test\n    public void test() throws Exception {\n        mockMvc.perform(post(\"/data\").content(\"Hello world!\")) // (1)!\n               .andExpect(status().isOk());\n\n        // \u900f\u904e\u53e6\u5916\u4e00\u500b API \u6488\u8cc7\u6599\uff0c\u78ba\u8a8d\n    }\n}\n</code></pre> <ol> <li>\u5047\u8a2d\u6703\u5728 <code>data</code> \u8cc7\u6599\u5eab\u65b0\u589e\u4e00\u7b46\u8cc7\u6599 \"Hello world!\"</li> </ol> <p>\u4f46\u662f\uff0c\u6709\u6642\u5019\u53ef\u80fd\u56e0\u70ba\u7a2e\u7a2e\u539f\u56e0\uff0c\u53ef\u80fd\u662f\u6c92\u6709\u9019\u7a2e\u6488\u8cc7\u6599\u7684 API \u53ef\u7528\uff0c\u4ea6\u6216\u8005\u6e2c\u8a66\u8a2d\u8a08\uff0c\u4e0d\u647b\u96dc\u5176\u4ed6\u52d5\u4f5c\u523b\u610f\u70ba\u4e4b\u7b49\u7b49\u3002</p> <p>\u7e3d\u4e4b\uff0c\u6c92\u6709\u6488\u8cc7\u6599 API \u7684\u60c5\u6cc1\u4e0b\uff0c\u8981\u78ba\u8a8d\u8cc7\u6599\u662f\u5426\u6b63\u78ba\u65b0\u589e\u5230\u8cc7\u6599\u5eab\uff0c\u6709\u4e00\u7a2e\u505a\u6cd5\u662f\u76f4\u63a5\u78ba\u8a8d\u8cc7\u6599\u78ba\u5be6\u5beb\u9032\u8cc7\u6599\u5eab\u3002\u4e0d\u904e\uff0c\u76f4\u63a5\u6488\u8cc7\u6599\u5eab\u6700\u5f8c\u4e00\u7b46\u8cc7\u6599\uff0c\u7136\u5f8c\u9032\u884c\u9a57\u8b49\u7684\u505a\u6cd5\u6703\u6709\u7f3a\u9677\uff0c\u6211\u5011\u5982\u4f55\u78ba\u5b9a\u6700\u5f8c\u4e00\u7b46\u8cc7\u6599\u4e00\u5b9a\u662f\u525b\u624d API \u5beb\u5165\u7684\u8cc7\u6599\u5462\uff1f\u5982\u679c\u6211\u5011\u5728\u4e0d\u540c\u6e2c\u8a66\u5171\u7528\u76f8\u540c\u7684\u6e2c\u8a66\u8cc7\u6599\uff0c\u5c31\u66f4\u96e3\u4ee5\u78ba\u5b9a\u4e86\u3002\u6211\u5011\u53ef\u4ee5\u4f7f\u7528 <code>@SpyBean</code> \u4f86\u89e3\u6c7a\u9019\u500b\u554f\u984c\uff0c\u78ba\u8a8d repository \u5beb\u5165\u8cc7\u6599\u5eab\u7684 method \u78ba\u5be6\u6709\u88ab\u547c\u53eb\uff0c\u4e26\u53d6\u5f97\u65b9\u624d\u65b0\u589e\u8cc7\u6599\u7684 id\u3002</p> <pre><code>@SpringBootTest\n@AutoConfigureMockMvc\npublic class IntegrationTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @SpyBean // (1)!\n    private DataRepository dataRepository;\n\n    @Test\n    public void test() throws Exception {\n        mockMvc.perform(post(\"/data\").content(\"Hello world!\"))\n               .andExpect(status().isOk());\n\n        ArgumentCaptor&lt;Data&gt; dataCaptor = ArgumentCaptor.forClass(Data.class);\n        verify(dataRepository).save(dataCaptor.capture()); // (2)!\n        Integer caseId = savedEntity.getValue().getId(); // (3)!\n        Data actual = dataRepository.findById(caseId); // (4)!\n        assertThat(actual).isEqualTo(new Data(caseId, \"Hello world!\")); // (5)!\n    }\n}\n</code></pre> <ol> <li>\u6a19\u8a18 <code>@SpyBean</code></li> <li>\u78ba\u8a8d <code>dataRepository.save</code> method \u6709\u88ab\u547c\u53eb</li> <li>\u53d6\u5f97\u65b0\u589e\u8cc7\u6599\u7684 id</li> <li>\u900f\u904e id \u53d6\u5f97\u65b0\u589e\u8cc7\u6599</li> <li>\u9a57\u8b49\u65b0\u589e\u8cc7\u6599\u662f\u5426\u6b63\u78ba</li> </ol> <p>Mockito \u7684 <code>spy</code> \u5141\u8a31\u6211\u5011\u4f7f\u7528\u5be6\u969b object \u7684\u547c\u53eb\uff0c\u4e26\u4e14\u5728\u9700\u8981\u7684\u5730\u65b9\u505a\u90e8\u5206\u7684 mock\u3002<code>@SpyBean</code> \u5c31\u662f\u5e6b\u6211\u5011\u57fa\u65bc\u5be6\u969b\u7684 bean \u7522\u751f spy bean\uff0c\u8b93\u6211\u5011\u53ef\u4ee5\u5728\u6e2c\u8a66\u4e2d\u4f7f\u7528\u5be6\u969b\u7684 repository\uff0c\u4e26\u4e14\u5728\u9700\u8981\u7684\u5730\u65b9\u505a\u90e8\u5206\u7684 mock\u3002</p>"},{"location":"blog/2024/11/18/run-appliocation-on-kubernetes.html","title":"Run appliocation on kubernetes","text":"<p>\u6211\u5011\u6703\u9700\u8981\u5728 kubernets \u7684 cluster \u8a66\u8dd1\u4e00\u4e0b\u7a0b\u5f0f\u662f\u5426\u80fd\u5920\u5982\u9810\u671f\u822c\u7684\u904b\u4f5c\u3002\u50cf\u662f\u7279\u6b8a\u7684\u7db2\u8def\u74b0\u5883\uff0c\u6216\u8005\u662f\u5167\u90e8\u7684 service\uff0c\u6211\u5011\u60f3\u78ba\u8a8d\u90e8\u7f72\u4e0a\u53bb\u7684\u7a0b\u5f0f\u662f\u5426\u80fd\u6253\u901a\u53e6\u4e00\u500b service\u3002</p> <p>\u9019\u88e1\u6211\u5011\u5047\u5b9a\u4f7f\u7528 Sping Boot \u9032\u884c\u958b\u767c\u3002\u70ba\u4e86\u628a app \u653e\u5230 kubernetes \u4e0a\u57f7\u884c\uff0c\u6211\u5011\u9700\u8981\u9032\u884c\u4ee5\u4e0b\u52d5\u4f5c:</p> <ul> <li>\u5c07 Spring Boot \u7684 app \u6253\u5305\u6210 image</li> <li>\u5c07 image \u63a8\u4e0a image hub (\u4f8b\u5982 dockerhub)</li> </ul>"},{"location":"blog/2024/11/18/run-appliocation-on-kubernetes.html#spring-boot-image","title":"\u5c07 Spring Boot \u6253\u5305\u6210 image","text":"<p>\u57f7\u884c <code>gradle build</code> \u5f8c\uff0c\u7a0b\u5f0f\u7684 jar \u6703\u7522\u751f\u5728 build/lib \u76ee\u9304\u4e0b\u3002\u900f\u904e jar \u5c31\u53ef\u4ee5\u5c07\u7a0b\u5f0f\u8dd1\u8d77\u4f86\u3002\u4ee5\u4e0b Dockerfile\uff0c\u5c07\u6b64 jar \u6253\u5305\u6210 image\uff0c\u7576\u8dd1\u8d77\u4f86\u6642\uff0c\u57f7\u884c\u8a72 jar\u3002</p> Dockerfile<pre><code>FROM openjdk:21\nCOPY build/libs/*-SNAPSHOT.jar /app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n</code></pre> <p>\u6211\u5011\u5728 <code>build.gradle.kts</code> \u589e\u52a0 <code>buildImage</code> task\uff0c\u9032\u884c\u6253\u5305 image \u7684\u52d5\u4f5c\u3002</p> build.gradle.kts<pre><code>val image = \"&lt;image&gt;\"\n\ntasks.register(\"buildImage\") {\n    group = \"docker\"\n    description = \"Build the Docker image\"\n    dependsOn(\"build\")\n    doFirst {\n        exec {\n            commandLine(\"sh\", \"-c\", \"docker buildx build -t $image --platform linux/amd64 .\")\n        }\n    }\n}\n</code></pre> <p>\u5c07 <code>&lt;image&gt;</code> \u66ff\u63db\u6210\u76ee\u6a19 image \u7684\u540d\u7a31\u3002<code>buildImage</code> \u76f8\u4f9d <code>build</code>\uff0c\u5728\u57f7\u884c task \u4e4b\u524d\uff0c\u6703\u5efa\u7f6e\u7522\u751f\u6700\u65b0\u7684 jar \u6a94\u3002\u70ba\u4e86\u5728 kubernetes \u4e0a\u57f7\u884c image\uff0c\u8a2d\u5b9a image \u7684\u76ee\u6a19\u5e73\u53f0\u70ba <code>--platform linux/amd64</code>\u3002</p>"},{"location":"blog/2024/11/18/run-appliocation-on-kubernetes.html#image-image-hub","title":"\u5c07 image \u63a8\u4e0a image hub","text":"<p>\u5728 <code>build.gradle.kts</code> \u589e\u52a0 <code>pushImage</code> task\uff0c\u5c07\u6253\u5305\u7684 image \u63a8\u4e0a remote repository \u4e2d\u3002task \u76f8\u4f9d\u524d\u4e00\u6b65\u7684 <code>buildImage</code> task\uff0c\u78ba\u4fdd\u4f7f\u7528\u6700\u65b0\u7684 image\u3002</p> build.gradle.kts<pre><code>tasks.register(\"pushImage\") {\n    group = \"docker\"\n    description = \"Push the Docker image\"\n    dependsOn(\"buildImage\")\n    doFirst {\n        exec {\n            val username = \"&lt;username&gt;\"\n            val password = \"&lt;password&gt;\"\n            commandLine(\"sh\", \"-c\", \"docker login -u $username -p $password\")\n            commandLine(\"sh\", \"-c\", \"docker push $image\")\n        }\n    }\n}\n</code></pre>"},{"location":"blog/2024/11/18/run-appliocation-on-kubernetes.html#kubernetes","title":"\u5728 kubernetes \u4e0a\u57f7\u884c\u76ee\u6a19\u7a0b\u5f0f","text":"<p>\u57f7\u884c\u4ee5\u4e0b\u52d5\u4f5c\uff0c\u5373\u53ef\u57f7\u884c\u7a0b\u5f0f:</p> <pre><code>$ kubectl run -it &lt;name&gt; --rm --image=&lt;image&gt; -n &lt;namespace&gt;\n</code></pre> <p>\u66ff\u63db <code>&lt;name&gt;</code>, <code>&lt;image&gt;</code>, <code>&lt;namespace&gt;</code></p>"},{"location":"blog/2024/07/21/%E9%9B%9C%E6%B9%8A%E5%87%BD%E6%95%B8%E8%A8%AD%E8%A8%88%E4%B8%8D%E8%89%AF%E5%B0%8E%E8%87%B4-on2-%E6%99%82%E9%96%93%E8%A4%87%E9%9B%9C%E5%BA%A6.html","title":"\u96dc\u6e4a\u51fd\u6578\u8a2d\u8a08\u4e0d\u826f\u5c0e\u81f4 \\(O(n^2)\\) \u6642\u9593\u8907\u96dc\u5ea6","text":"<p>\u6700\u8fd1\u5728\u770b Effective Java, 3rd \u4e00\u66f8\u7684 Item 11 \u8a0e\u8ad6 <code>hashCode</code> \u7684\u5be6\u4f5c\uff0c\u8aaa\u5230\u7cdf\u7cd5\u7684 <code>hashCode</code> \u5be6\u4f5c\u5c07\u5c0e\u81f4\u7a0b\u5f0f\u7684\u6642\u9593\u8907\u96dc\u5ea6\u5f9e \\(O(n)\\) \u8b8a\u6210 \\(O(n^2)\\)\u3002</p> <p>\u66f8\u4e2d\u4e26\u6c92\u6709\u8a73\u7d30\u8aaa\u660e\u60c5\u5883\u3002\u800c\u5728\u6211\u7684\u7406\u89e3\uff0chash \u7684\u6642\u9593\u8907\u96dc\u4e0d\u5c31\u662f \\(O(1)\\) \u55ce\uff1f\u90a3\u9ebc \\(O(n)\\) \u8ddf \\(O(n^2)\\) \u662f\u600e\u9ebc\u56de\u4e8b\uff1f \u6240\u4ee5\u6211\u5c31\u81ea\u5df1\u8166\u88dc\u4e00\u500b\u60c5\u5883\u4f86\u89e3\u91cb\u66f8\u4e2d\u6c92\u6709\u63cf\u8ff0\u7684\u60c5\u5883\u3002</p>"},{"location":"blog/2024/07/21/%E9%9B%9C%E6%B9%8A%E5%87%BD%E6%95%B8%E8%A8%AD%E8%A8%88%E4%B8%8D%E8%89%AF%E5%B0%8E%E8%87%B4-on2-%E6%99%82%E9%96%93%E8%A4%87%E9%9B%9C%E5%BA%A6.html#_1","title":"\u60c5\u5883","text":"<p>\u7a0b\u5f0f\u8981\u7dad\u8b77\u4e00\u500b Set\uff0c\u63d2\u5165 \\(n\\) (\\(x_1\\), \\(x_2\\), ..., \\(x_n\\)) \u500b\u4e0d\u76f8\u540c\u7684\u5143\u7d20\u5230 Set \u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba\u4f55\uff1f</p> <p>\u5047\u8a2d\u6211\u5011\u5ba3\u544a\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684 hash table\u3002</p> <p></p> <p>\u6211\u5011\u8981\u5c07\u5143\u7d20 \\(x_m\\) \u5b58\u5230 hash table \u4e2d\uff0c\u9996\u5148\u6211\u5011\u8981\u8a08\u7b97 \\(hash(x_m)\\) \u4ed6\u6703\u662f\u4e00\u500b\u4ecb\u65bc \\(1~n\\) \u7684\u503c\uff0c\u6c7a\u5b9a \\(x_m\\) \u5b58\u5728 hash table \u7684\u54ea\u500b\u4f4d\u7f6e\u3002</p> <p></p> <p>\u7576 hash table \u7684\u67d0\u500b\u4f4d\u7f6e\u5df2\u7d93\u6709\u5143\u7d20\u4e86\uff0c\u5c31\u7528 linked list \u7684\u65b9\u5f0f\u4e32\u63a5\u8d77\u4f86\u3002</p> <p></p> <p>\u4e0d\u904e\uff0c\u9019\u500b hash table \u662f\u70ba\u4e86\u5be6\u73fe Set\u3002\u7576\u7b97\u51fa\u4f86\u7684 hash \u4f4d\u5740\u5df2\u7d93\u6709\u5143\u7d20\u5b58\u5728\uff0c\u6211\u5011\u9700\u8981\u6aa2\u67e5\u5f85\u65b0\u589e\u7684\u5143\u7d20\u662f\u5426\u5df2\u7d93\u5728\u8a72 hash \u4f4d\u5740\u7684 linked list \u4e2d\u5b58\u5728\u3002\u5982\u679c\u5b58\u5728\uff0c\u5c31\u4e0d\u52a0\u5165\uff0c\u5426\u5247\u52a0\u5165\u3002</p>"},{"location":"blog/2024/07/21/%E9%9B%9C%E6%B9%8A%E5%87%BD%E6%95%B8%E8%A8%AD%E8%A8%88%E4%B8%8D%E8%89%AF%E5%B0%8E%E8%87%B4-on2-%E6%99%82%E9%96%93%E8%A4%87%E9%9B%9C%E5%BA%A6.html#_2","title":"\u6700\u4f73\u60c5\u6cc1","text":"<p>\\(x_1\\), \\(x_2\\), ..., \\(x_n\\) \u7684 hash \u503c\u90fd\u4e0d\u76f8\u540c\uff0c\u9019\u6a23\u6bcf\u500b\u5143\u7d20\u90fd\u53ef\u4ee5\u76f4\u63a5\u5b58\u5728 hash table \u7684\u67d0\u500b\u4f4d\u5740\u3002</p> <p></p> <p>\u6642\u9593\u8907\u96dc\u5ea6:</p> <p>\\(O(1) + O(1) + ... + O(1) = \\sum_{1}^n O(1) = O(n)\\)</p>"},{"location":"blog/2024/07/21/%E9%9B%9C%E6%B9%8A%E5%87%BD%E6%95%B8%E8%A8%AD%E8%A8%88%E4%B8%8D%E8%89%AF%E5%B0%8E%E8%87%B4-on2-%E6%99%82%E9%96%93%E8%A4%87%E9%9B%9C%E5%BA%A6.html#_3","title":"\u6700\u7cdf\u60c5\u6cc1","text":"<p>\\(x_1\\), \\(x_2\\), ..., \\(x_n\\) \u7684 hash \u503c\u5168\u76f8\u540c (\u5047\u8a2d\u70ba \\(m\\))\uff0c\u9019\u6a23\u6703\u5c0e\u81f4\u6bcf\u6b21\u52a0\u5165\u5143\u7d20\u6642\uff0c\u90fd\u5fc5\u9808\u6aa2\u67e5 hash table \u7684\u6240\u6709\u5143\u7d20\u3002</p> <p></p> <p>\u63d2\u5165 \\(x_1\\) \u6642\uff0c\u6c92\u6709\u9700\u8981\u6aa2\u67e5\u4efb\u4f55\u5143\u7d20\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba \\(O(1)\\)\u3002</p> <p></p> <p>\u63d2\u5165 \\(x_2\\)\uff0c\u8207 \\(m\\) \u4f4d\u5740\u7684\u5143\u7d20\u76f8\u6bd4\uff0c\u78ba\u8a8d \\(m\\) \u4f4d\u5740\u6c92\u6709\u51fa\u73fe \\(x_2\\) \u518d\u9032\u884c\u63d2\u5165\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba \\(O(2)\\)\u3002(\\(O(1)\\) \u70ba\u8a08\u7b97 hash\uff0c\\(O(1)\\) \u70ba\u8207\u4e00\u500b\u5143\u7d20\u6bd4\u8f03)</p> <p></p> <p>\u63d2\u5165 \\(x_n\\)\u3002\u8207 \\(m\\) \u4f4d\u5740\u7684\u5143\u7d20\u76f8\u6bd4\uff0c\u78ba\u8a8d \\(m\\) \u4f4d\u5740\u6c92\u6709\u51fa\u73fe \\(x_n\\) \u518d\u9032\u884c\u63d2\u5165\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba \\(O(n)\\)\u3002(\\(O(1)\\) \u70ba\u8a08\u7b97 hash\uff0c\\(O(n-1)\\) \u70ba\u8207 \\(n-1\\) \u500b\u5143\u7d20\u6bd4\u8f03)</p> <p>\u56e0\u6b64\uff0c\u6574\u9ad4\u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba:</p> <p>\\(O(1) + O(2) + ... + O(n) = O(1 + 2 + ... + n) = O(\\frac{n(n+1)}{2}) = O(\\frac{n^2+n}{2}) = O(\\frac{n^2}{2} + \\frac{n}{2}) = O(n^2)\\)</p>"},{"location":"blog/2024/07/21/%E9%9B%9C%E6%B9%8A%E5%87%BD%E6%95%B8%E8%A8%AD%E8%A8%88%E4%B8%8D%E8%89%AF%E5%B0%8E%E8%87%B4-on2-%E6%99%82%E9%96%93%E8%A4%87%E9%9B%9C%E5%BA%A6.html#_4","title":"\u7d50\u8ad6","text":"<p>\u4ee5\u4e0a\u6700\u4f73\u7684\u60c5\u5883\u8207\u6700\u7cdf\u7684\u60c5\u5883\u6240\u8a18\u7b97\u51fa\u4f86\u7684\u6642\u9593\u8907\u96dc\u5ea6\uff0c\u8207\u66f8\u4e2d\u6240\u8aaa\u7684 \\(O(n)\\) \u8207 \\(O(n^2)\\) \u662f\u76f8\u7b26\u7684\u3002\u61c9\u8a72\u53ef\u4ee5\u642d\u914d\u9019\u500b\u7bc4\u4f8b\u4f86\u7406\u89e3\u66f8\u4e2d\u7684\u63cf\u8ff0\u3002</p>"},{"location":"clean-architecture/34.html","title":"The Missing Chapter","text":"Package by layerPackage by featurePorts and AdaptersPackage by component"},{"location":"clean-architecture/34.html#class-public","title":"\u4e0d\u662f\u6240\u6709 class \u90fd\u662f <code>public</code>","text":"<p>\u6240\u6709 class \u90fd\u662f <code>public</code>\uff0c\u7121\u8ad6 package \u600e\u9ebc\u5b89\u6392\uff0c\u90fd\u50c5\u50c5\u662f\u7d44\u7e54\u7a0b\u5f0f\u78bc\u7684\u65b9\u5f0f\uff0c\u800c\u975e\u5c01\u88dd\u3002<code>public</code> class \u53ef\u4ee5\u88ab\u4efb\u4f55\u5730\u65b9\u7684\u7a0b\u5f0f\u78bc\u4f7f\u7528\uff0c\u5b8c\u5168\u6c92\u6709\u5b58\u53d6\u63a7\u7ba1\u7684\u7d04\u675f\u529b\u3002</p> <p></p> <p>\u61c9\u5c07 package \u5167\u90e8\u5be6\u4f5c\u7684 class (\u7070\u8272\u7684\u90e8\u5206) \u5ba3\u544a\u6210 package-protected \u963b\u6b62 package \u5916\u7684 class \u5b58\u53d6\u3002</p> <p></p> <p>\u76f8\u4f9d\u7684\u90e8\u5206\uff0c\u900f\u904e dependency injection \u89e3\u6c7a\u3002</p>"},{"location":"development/jet-brains/postfix-completion.html","title":"Postfix Completion","text":"<p>Custom Postfix Templates</p>"},{"location":"development/jet-brains/shortcuts.html","title":"JetBrains \u71b1\u9375","text":""},{"location":"development/jet-brains/shortcuts.html#_1","title":"\u5feb\u901f\u9810\u89bd","text":"<p>\u4e0d\u5207\u63db\u7576\u524d\u7684\u7a0b\u5f0f\u78bc\uff0c\u60f3\u770b\u4e00\u4e0b\u5176\u4ed6\u90e8\u5206\u7684\u7d30\u7bc0\u3002</p> <ul> <li>Parameter info: Cmd + P<ul> <li>\u770b\u53c3\u6578\u7684\u7d30\u7bc0</li> </ul> </li> <li>Type info: Ctrl + Shift + P<ul> <li>\u770b type</li> <li>\u518d\u6309\u4e00\u6b21\u71b1\u9375\u53ef\u4ee5\u770b\u5230 value \u7d30\u7bc0\u3002</li> </ul> </li> <li>Quick documentation: Ctrl + J<ul> <li>\u770b Java doc</li> </ul> </li> <li>Quick definition: Cmd + Y<ul> <li>\u770b\u5be6\u4f5c\u7d30\u7bc0</li> </ul> </li> </ul>"},{"location":"development/jet-brains/shortcuts.html#_2","title":"\u9078\u64c7","text":"<ul> <li>Extend selection: Option + Up</li> <li>Shrink selection: Option + Down</li> </ul>"},{"location":"development/vim/advanced.html","title":"\u9010\u884c\u7d2f\u52a0","text":"\u4fee\u6539\u524d<pre><code>Line 1\nLine 1\nLine 1\nLine 1\nLine 1\n</code></pre> \u4fee\u6539\u5f8c<pre><code>Line 1\nLine 2\nLine 3\nLine 4\nLine 5\n</code></pre> <p>\u5728\u7b2c\u4e8c\u884c\u7684 1\uff0c\u6309\u4e0b Ctrl+v \u9032\u5165 column selection \u6a21\u5f0f\uff0c\u7136\u5f8c\u5f80\u4e0b\u628a 2 ~ 5 \u884c\u7684 1 \u90fd\u9078\u8d77\u4f86\u3002</p> <p>\u5148\u6309\u4e0b g\uff0c\u7136\u5f8c\u518d\u6309 Ctrl+a\u3002</p>"},{"location":"development/vim/ideavim.html","title":"IdeaVim","text":"<p>Plugins:</p> <ul> <li>IdeaVim</li> <li>IdeaVimExtension<ul> <li><code>set keep-english-in-normal-and-restore-in-insert</code></li> </ul> </li> <li>AceJump</li> </ul>"},{"location":"development/vim/ideavim.html#_1","title":"\u5e38\u7528\u8a2d\u5b9a","text":""},{"location":"development/vim/ideavim.html#vim","title":"\u8b93 vim \u526a\u8cbc\u7c3f\u8207\u7cfb\u7d71\u5171\u7528","text":"<pre><code>set clipboard=unnamed\n</code></pre>"},{"location":"development/vim/ideavim.html#acejump","title":"AceJump","text":"<p>Ctrl+; Ctrl+Option+;</p>"},{"location":"development/vim/ideavim.html#ideavim-plugins","title":"IdeaVim Plugins","text":""},{"location":"development/vim/ideavim.html#surround","title":"surround","text":"<pre><code>set surround\n</code></pre>"},{"location":"development/vim/ideavim.html#nerdtree","title":"NERDTree","text":"<pre><code>set NERDTree\n</code></pre>"},{"location":"development/vim/vscode.html","title":"VSCode","text":""},{"location":"development/vim/vscode.html#normal-mode","title":"\u9032\u5165 normal mode \u6642\uff0c\u81ea\u52d5\u5207\u63db\u82f1\u6587\u8f38\u5165\u6cd5","text":"<p>\u5b89\u88dd im-select</p> <pre><code>brew tap daipeihust/tap\nbrew install im-select\n</code></pre> <p>\u9032\u5230\u8a2d\u5b9a\u756b\u9762</p> <ul> <li>Vim &gt; Auto Switch Input Method: Default IM <code>com.apple.keylayout.ABC</code></li> <li>Vim &gt; Auth Switch Input Method: Enable <code>checked</code></li> <li>Vim &gt; Auth Switch Input Method: Obtain IMCmd <code>/opt/homebrew/bin/im-select</code></li> <li>Vim &gt; Auth Switch Input Method: Switch IMCms <code>/opt/homebrew/bin/im-select {im}</code></li> </ul>"},{"location":"development/vim/zsh.html","title":"zsh","text":"<ol> <li>\u5b89\u88dd oh-my-zsh</li> <li>\u555f\u7528 <code>vim-mode</code> plugin <pre><code>$ vim ~/.zshrc\n\nplugins=(.. vi-mode)\n</code></pre>     \u5728 <code>~/.zshrc</code> \u6a94\u6848\u7684 <code>plugins</code> \u4e2d\u52a0\u4e0a <code>vi-mode</code> \u91cd\u65b0\u555f\u52d5\u3002</li> <li>\u8a2d\u5b9a\u8abf\u6574\u6e38\u6a19\u6a23\u5f0f: <pre><code># in .zshrc\n\n...\nVI_MODE_SET_CURSOR=true\n</code></pre></li> </ol>"},{"location":"domain-driven-design/01-crunching-knowledge.html","title":"Ch 1: Crunching Knowledge","text":"<p>\u5341\u516b\u4e16\u7d00\uff0c\u4e2d\u570b\u7e6a\u88fd\u7684\u4e16\u754c\u5730\u5716\u3002</p> <ul> <li>model \u662f\u4e00\u7a2e\u7c21\u5316\uff0c\u628a\u8207\u554f\u984c\u76f8\u95dc\u7684\u65b9\u9762\u62bd\u8c61\u51fa\u4f86\uff0c\u4e26\u4e14\u5ffd\u7565\u7121\u95dc\u7684\u7d30\u7bc0\u3002<ul> <li>it is a rigorously organized and selective abstraction of that knowledge.</li> </ul> </li> <li>domain model \u76ee\u6a19\u4e0d\u662f\u8981\u76e1\u53ef\u80fd\u5efa\u7acb\u4e00\u500b\u7b26\u5408\u73fe\u5be6\u7684\u6a21\u578b\u3002\u5efa\u6a21\u7684\u4eba\u61c9\u8996\u6a21\u578b\u7684\u9700\u6c42\u6311\u9078\u5177\u9ad4\u7684\u6a21\u578b\u3002</li> </ul>"},{"location":"domain-driven-design/01-crunching-knowledge.html#pcb","title":"\u5370\u5237\u96fb\u8def\u677f(PCB)\u7684\u5c08\u7528\u8edf\u9ad4","text":"<p>domain model \u662f\u9010\u6b65\u6f14\u5316\u3002</p> <p>net (\u5c0e\u7dda) \u53ef\u4ee5\u9023\u63a5\u4efb\u610f\u6578\u91cf\u7684 chip (\u5143\u4ef6)</p> <p></p> <p>\u6709\u4e86 domain model\uff0c\u4ee5\u975e\u6b63\u5f0f\u7684 object interaction diagrams \u8a0e\u8ad6\u4e00\u4e9b\u60c5\u5883</p> <p></p> <p>\u6839\u64da\u5716\uff0c\u8a0e\u8ad6\u5f8c\uff0c\u66f4\u65b0\u4e86 model</p> <p></p> <p>\u6839\u64da model \u8a0e\u8ad6\u60c5\u5883</p> <p></p> <p>\u76ee\u6a19\u8981\u627e\u51fa\u6700\u9577 delay \u7684\u8def\u5f91\uff0c\u8d85\u904e 2 \u6216 3 hops \u7684\u90fd\u8981\u627e\u51fa\u4f86\u3002\u5e36\u5165\u7d93\u904e net \u6703\u6709 one hop \u7684\u77e5\u8b58\uff0c\u66f4\u65b0\u5716\u3002</p> <p></p> <p>\u70ba\u4e86\u91d0\u6e05 push \u7684\u6982\u5ff5\uff0c\u900f\u904e\u4e0b\u5716:</p> <p></p> <p>\u8207\u5c08\u5bb6\u8a0e\u8ad6\uff0c\u4ed6\u5011\u6c92\u6709\u5f88\u5b8c\u5168\u7406\u89e3\u5716\u7684\u610f\u7fa9\uff0c\u4e0d\u904e\u5c0d\u65bc\u5efa\u6a21\u9019\u4e5f\u4e0d\u91cd\u8981\uff0c\u53ef\u4ee5\u5ffd\u7565\u3002</p> <p>\u4e0d\u65b7\u8a0e\u8ad6\u5f8c\uff0c\u7522\u51fa\u4e86\u4ee5\u4e0b\u7684\u521d\u671f\u6a21\u578b\u7684\u985e\u5225\u5716:</p> <p></p> <p>\u7136\u5f8c\u64da\u6b64\u6a21\u578b\uff0c\u958b\u767c\u7d14 java \u7684 prototype (\u4e0d\u5305\u542b db, ui \u7b49)\u3002\u900f\u904e prototype \u8b93\u5c08\u5bb6\u7406\u89e3\u6a21\u578b\u7684\u5177\u9ad4\u6db5\u7fa9\u3002</p> <p>\u512a\u9ede:</p> <ul> <li>\ud83d\udc4d \u6a21\u578b\u5c07\u300c\u540c\u7fa9\u8a5e\u300d\u8207\u300c\u8a9e\u8a00\u63cf\u5beb\u7684\u5fae\u5c0f\u5dee\u7570\u300d\u505a\u4e86\u7d71\u4e00\u3002</li> <li>\ud83d\udc4d \u6a21\u578b\u6392\u9664\u4e86\u8207\u554f\u984c\u6c92\u6709\u76f4\u63a5\u95dc\u4fc2\u7684\u4e8b\u5be6\u3002</li> </ul>"},{"location":"domain-driven-design/01-crunching-knowledge.html#_1","title":"\u6709\u6548\u5efa\u6a21\u7684\u8981\u7d20","text":"<ul> <li>Binding the model and the implementation</li> <li>Cultivating a language based on the model: \u5c08\u5bb6\u8207\u958b\u767c\u4eba\u54e1\u57fa\u65bc\u540c\u4e00\u500b\u6a21\u578b\u8a0e\u8ad6\uff0c\u53ef\u4ee5\u6e1b\u5c11\u5339\u6b64\u8a8d\u77e5\u3002</li> <li>Developing a knowledge-rich model</li> <li>Distilling the model: \u91cd\u8981\u7684\u6771\u897f\u52a0\u5230 model \u4e2d\uff0c\u4e0d\u91cd\u8981\u7684\u6771\u897f\u5f9e model \u4e2d\u79fb\u9664\u3002</li> <li>Brainstorming and experimenting: \u57fa\u65bc\u6a21\u578b\uff0c\u53ef\u4ee5\u9032\u884c\u8166\u529b\u6fc0\u76ea\u8207\u6c99\u76e4\u63a8\u6f14\u3002</li> </ul>"},{"location":"domain-driven-design/01-crunching-knowledge.html#knowledge-rich-design","title":"Knowledge-Rich Design","text":""},{"location":"domain-driven-design/01-crunching-knowledge.html#example-extracting-a-hidden-concept","title":"Example: Extracting a Hidden Concept","text":"<p>\u9810\u7d04\u4e00\u8258\u8239\u5728\u4e00\u8d9f\u822a\u7a0b(voyage)\u8981\u8f09\u904b\u7684\u8ca8\u7269(cargo)</p> <p></p> <p>\u5be6\u4f5c\u53ef\u80fd\u5982\u4e0b:</p> <pre><code>public int makeBooking(Cargo cargo, Voyage voyage) {  \n    int confirmation = orderConfirmationSequence.next();  \n    voyage.addCargo(cargo, confirmation);  \n    return confirmation;  \n}\n</code></pre> <p>\u56e0\u70ba\u7e3d\u662f\u6703\u6709\u4eba\u5728\u6700\u5f8c\u4e00\u523b\u53d6\u6d88\u8a02\u55ae\uff0c\u56e0\u6b64\u822a\u904b\u696d\u4e00\u822c\u90fd\u6703\u63a5\u53d7\u6bd4\u627f\u8f09\u80fd\u529b\u8981\u591a\u4e00\u4e9b\u7684\u8ca8\u7269\uff0c\u7a31\u4e4b\u70ba\u8d85\u8a02(overbooking)\u3002\u9019\u662f\u822a\u904b\u696d\u7684\u57fa\u672c\u7b56\u7565\uff0c\u5f9e\u4e8b\u822a\u904b\u696d\u7684\u696d\u52d9\u4eba\u54e1\u90fd\u6703\u77e5\u9053\uff0c\u4f46\u662f\u8edf\u9ad4\u958b\u767c\u4eba\u54e1\uff0c\u4e26\u4e0d\u662f\u6bcf\u500b\u4eba\u90fd\u6703\u77e5\u9053\u3002</p> <p>\u9700\u6c42\u6587\u4ef6\u5c07\u6703\u5305\u542b\u4e00\u53e5\u8a71\uff1aAllow 10% overbooking.</p> <p>\u985e\u5225\u5716\u6703\u9577\u9019\u6a23:</p> <p></p> <p>\u5be6\u4f5c\u53ef\u80fd\u5982\u4e0b:</p> <pre><code>public int makeBooking(Cargo cargo, Voyage voyage) {  \n    double maxBooking = voyage.capacity() * 1.1;  \n    if ((voyage.bookedCargoSize() + cargo.size()) &gt; maxBooking)  \n        return \u20131;  \n    int confirmation = orderConfirmationSequence.next();  \n    voyage.addCargo(cargo, confirmation);  \n    return confirmation;  \n}\n</code></pre> <p>\u6709\u4e00\u500b\u91cd\u8981\u7684\u696d\u52d9\u898f\u5247\u88ab\u96b1\u85cf\u5728\u7a0b\u5f0f\u78bc\u4e2d\u3002</p> <ul> <li>\ud83d\udc4e \u4e0d\u662f\u6240\u6709\u696d\u52d9\u5c08\u5bb6\u90fd\u6703\u8b80\u7a0b\u5f0f\u78bc\u4f86\u6aa2\u67e5\u898f\u5247\u3002\u5373\u4f7f\u6709\u958b\u767c\u4eba\u54e1\u5e6b\u52a9\uff0c\u4e5f\u5f88\u96e3\u5b8c\u6210\u4efb\u52d9\u3002</li> <li>\ud83d\udc4e \u975e\u696d\u52d9\u7684\u6280\u8853\u4eba\u54e1\uff0c\u5f88\u96e3\u5c07\u9700\u6c42\u6587\u4ef6\u8207\u7a0b\u5f0f\u78bc\u9023\u7d50\u8d77\u4f86\u3002</li> </ul> <p>\u5c07\u8d85\u8a02\u898f\u5247\uff0c\u900f\u904e Policy \u7684\u65b9\u5f0f<sup>1</sup>\uff0c\u66b4\u9732\u5728 domain model \u4e0a\u3002</p> <p> </p> <ul> <li>\u2728 \u958b\u767c\u4eba\u54e1\u8207\u76f8\u95dc\u4eba\u54e1\u5fc5\u9808\u7406\u89e3 overbooking \u7684\u672c\u8cea\uff0c\u77e5\u9053\u4ed6\u662f\u91cd\u8981\u7684\u696d\u52d9\u898f\u5247\uff0c\u800c\u975e\u7a0b\u5f0f\u78bc\u4e2d\u4e00\u500b\u4e0d\u8d77\u773c\u7684\u63cf\u8ff0\u3002</li> <li>\u2728 \u958b\u767c\u4eba\u54e1\u53ef\u4ee5\u5411\u5c08\u5bb6\u5c55\u793a model\uff0c\u4e26\u5728\u5e36\u9818\u4e0b\u53ef\u4ee5\u7406\u89e3\u7a0b\u5f0f\u78bc\u3002</li> </ul> <p>\u7a0b\u5f0f\u78bc\u4fee\u6539\u5982\u4e0b:</p> <pre><code>public int makeBooking(Cargo cargo, Voyage voyage) {  \n    if (!overbookingPolicy.isAllowed(cargo, voyage)) return \u20131;  \n    int confirmation = orderConfirmationSequence.next();  \n    voyage.addCargo(cargo, confirmation);  \n    return confirmation;  \n}\n\nclass OverbookingPolicy ...\n    public boolean isAllowed(Cargo cargo, Voyage voyage) {  \n        return (cargo.size() + voyage.bookedCargoSize()) &lt;= (voyage.capacity() * 1.1);  \n    }\n</code></pre> <p>I am not recommending that such an elaborate design be applied to every detail of the domain</p> <p>\u4f5c\u8005\u4e0d\u5efa\u8b70\u5c07\u9019\u6a23\u7684\u7cbe\u7d30\u8a2d\u8a08\u5957\u7528\u5230 domain \u7684\u6bcf\u500b\u7d30\u7bc0\u4e2d\u3002(\u7b2c\u5341\u4e94\u7ae0\u5c07\u9032\u884c\u8a0e\u8ad6)</p> <ol> <li> <p>\u5373 strategy pattern\u00a0\u21a9</p> </li> </ol>"},{"location":"domain-driven-design/02-communication-and-the-use-of-language.html","title":"Ch 2: Communication and the Use of Language","text":"<p>Ubiquitous Language: \u5718\u968a (\u9818\u57df\u5c08\u5bb6\u3001\u958b\u767c\u5718\u968a\u7b49) \u4f7f\u7528\u7684\u5171\u540c\u8a9e\u8a00\u3002</p>"},{"location":"domain-driven-design/02-communication-and-the-use-of-language.html#example-working-out-a-cargo-router","title":"Example: Working out a Cargo Router","text":"<p>\u4ee5\u4e0b\u5169\u7a2e\u4e0d\u540c\u5c0d\u8a71\u65b9\u5f0f: (\u9019\u88e1\u5f15\u7528\u539f\u6587\uff0c\u539f\u6c41\u539f\u5473)</p> <p>Scenario 1: Minimal Abstraction of the Domain</p> <p></p> <p>User: So when we change the customs clearance point (\u5831\u95dc\u5730\u9ede), we need to redo the whole routing plan.</p> <p>Developer: Right. We\u2019ll delete all the rows in the shipment table with that cargo id, then we\u2019ll pass the origin, destination, and the new customs clearance point into the Routing Service, and it will re-populate the table. We\u2019ll have to have a Boolean in the Cargo so we\u2019ll know there is data in the shipment table.</p> <p>User: Delete the rows? OK, whatever. Anyway, if we didn\u2019t have a customs clearance point at all before, we\u2019ll have to do the same thing.</p> <p>Developer: Sure, anytime you change the origin, destination, or customs clearance point (or enter one for the first time), we\u2019ll check to see if we have shipment data and then we\u2019ll delete it and then let the Routing Service regenerate it.</p> <p>User: Of course, if the old customs clearance just happened to be the right one, we wouldn\u2019t want to do that.</p> <p>Developer: Oh, no problem. It\u2019s easier to just make the Routing Service redo the loads and unloads every time.</p> <p>User: Yes, but it\u2019s extra work for us to make all the supporting plans for a new itinerary, so we don\u2019t want to reroute unless the change necessitates it.</p> <p>Developer: Ugh. Well, then, if you are entering a customs clearance point for the first time, we\u2019ll have to query the table to find the old derived customs clearance point, and then compare it to the new one. Then we\u2019ll know if we need to redo it. </p> <p>User: You won\u2019t have to worry about this on origin or destination, since the itinerary would always change then.</p> <p>Developer: Good. We won\u2019t.</p> <p>Scenario 2: Domain Model Enriched to Support Discussion </p> <p></p> <p>User: So when we change the customs clearance point, we need to redo the whole routing plan.</p> <p>Developer: Right. When you change any of the attributes in the Route Specification, we\u2019ll delete the old Itinerary (\u822a\u7dda) and ask the Routing Service to generate a new one based on the new Route Specification. </p> <p>User: If we hadn\u2019t specified a customs clearance point at all before, we\u2019ll have to do that at the same time.</p> <p>Developer: Sure, anytime you change anything in the Route Spec, we\u2019ll regenerate the Itinerary. That includes entering something for the first time.</p> <p>User: Of course, if the old customs clearance just happened to be the right one, we wouldn\u2019t want to do that.</p> <p>Developer: Oh, no problem. It\u2019s easier to just make the Routing Service redo the Itinerary every time. </p> <p>User: Yes, but it\u2019s extra work for us to make all the supporting plans for a new Itinerary, so we don\u2019t want to reroute unless the change necessitates it.</p> <p>Developer: Oh. Then we\u2019ll have to add some functionality to the Route Specification. Then, whenever you change anything in the Spec, we\u2019ll see if the Itinerary still satisfies the Specification. If it doesn\u2019t, we\u2019ll have the Routing Service regenerate the Itinerary.</p> <p>User: You won\u2019t have to worry about this on origin or destination, since the Itinerary would always change then.</p> <p>Developer: Fine, but it will be simpler for us to just do the comparison every time. The Itinerary will only be generated when the Route Specification is no longer satisfied.</p> <p>If sophisticated domain experts don\u2019t understand the model, there is something wrong with the model.</p> <p></p>"},{"location":"domain-driven-design/02-communication-and-the-use-of-language.html#written-design-documents","title":"Written Design Documents","text":"<ul> <li>\u6587\u4ef6\u61c9\u4f5c\u70ba\u7a0b\u5f0f\u78bc\u8207\u53e3\u982d\u4ea4\u6d41\u7684\u88dc\u5145<ul> <li>\u8b80\u8005\u7121\u6cd5\u6d88\u5316\u7a0b\u5f0f\u78bc\u7684\u5404\u7a2e\u7d30\u7bc0</li> <li>\u7a0b\u5f0f\u78bc\u884c\u70ba\u660e\u78ba\u4e0d\u6a21\u7cca\uff0c\u4f46\u4e0d\u4ee3\u8868\u6211\u5011\u53ef\u4ee5\u6e05\u695a\u660e\u66b8\u7684\u770b\u61c2\u4ed6\u7684\u884c\u70ba</li> <li>\u7a0b\u5f0f\u78bc\u5c0d\u65bc\u8868\u9054\u5176\u80cc\u5f8c\u7684\u610f\u7fa9\u6709\u56f0\u96e3</li> <li>A document shouldn't try to do what the code already does well.</li> </ul> </li> <li>Documents Should Work for a Living and Stay Current <ul> <li>A document must be involved in project activities.<ul> <li>\u6587\u4ef6\u4e0a\u7684\u7528\u8a9e\uff0c\u61c9\u7528\u5728\u5e73\u5e38\u7684\u4ea4\u6d41\u8207\u7a0b\u5f0f\u78bc\u4e2d\u3002</li> </ul> </li> </ul> </li> </ul>"},{"location":"domain-driven-design/02-communication-and-the-use-of-language.html#explanatory-models","title":"Explanatory Models","text":"<p>Example: Shipping Operations and Routes</p> <p>\u985e\u5225\u5716:</p> <p></p> <p>explanatory model: \u53ef\u4ee5\u5e6b\u52a9\u5718\u968a\u7406\u89e3\u985e\u5225\u5716\u8981\u8868\u9054\u7684\u5be6\u969b\u610f\u7fa9\u3002</p> <p></p> <ul> <li>\u7dda\u6bb5\u4ee3\u8868<ul> <li>Port Operation (\u6e2f\u53e3\u88dd\u8ca8\u3001\u5378\u8ca8)</li> <li>\u8ca8\u7269\u5728\u5730\u9762\u4e0a\u7684\u5b58\u653e</li> <li>\u8ca8\u7269\u5728\u8239\u4e0a\u7684\u904b\u8f38</li> </ul> </li> </ul>"},{"location":"domain-driven-design/03-binding-model-and-implementation.html","title":"Ch 3: Binding Model and Implementation","text":"<p>\u661f\u76e4: \u624b\u6301\u5b87\u5b99\u6a21\u578b\uff0c\u7528\u4ee5\u8a08\u7b97\u5929\u9ad4\u4f4d\u7f6e\u3002(\u53c3\u8003: wiki - \u661f\u76e4)</p>"},{"location":"domain-driven-design/03-binding-model-and-implementation.html#example-from-procedural-to-model-driven","title":"Example: From Procedural to MODEL-DRIVEN","text":"<ul> <li>Chip A \u6709\u56db\u500b pin\uff0c\u5206\u5225\u70ba 0, 1, 2, 3</li> <li>\u900f\u904e xyz0, xyz1, xyz2, xyz3 \u9019\u56db\u689d net \u9023\u63a5\u5230\u53e6\u4e00\u500b chip B \u7684\u56db\u500b pin 0, 1, 2, 3</li> <li>xyz0, xyz1, xyz2, xyz3 \u69cb\u6210 bus</li> </ul>"},{"location":"domain-driven-design/03-binding-model-and-implementation.html#a-mechanistic-design","title":"A Mechanistic Design","text":""},{"location":"domain-driven-design/03-binding-model-and-implementation.html#a-model-driven-design","title":"A Model-Driven Design","text":"MainTestsAbstractNetBusNetLayoutRuleNetRepositoryBusRepositoryNetListImportInferredBusFactoryNetRuleExportnet_list.txtbus_rules.txtnet_rules.txt <pre><code>public static void assignBusRule(String busName, String ruleType,\n                                 double parameter) {\n    Bus bus = BusRepository.getByName(busName).orElseThrow();\n    bus.assignRule(new LayoutRule(ruleType, parameter));\n}\n\n@SneakyThrows\npublic static void main(String[] args) {\n    Collection&lt;Net&gt; nets = NetListImport.read(new File(\"net_list.txt\"));\n    NetRepository.addAll(nets);\n    Collection&lt;Bus&gt; buses = InferredBusFactory.groupIntoBuses(nets);\n    BusRepository.addAll(buses);\n\n    List&lt;String&gt; lines = Files.readAllLines(new File(\"bus_rules.txt\").toPath());\n    lines.subList(2, lines.size()).forEach(line -&gt; {\n        String[] parts = line.split(\"\\\\s+\");\n        assignBusRule(parts[0], parts[1], Double.parseDouble(parts[2]));\n    });\n\n    NetRuleExport.write(new File(\"net_rules.txt\"), NetRepository.allNets());\n}\n</code></pre> <pre><code>@Test\nvoid testBusRuleAssignment() {\n    Net a0 = new Net(\"a0\");\n    Net a1 = new Net(\"a1\");\n    Bus a = new Bus(\"a\"); // Bus is not conceptually dependent\n    a.addNet(a0);         // on name-based recognition, and so\n    a.addNet(a1);         // its tests should not be either.\n\n    LayoutRule minWidth4 = new LayoutRule(MIN_WIDTH, 4);\n    a.assignRule(minWidth4);\n\n    assertThat(a0.getAssignedRules()).contains(minWidth4);\n    assertThat(a0.getRule(MIN_WIDTH)).isEqualTo(minWidth4);\n    assertThat(a1.getRule(MIN_WIDTH)).isEqualTo(minWidth4);\n}\n</code></pre> <pre><code>abstract class AbstractNet {\n    private final Set&lt;LayoutRule&gt; rules = new HashSet&lt;&gt;();\n\n    public void assignRule(LayoutRule rule) {\n        rules.add(rule);\n    }\n\n    public Set&lt;LayoutRule&gt; getAssignedRules() {\n        return rules.stream().collect(Collectors.toUnmodifiableSet());\n    }\n}\n</code></pre> <pre><code>@RequiredArgsConstructor\n@Getter\n@ToString\nclass Bus extends AbstractNet {\n    private final String name;\n\n    private final List&lt;Net&gt; nets = new ArrayList&lt;&gt;();\n\n    public void addNet(Net net) {\n        net.setBus(this);\n        nets.add(net);\n    }\n}\n</code></pre> <pre><code>@RequiredArgsConstructor\n@Setter\n@Getter\n@ToString(exclude = \"bus\")\nclass Net extends AbstractNet {\n    private final String name;\n\n    private Bus bus;\n\n    @Override\n    public Set&lt;LayoutRule&gt; getAssignedRules() {\n        return Stream.concat(\n                super.getAssignedRules().stream(),\n                bus.getAssignedRules().stream()\n        ).collect(Collectors.toUnmodifiableSet());\n    }\n\n    public Optional&lt;LayoutRule&gt; getRule(String ruleName) {\n        return getAssignedRules()\n                .stream()\n                .filter(rule -&gt; rule.getName().equals(ruleName))\n                .findFirst();\n    }\n}\n</code></pre> <pre><code>@Getter\n@RequiredArgsConstructor\nclass LayoutRule {\n    private final String name;\n\n    private final double value;\n}\n</code></pre> <pre><code>class NetRepository {\n\n    private static final Collection&lt;Net&gt; nets = new ArrayList&lt;&gt;();\n\n    private NetRepository() {\n    }\n\n    public static void addAll(Collection&lt;Net&gt; nets) {\n        NetRepository.nets.addAll(nets);\n    }\n\n    public static Collection&lt;Net&gt; allNets() {\n        return List.copyOf(nets);\n    }\n}\n</code></pre> <pre><code>class BusRepository {\n\n    private static final Collection&lt;Bus&gt; buses = new ArrayList&lt;&gt;();\n\n    private BusRepository() {\n    }\n\n    public static Optional&lt;Bus&gt; getByName(String busName) {\n        return buses.stream().filter(bus -&gt; bus.getName().equals(busName)).findFirst();\n    }\n\n    public static void addAll(Collection&lt;Bus&gt; buses) {\n        BusRepository.buses.addAll(buses);\n    }\n}\n</code></pre> <pre><code>class NetListImport {\n    private NetListImport() {\n    }\n\n    public static Collection&lt;Net&gt; read(File file) {\n        try {\n            List&lt;String&gt; lines = Files.readAllLines(file.toPath());\n            List&lt;String&gt; netsLines = lines.subList(2, lines.size());\n            return netsLines.stream().map(\n                    line -&gt; new Net(line.substring(0, line.indexOf(' ')))\n            ).toList();\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }\n}\n</code></pre> <pre><code>class InferredBusFactory {\n    private static final Pattern NET_NAME_PATTERN = Pattern.compile(\"(.+)(\\\\d+)\");\n\n    private InferredBusFactory() {\n    }\n\n    public static Collection&lt;Bus&gt; groupIntoBuses(Collection&lt;Net&gt; nets) {\n        Map&lt;String, Bus&gt; busMap = new HashMap&lt;&gt;();\n        nets.forEach(net -&gt; {\n            Matcher matcher = NET_NAME_PATTERN.matcher(net.getName());\n            if (matcher.find()) {\n                String busName = matcher.group(1);\n                if (!busMap.containsKey(busName)) {\n                    busMap.put(busName, new Bus(busName));\n                }\n                busMap.get(busName).addNet(net);\n            }\n        });\n        return busMap.values();\n    }\n}\n</code></pre> <pre><code>class NetRuleExport {\n    private NetRuleExport() {\n    }\n\n    public static void write(File file, Collection&lt;Net&gt; nets) {\n        List&lt;String[]&gt; lineTokens = new ArrayList&lt;&gt;();\n        StringBuilder sb = new StringBuilder();\n        try {\n            nets.forEach(net -&gt; net.getAssignedRules().forEach(\n                    rule -&gt; lineTokens.add(new String[] {\n                            net.getName(), rule.getName(), String.valueOf(rule.getValue()),\n                            })\n            ));\n            int col1Width = Math.max(lineTokens.stream().map(tokens -&gt; tokens[0].length())\n                                               .max(Integer::compareTo)\n                                               .orElse(0), \"Net Name\".length());\n            int col2Width = Math.max(lineTokens.stream().map(tokens -&gt; tokens[1].length())\n                                               .max(Integer::compareTo)\n                                               .orElse(0), \"Rule Type\".length());\n            int col3Width = Math.max(lineTokens.stream().map(tokens -&gt; tokens[2].length())\n                                               .max(Integer::compareTo)\n                                               .orElse(0), \"Parameters\".length());\n\n            sb.append(String.format(\"%-\" + col1Width + \"s    %-\" + col2Width + \"s    %-\" + col3Width + \"s\\n\",\n                                    \"Net Name\", \"Rule Type\", \"Parameters\"));\n            sb.append(\"-\".repeat(col1Width))\n              .append(\"    \")\n              .append(\"-\".repeat(col2Width))\n              .append(\"    \")\n              .append(\"-\".repeat(col3Width))\n              .append(\"\\n\");\n            DecimalFormat df = new DecimalFormat(\"#.##\");\n            lineTokens.forEach(tokens -&gt; sb.append(\n                    String.format(\"%-\" + col1Width + \"s    %-\" + col2Width + \"s    %-\" + col3Width + \"s\\n\",\n                                  tokens[0], tokens[1], df.format(Double.parseDouble(tokens[2])))));\n\n            Files.writeString(file.toPath(), sb.toString());\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }\n}\n</code></pre> <pre><code>Net Name    Component.Pin\n--------    -------------\nxyz0        A.0, B.0\nxyz1        A.1, B.1\nxyz2        A.2, B.2\n</code></pre> <pre><code>Bus Name    Rule Type        Parameters\n--------    -------------    ----------\nxyz         min_linewidth    5\nxyz         max_delay        15\n</code></pre> <pre><code>Net Name    Rule Type        Parameters\n--------    -------------    ----------\nxyz0        min_linewidth    5         \nxyz0        max_delay        15        \nxyz1        min_linewidth    5         \nxyz1        max_delay        15        \nxyz2        min_linewidth    5         \nxyz2        max_delay        15        \n</code></pre> <p>\u62fc\u62fc\u6e4a\u6e4a\u7684\u7248\u672c\uff0c\u50c5\u63d0\u4f9b\u66f8\u672c\u7bc4\u4f8b\u7684\u4e00\u500b\u793a\u610f\u3002\u9084\u6709\u5f88\u5927\u7684\u6539\u9032\u7a7a\u9593\uff0c\u4e26\u64b0\u5beb\u5c0d\u61c9\u7684\u55ae\u5143\u6e2c\u8a66\u3002</p>"},{"location":"domain-driven-design/03-binding-model-and-implementation.html#example-model","title":"Example: \u9020\u6210\u4f7f\u7528\u8005\u6df7\u6dc6\u7684 model","text":"<p>\u4f7f\u7528\u8005\u8a8d\u70ba Internet Explorer \u7684\u66f8\u7c64\u662f\u4e00\u500b\u7db2\u7ad9\u540d\u7a31\u7684\u6e05\u55ae\uff0c\u4e14\u5728\u4e0d\u540c\u7684 session \u4fdd\u6301\u4e0d\u8b8a\u3002\u4f46\u662f\uff0c\u66f8\u7c64\u88ab\u5be6\u4f5c\u6210\u4e00\u500b\u5305\u542b URL \u7684\u6a94\u6848\uff0c\u6a94\u6848\u540d\u7a31\u662f\u66f8\u7c64\u7684\u540d\u7a31\u3002\u56e0\u6b64\uff0c\u7576\u66f8\u7c64\u7684\u540d\u7a31\u5305\u542b Windows \u6a94\u540d\u4e0d\u5141\u8a31\u7684\u5b57\u5143\u6642\uff0c\u5c31\u6703\u767c\u751f\u554f\u984c\u3002 \u4f8b\u5982: \u4f7f\u7528\u8005\u65b0\u589e\u66f8\u7c64 \"Laziness: The Secret to Happiness\" \u5c07\u770b\u5230\u932f\u8aa4\u8a0a\u606f \"A filename cannot contain any of the following characters:  / : * ? \" &lt; &gt; |\"\u3002\u9019\u6703\u8b93\u4f7f\u7528\u8005\u56f0\u60d1\uff0cfilename \u6307\u5f97\u662f\u4ec0\u9ebc\u610f\u601d\u3002\u53e6\u4e00\u7a2e\u505a\u6cd5\uff0c\u61c9\u7528\u7a0b\u5f0f\u53ef\u4ee5\u9ed8\u9ed8\u5730\u5c07\u4e0d\u5408\u6cd5\u7684\u5b57\u5143\u6e05\u6389\uff0c\u96d6\u7136\u4e0d\u6703\u6709\u592a\u5927\u7684\u50b7\u5bb3\uff0c\u4f46\u9019\u4e0d\u662f\u4f7f\u7528\u8005\u671f\u671b\u7684\u7d50\u679c\u3002</p> <p>\u5c07 analysis model / user model \u8207 design model / implementation model \u7d81\u5b9a\u5728\u4e00\u8d77\uff0c\u53ef\u4ee5\u907f\u514d\u9019\u7a2e\u60c5\u6cc1\u3002</p> <p>\u5982\u679c\u66f8\u7c64\u53ea\u662f\u5305\u542b URL \u7684\u6a94\u6848\u96c6\u5408\uff0c\u4f7f\u7528\u8005\u61c9\u8a72\u77e5\u9053\u3002\u4f7f\u7528\u8005\u4e5f\u53ef\u4ee5\u56e0\u6b64\u5229\u7528\u4ed6\u5c0d\u6a94\u6848\u7ba1\u7406\u7684\u6982\u5ff5\u7ba1\u7406\u66f8\u7c64\u3002</p> <p>\u8b93\u4f7f\u7528\u8005\u4e86\u89e3 model\uff0c\u6709\u52a9\u65bc\u8b93\u4ed6\u5011\u767c\u6398\u66f4\u591a\u61c9\u7528\u7a0b\u5f0f\u7684\u6f5b\u80fd\u3002</p>"},{"location":"domain-driven-design/04-isolating-the-domain.html","title":"Ch 4: Isolating the Domain","text":""},{"location":"domain-driven-design/04-isolating-the-domain.html#layered-architecture","title":"Layered Architecture","text":"<p>Layered Architecture \u6709\u5f88\u591a\u8b8a\u9ad4\uff0c\u4e0d\u904e\uff0c\u5c07 Domain Layer \u5206\u96e2\u51fa\u4f86\u662f\u5be6\u4f5c Domain-Driven Design \u7684\u95dc\u9375\u3002</p>"},{"location":"domain-driven-design/04-isolating-the-domain.html#partitioning-online-banking-functionality-into-layers","title":"\u7bc4\u4f8b: Partitioning Online Banking Functionality into Layers","text":"<p>\u61c9\u7528\u7a0b\u5f0f\u63d0\u4f9b\u9280\u884c\u5404\u7a2e\u529f\u80fd\uff0c\u9019\u88e1\u4f7f\u7528\u8f49\u5e33(funds transfer)\u70ba\u4f8b\u3002\u4f7f\u7528\u8005\u53ef\u4ee5\u8f38\u5165\u6216\u9078\u64c7\u5169\u7d44\u5e33\u865f\uff0c\u586b\u5beb\u8f49\u5e33\u91d1\u984d\uff0c\u7136\u5f8c\u958b\u59cb\u8f49\u5e33\u3002</p> <p>\u7bc4\u4f8b\u7701\u7565\u4e00\u4e9b\u8907\u96dc\u7684\u7d30\u7bc0\uff0c\u4ee5\u5229\u8aaa\u660e\u3002</p> <p></p> <p>Note</p> <ul> <li>\u8655\u7406 business rule \u7684\u662f domain layer \u800c\u975e application layer</li> <li>business rule: Every credit has a matching debit</li> </ul>"},{"location":"domain-driven-design/04-isolating-the-domain.html#the-smart-ui-anti-pattern","title":"The Smart UI (Anti-Pattern)","text":"<p>Smart UI \u5728\u4f7f\u7528\u8005\u4ecb\u9762\u4e2d\u5be6\u4f5c\u6240\u6709\u7684\u696d\u52d9\u908f\u8f2f\u3002</p> <p>\u512a\u9ede:</p> <ul> <li>\u7c21\u55ae\uff0c\u5c0d\u5c08\u6848\u6210\u54e1\u7684\u6280\u8853\u8981\u6c42\u4f4e\uff0c\u77ed\u6642\u9593\u7684\u5c08\u6848\u53ef\u4ee5\u5f88\u5feb\u901f\u958b\u767c</li> <li>\u5feb\u901f\u56de\u61c9\u4fee\u6539\u7684\u8981\u6c42</li> <li>\u9069\u7528\u958b\u767c\u9031\u671f\u77ed\uff0c\u5c0f\u578b\u7684\u5c08\u6848</li> </ul> <p>\u7f3a\u9ede:</p> <ul> <li>\u4e0d\u5c07 Domain \u8207 UI \u5206\u96e2\uff0c\u5c31\u7121\u6cd5\u5be6\u4f5c Domain-Driven Design <ul> <li>\u9019\u88e1\u5c07\u5176\u8996\u70ba Anti-Pattern \u7684\u4e3b\u56e0\u3002\u4f46\u61c9\u8003\u616e\u512a\u9ede\u6240\u63cf\u8ff0\u7684\u60c5\u5883\uff0c\u4e26\u975e\u6240\u6709\u60c5\u6cc1\u90fd\u9069\u7528 Domain-Driven Design\u3002</li> </ul> </li> <li>\u696d\u52d9\u908f\u8f2f\u7684\u7a0b\u5f0f\u78bc\u6c92\u6709\u91cd\u8907\u4f7f\u7528\uff0c\u7576\u6709\u91cd\u8907\u4f7f\u7528\u7684\u9700\u6c42\u6642\uff0c\u5c31\u9700\u8981\u8907\u88fd\u76f8\u540c\u7684\u7a0b\u5f0f\u78bc\u3002</li> <li>\u96a8\u8457\u5c08\u6848\u7684\u8907\u96dc\u5ea6\u589e\u52a0\uff0c\u7a0b\u5f0f\u7684\u7dad\u8b77\u96e3\u5ea6\u6703\u6025\u5287\u7684\u589e\u52a0\u3002</li> </ul>"},{"location":"domain-driven-design/05-a-model-expressed-in-software.html","title":"Ch 5: A Model Expressed in Software","text":""},{"location":"domain-driven-design/05-a-model-expressed-in-software.html#associations","title":"Associations (\u95dc\u806f)","text":"<ol> <li>bidirectional association (\u96d9\u5411\u95dc\u806f) \u5230 unidirectional association (\u55ae\u5411\u95dc\u806f)</li> </ol> <p>\u7f8e\u570b\u6709\u5f88\u591a\u4efb\u7e3d\u7d71\u3002\u570b\u5bb6\u8207\u7e3d\u7d71\u662f\u96d9\u5411\u7684\u95dc\u4fc2\u3002\u4f46\u662f\uff0c\u7576\u63d0\u5230 George Washington (\u55ac\u6cbb\u30fb\u83ef\u76db\u9813) \u6642\uff0c\u5f88\u5c11\u6703\u554f\u662f\u54ea\u500b\u570b\u5bb6\u7684\u7e3d\u7d71\u3002\u95dc\u806f\u7684\u65b9\u5411\uff0c\u53cd\u6620\u4e86\u9818\u57df\u4e2d\u81ea\u7136\u7684\u8d70\u8a2a\u50be\u5411\u3002</p> <ol> <li>qualified relationship (\u9650\u5b9a\u95dc\u4fc2)</li> </ol> <p></p> <p>\u4e00\u500b\u570b\u5bb6\u5728\u4e00\u500b\u671f\u9593\u53ea\u6703\u6709\u4e00\u4f4d\u7e3d\u7d71\u3002\u9650\u5b9a\u689d\u4ef6\u5c07\u300c\u4e00\u5c0d\u591a\u300d\u7684\u95dc\u4fc2\u7c21\u5316\u6210\u300c\u4e00\u5c0d\u4e00\u300d\u7684\u95dc\u4fc2\u3002</p>"},{"location":"domain-driven-design/05-a-model-expressed-in-software.html#brokerage-account","title":"\u7bc4\u4f8b: Brokerage Account \u4e2d\u7684\u95dc\u806f","text":"<p>\u7b26\u5408\u6a21\u578b\u7684\u4e00\u7a2e\u5be6\u4f5c:</p> <pre><code>public class BrokerageAccount {\n    String accountNumber;\n    Customer customer;\n    Set investments;\n\n    // Constructors, etc. omitted\n\n    public Customer getCustomer() {\n        return customer;\n    }\n    public Set getInvestments() {\n        return investments;\n    }\n}\n</code></pre> <p>\u540c\u6a23\u4e5f\u7b26\u5408\u6a21\u578b\uff0c\u4f46\u662f\u5f9e\u95dc\u806f\u5f0f\u8cc7\u6599\u5eab\u53d6\u51fa\u8cc7\u6599\u7684\u53e6\u4e00\u7a2e\u5be6\u4f5c:</p> <p></p> <pre><code>public class BrokerageAccount {\n    String accountNumber;\n    String customerSocialSecurityNumber;\n\n    // Omit constructors, etc.\n\n    public Customer getCustomer() {\n        String sqlQuery =\n            \"SELECT * FROM CUSTOMER WHERE\" +\n            \"SS_NUMBER='\"+customerSocialSecurityNumber+\"'\";\n        return QueryService.findSingleCustomerFor(sqlQuery);\n    }\n    public Set getInvestments() {\n        String sqlQuery =\n            \"SELECT * FROM INVESTMENT WHERE\" +\n            \"BROKERAGE_ACCOUNT='\"+accountNumber+\"'\";\n        return QueryService.findInvestmentsFor(sqlQuery);\n    }\n}\n</code></pre> <p>\u900f\u904e\u9650\u5b9a Brokerage Account \u8207 Investment \u7684\u95dc\u806f\uff0c\u7c21\u5316\u591a\u91cd\u6027\u3002\u9650\u5b9a\u6bcf\u652f\u80a1\u7968\u53ea\u80fd\u5c0d\u61c9\u4e00\u7b46\u6295\u8cc7\u3002</p> <p></p> <p>\u7a0b\u5f0f\u78bc\u8abf\u6574\u5982\u4e0b:</p> JavaSQL-based <pre><code>public class BrokerageAccount {\n    String accountNumber;\n    Customer customer;\n    Map investments;\n\n    // Omitting constructors, etc.\n\n    public Customer getCustomer() {\n        return customer;\n    }\n    public Investment getInvestment(String stockSymbol) {\n        return (Investment)investments.get(stockSymbol);\n    }\n}\n</code></pre> <pre><code>public class BrokerageAccount {\n    String accountNumber;\n    String customerSocialSecurityNumber;\n\n    //Omitting constructors, etc.\n\n    public Customer getCustomer() {\n        String sqlQuery = \"SELECT * FROM CUSTOMER WHERE SS_NUMBER='\"\n           + customerSocialSecurityNumber + \"'\";\n        return QueryService.findSingleCustomerFor(sqlQuery);\n    }\n    public Investment getInvestment(String stockSymbol) {\n        String sqlQuery = \"SELECT * FROM INVESTMENT \"\n           + \"WHERE BROKERAGE_ACCOUNT='\" + accountNumber + \"'\"\n           + \"AND STOCK_SYMBOL='\" + stockSymbol +\"'\";\n        return QueryService.findInvestmentFor(sqlQuery);\n    }\n}\n</code></pre>"},{"location":"domain-driven-design/05-a-model-expressed-in-software.html#entities-aka-reference-objects","title":"Entities (a.k.a Reference Objects)","text":"<p>\u5c07\u8207\u8b58\u5225\u76f8\u95dc\u7684\u5c6c\u6027\u8207 Entity \u95dc\u806f\u5728\u4e00\u8d77\u3002</p> <ul> <li><code>customerId</code> \u662f <code>Customer</code> \u7684\u552f\u4e00\u8b58\u5225\u78bc(identifier)\u3002</li> <li><code>name</code> \u901a\u5e38\u662f\u8b58\u5225\u4eba\u7684\u65b9\u5f0f\u4e4b\u4e00\u3002</li> <li>\u9019\u88e1\uff0c\u5c07 <code>contact phone</code> \u8207 <code>contact address</code> \u8207 <code>Customer</code> \u95dc\u806f\u5728\u4e00\u8d77\u3002<ul> <li>\u9019\u5169\u500b\u5c6c\u6027\u53d6\u6c7a\u5be6\u969b\u7684\u61c9\u7528\u3002\u4f8b\u5982 <code>Customer</code> \u6709\u5f88\u591a\u4e0d\u540c\u76ee\u7684\u7528\u9014\u7684 <code>contact phone</code>\uff0c\u6709\u53ef\u80fd\u5c31\u8207\u8b58\u5225 <code>Customer</code> \u7684\u65b9\u5f0f\u7121\u95dc\uff0c\u61c9\u5c07\u5176\u4fdd\u6301\u5728\u539f\u4f86\u7684 <code>Sales Contact</code> \u4e2d\u3002</li> </ul> </li> </ul> <p>\u5c07\u8207\u8b58\u5225\u4e0d\u76f8\u95dc\u7684\u5c6c\u6027\uff0c\u5f9e Entity \u79fb\u51fa\u3002</p>"},{"location":"domain-driven-design/05-a-model-expressed-in-software.html#value-objects","title":"Value Objects","text":"<ul> <li>value object \u662f\u4e0d\u53ef\u8b8a\u7684(immutable)\u3002</li> <li>\u4e0d\u9700\u8981 identity</li> <li>\u4e0d\u8981\u8a2d\u8a08\u5f97\u50cf Entity \u4e00\u6a23\u8907\u96dc</li> </ul> <p>Value Object \u662f\u4e00\u500b\u6982\u5ff5\u6574\u9ad4\u3002<code>street</code>, <code>city</code>, <code>state</code> \u4e0d\u61c9\u8a72\u662f <code>Person</code> \u7684\u500b\u5225\u5c6c\u6027\uff0c\u5b83\u5011\u61c9\u8a72\u662f\u4e00\u500b\u6574\u9ad4 - <code>Address</code>\u3002\u9019\u88e1 <code>Customer</code> \u70ba Entity\uff0c<code>Address</code> \u70ba Value Object\u3002</p> <p>Value Object \u63d0\u4f9b\u6700\u4f73\u5316\u7684\u4e00\u7a2e\u9078\u64c7 - Flyweight Pattern (GoF)\u3002</p>"},{"location":"domain-driven-design/05-a-model-expressed-in-software.html#service","title":"Service","text":"<p>\u5728 Ubiquitous Language \u4e2d\u8868\u9054\u64cd\u4f5c\uff0c\u662f\u52d5\u8a5e\uff0c\u800c\u975e\u540d\u8a5e\u3002</p> <p>\u4e0d\u540c Layer \u5c64\u6709\u5404\u81ea\u7684 Servie\u3002\u9019\u88e1\u8aaa\u7684\u662f Domain Layer \u4e2d\u7684 Service\u3002</p> <p>Domain Service \u907f\u514d\u5ba2\u6236\u7aef\u8207 Entity Objects, Value Objects \u8026\u5408\u3002</p>"},{"location":"domain-driven-design/05-a-model-expressed-in-software.html#_1","title":"\u7bc4\u4f8b","text":"<p>\u9280\u884c\u4f7f\u7528\u5bc4\u96fb\u5b50\u90f5\u4ef6\u7684\u61c9\u7528\u7a0b\u5f0f\uff0c\u7576\u5e33\u6236\u9918\u984d\u4f4e\u65bc\u81e8\u754c\u503c\uff0c\u5373\u767c\u9001\u901a\u77e5\u4fe1\u7d66\u5ba2\u6236\u3002</p> <p></p>"},{"location":"domain-driven-design/06-the-life-cycle-of-a-domain-object.html","title":"Ch 6: The Life Cycle of a Domain Object","text":""},{"location":"domain-driven-design/06-the-life-cycle-of-a-domain-object.html#aggregates","title":"Aggregates","text":"<p>\u5047\u8a2d\u6211\u5011\u8981\u5f9e\u8cc7\u6599\u5eab\u522a\u9664\u4e00\u500b <code>Person</code> \u7269\u4ef6\uff0c\u90a3\u9ebc\u6b64\u4eba\u7684\u59d3\u540d\u3001\u51fa\u751f\u65e5\u671f\u3001\u5de5\u4f5c\u63cf\u8ff0\u90fd\u61c9\u8a72\u88ab\u522a\u9664\u3002\u4f46\u662f\u5730\u5740\u9700\u8981\u522a\u6389\u55ce\uff1f\u6709\u53ef\u80fd\u6709\u5176\u4ed6 <code>Person</code> \u7269\u4ef6\u9084\u9700\u8981\u53c3\u8003\u5230\u9019\u500b\u5730\u5740\u3002\u4e0d\u904e\u5982\u679c\u6c92\u6709\u5462\uff1f\u90a3\u5730\u5740\u5c31\u6703\u8d8a\u7d2f\u7a4d\u8d8a\u591a\u3002</p> <p>Aggregate \u662f\u4e00\u500b\u76f8\u95dc\u7269\u4ef6\u7684\u7fa4\u96c6\uff0c\u6709\u4e00\u500b root \u8207\u908a\u754c\u3002\u5916\u90e8\u7269\u4ef6\u53ea\u80fd\u5f15\u7528 root\u3002\u908a\u754c\u5167\u7684\u7269\u4ef6\uff0c\u53ef\u4ee5\u4e92\u76f8\u5f15\u7528\u3002</p>"},{"location":"domain-driven-design/06-the-life-cycle-of-a-domain-object.html#_1","title":"\u7bc4\u4f8b: \u6c7d\u8eca","text":"<p>\u6c7d\u8eca\u662f\u4e00\u500b\u6709\u300cglobal identity (\u5168\u57df\u8b58\u5225\u78bc)\u300d\u7684 Entity\u3002\u8b58\u5225\u78bc\u7528\u4ee5\u8b58\u5225\u4e16\u754c\u4e0a\u6bcf\u4e00\u8f1b\u6c7d\u8eca\u500b\u9ad4\uff0c\u662f Aggregate root\u3002</p> <p>\u8f2a\u80ce\uff0c\u6709\u300c\u91cc\u7a0b\u6578\u300d\u8207\u300c\u78e8\u640d\u5ea6\u300d\u5c6c\u6027\u3002\u5982\u679c\u6211\u5011\u6703\u95dc\u5fc3\u67d0\u500b\u8f2a\u80ce\u88ab\u88dd\u5728\u54ea\u53f0\u6c7d\u8eca\u4e0a\u9762\uff0c\u5c31\u9700\u8981\u5c07\u8f2a\u80ce\u8996\u70ba Entity\uff0c\u7d66\u4e88\u8b58\u5225\u78bc\u3002\u4e0d\u904e\uff0c\u6211\u5011\u4e26\u4e0d\u6703\u95dc\u5fc3\u7279\u5b9a\u8f2a\u80ce\u88ab\u5b89\u88dd\u5728\u54ea\u53f0\u6c7d\u8eca\u4e0a\u3002\u8f2a\u80ce\u5f9e\u6c7d\u8eca\u62c6\u9664\u5f8c\uff0c\u6211\u5011\u4e5f\u4e0d\u6703\u95dc\u5fc3\u4ed6\u5f8c\u7e8c\u7684\u5b58\u5728\u3002\u6211\u5011\u53ea\u6703\u641c\u5c0b\u6c7d\u8eca\uff0c\u900f\u904e\u6c7d\u8eca\u4e86\u89e3\u5176\u8f2a\u80ce\u72c0\u6cc1\u3002</p> <p>\u5f15\u64ce\u6709\u81ea\u5df1\u7684\u5e8f\u865f\uff0c\u6709\u6642\u5019\u6703\u7368\u7acb\u8ffd\u8e64\u3002\u56e0\u6b64\uff0c\u5f15\u64ce\u53ef\u4ee5\u662f Aggregate root\u3002</p> <p></p> <p>\u53ef\u4ee5\u88ab\u5916\u90e8\u7528\u8b58\u5225\u78bc\u67e5\u8a62\uff0c\u5c31\u662f Aggregate root\u3002</p> <p></p> <p>invariant \u662f Aggregate \u5167\u7684\u7269\u4ef6\u5fc5\u9808\u9075\u5b88\u7684\u898f\u5247\u3002\u5982\u5716\u4e2d\u7684</p> <ol> <li><code>{time period must not overlap on same wheel}</code></li> <li><code>{mileage = sum(Position.mileage)}</code></li> </ol> <p>Aggregate \u8207 Aggregate \u4e4b\u9593\u4e0d\u61c9\u6c42\u5373\u6642\u540c\u6b65\uff0c\u53ef\u4ee5\u900f\u904e event \u6216 batch \u7b49\u6a5f\u5236\u66f4\u65b0\u3002</p> <p>Aggregate \u7684\u898f\u5247:</p> <ul> <li>Root Entities \u6709 global identity (\u5168\u57df\u552f\u4e00\u8b58\u5225)<ul> <li>\u7bc4\u4f8b: \u82e5 <code>Car</code> \u7684\u8eca\u865f\u662f ABC-123\uff0c\u90a3\u9ebc\u61c9\u7528\u7a0b\u5f0f\u4e0d\u6703\u6709\u53e6\u5916\u4e00\u53f0\u8eca\u4e5f\u662f ABC-123\u3002</li> </ul> </li> <li>Root Entities \u8ca0\u8cac\u6aa2\u67e5 invariant<ul> <li>\u7bc4\u4f8b: <code>Car</code> \u5fc5\u9808\u6aa2\u67e5<code>{time period must not overlap on same wheel}</code> \u8207 <code>{mileage = sum(Position.mileage)}</code></li> </ul> </li> <li>\u908a\u754c\u5167\u7684 Entities \u6709 local identity (\u908a\u754c\u5167\u552f\u4e00\u8b58\u5225)<ul> <li>\u7bc4\u4f8b: <code>Car</code> ABC-123 \u7684 LF <code>Wheel</code> \u53ea\u5728 ABC-123 \u88e1\u9762\u552f\u4e00\u3002\u53e6\u4e00\u53f0\u8eca\uff0c\u5047\u8a2d DEF-456\uff0c\u4e5f\u6709 LF <code>Wheel</code>\uff0c\u4f46\u662f\u9019\u5169\u500b <code>Wheel</code> \u662f\u4e0d\u540c\u7684\u3002</li> </ul> </li> <li>Aggregate \u5916\uff0c\u53ea\u80fd\u53c3\u8003 Root Entities\uff0c\u4e0d\u80fd\u53c3\u8003\u5167\u90e8\u7684\u7269\u4ef6<ul> <li>\u5167\u90e8\u7269\u4ef6\u53ef\u4ee5\u50b3\u905e\u5230\u5916\u90e8\uff0c\u4f46\u662f\u5916\u90e8\u4e0d\u80fd\u4fdd\u7559\u5c0d\u5167\u90e8\u7269\u4ef6\u7684\u53c3\u8003</li> <li>\u7bc4\u4f8b: \u5916\u90e8\u53ea\u80fd\u4fdd\u7559 <code>Car</code> \u7684\u53c3\u8003\uff0c\u4e0d\u80fd\u4fdd\u7559 <code>Wheel</code>, <code>Tire</code>, <code>Position</code> \u7684\u53c3\u8003</li> </ul> </li> <li>Aggregate root \u53ef\u4ee5\u900f\u904e\u8cc7\u6599\u5eab\u67e5\u8a62\u3002\u5176\u4ed6\u5167\u90e8\u7269\u4ef6\u5fc5\u9808\u900f\u904e root \u8d70\u8a2a\u5f97\u5230\u3002<ul> <li>\u7bc4\u4f8b: \u53ef\u4ee5\u67e5\u8a62\u8cc7\u6599\u5eab\u8eca\u865f ABC-123 \u5f97\u5230 <code>Car</code>\uff0c\u4f46\u662f\u4e0d\u80fd\u67e5\u8a62 <code>Wheel</code> \u5f97\u5230 <code>Car</code>\u3002</li> </ul> </li> <li>Aggregate \u5167\u90e8\u7269\u4ef6\u53ef\u4ee5\u4fdd\u7559\u5176\u4ed6 aggregate root \u7684\u53c3\u8003\u3002</li> <li>\u522a\u9664\u64cd\u4f5c\u5fc5\u9808\u4e00\u6b21\u6027\u522a\u9664\u6574\u500b Aggregate\u3002</li> </ul>"},{"location":"domain-driven-design/06-the-life-cycle-of-a-domain-object.html#_2","title":"\u7bc4\u4f8b: \u63a1\u8cfc\u8a02\u55ae\u7684\u5b8c\u6574\u6027","text":"<p>Domain model</p> <p></p> <p>\u5047\u5b9a\u8cc7\u6599\u5eab\u5132\u5b58\u4e86\u4e00\u7b46 Purchase Order \u7684\u60c5\u6cc1\u3002</p> <p></p> <p>Object diagram</p> <pre>9ce35796beaf597f1462284d2da8c6dfb0a5267b06896ab1e31437ad9ca9d694388702e262b209474d39b0f1977f88bc54d03c1acfea658bb65b6cfad3dcbe25</pre><pre>f0e82e43fddc28a379041cf86a401c17ad8fb25fec05ca6b602fc1fc3e97a979a18a7a7893d10e50fe77d2ce4b10136aa62e0ac4e0426dbc23ebfeba58ddf4ba</pre>"},{"location":"domain-driven-design/06-the-life-cycle-of-a-domain-object.html#_3","title":"\u64cd\u4f5c\u671f\u9593\u5ffd\u7565\u5176\u4ed6\u8cc7\u6599\u5eab\u8b8a\u5316\u9020\u6210\u7684\u554f\u984c","text":"<ol> <li>George \u4fee\u6539 Guitars \u7684 Quantity \u70ba 5\uff0c\u66f4\u65b0\u5f8c Total \u70ba 900\uff0c\u6eff\u8db3 invariant\uff0c\u4e88\u4ee5\u66f4\u65b0\u3002</li> <li>Amanda \u4fee\u6539 Trombones \u7684 Amount \u70ba 600\uff0c\u66f4\u65b0\u5f8c Total \u70ba 900 \u6eff\u8db3 invariant\uff0c\u4e88\u4ee5\u66f4\u65b0\u3002</li> </ol> <p>\u4f46\u662f\u9019\u5169\u7b46\u8cc7\u6599\u66f4\u65b0\u5f8c\uff0c\u9020\u6210 PO \u7684 Total \u8b8a\u6210 1100\uff0c\u8d85\u904e PO \u7684 approved limit 1000\u3002</p>"},{"location":"domain-driven-design/06-the-life-cycle-of-a-domain-object.html#po","title":"\u4e00\u6b21\u9396\u5b9a\u6574\u7b46 PO \u9032\u884c\u66f4\u65b0","text":"<ol> <li>George \u4fee\u6539 Guitars \u7684 Quantity \u70ba 5\uff0c\u66f4\u65b0\u5f8c Total \u70ba 900\uff0c\u6eff\u8db3 invariant\uff0c\u4e88\u4ee5\u66f4\u65b0\u3002<ul> <li>\u56e0\u70ba George \u9032\u884c\u4fee\u6539\uff0c\u9396\u5b9a\u6574\u7b46 PO\uff0cAmanda \u8981\u4fee\u6539\u9700\u8981\u6392\u968a\u7b49 George \u5b8c\u6210\u3002</li> </ul> </li> <li>Amanda \u4fee\u6539 Trombones \u7684 Amount \u70ba 600\uff0c\u66f4\u65b0\u5f8c Total \u70ba 1100 \u9055\u53cd invariant\uff0c\u4e0d\u4e88\u66f4\u65b0\u3002</li> </ol> <p>\u5982\u679c George \u4fee\u6539 Guitars \u6642\uff0c\u6709\u4eba\u63d0\u9ad8 Guitars \u7684 Price\uff0c\u662f\u4e0d\u662f\u4e5f\u6703\u53ef\u80fd\u9055\u53cd invariant\u3002\u56e0\u6b64\uff0c\u53ef\u80fd\u4e5f\u9700\u8981\u8003\u616e\u5728\u9396\u5b9a PO \u6642\uff0c\u4e5f\u9396\u5b9a Part\u3002</p> <p>\u4e0d\u904e\uff0c\u904e\u5ea6\u9396\u5b9a\u6703\u9020\u6210\u8907\u96dc\u7684\u7af6\u722d\u554f\u984c\uff0c\u5982\u4e0b\uff1a</p> <p></p> <ol> <li>George \u4fee\u6539 PO #0012946\u3002Guitars, Trombones \u90fd\u88ab\u9396\u5b9a\u3002</li> <li>Amanda \u8981\u4fee\u6539 PO #0012932\uff0c\u6240\u4ee5\u9396\u5b9a Violins\u3002\u7136\u5f8c\u8981\u628a Trombones \u52a0\u5230 PO\uff0c\u4f46\u662f Trombones \u88ab\u9396\u5b9a\uff0c\u6240\u4ee5 Amanda \u8981\u7b49 George \u5b8c\u6210\u3002</li> <li>Sam \u8981\u4fee\u6539 PO #0013003\uff0c\u6240\u4ee5\u9396\u5b9a Piano\u3002\u7136\u5f8c\u8981\u628a Trombones \u52a0\u5230 PO\uff0c\u4f46\u662f Trombones \u88ab\u9396\u5b9a\uff0c\u6240\u4ee5 Sam \u8981\u7b49 George \u5b8c\u6210\u3002</li> </ol> <p>\u63a5\u8457\uff0cGeorge \u8981\u628a Violins \u52a0\u5230 PO\uff0c\u4f46\u662f Violins \u88ab Amanda \u9396\u5b9a\uff0c\u6240\u4ee5 George \u8981\u7b49 Amanda \u5b8c\u6210\u3002</p> <p></p> <p>\u7d50\u679c\u662f\uff0c\u4e09\u500b\u4eba\u90fd\u5728\u76f8\u4e92\u7b49\u5f85\u3002</p>"},{"location":"domain-driven-design/06-the-life-cycle-of-a-domain-object.html#_4","title":"\u52a0\u5165\u696d\u52d9\u77e5\u8b58","text":"<ol> <li>Parts \u6703\u5728\u591a\u500b PO \u4f7f\u7528\uff0c\u6703\u7522\u751f high contention\u3002</li> <li>\u4fee\u6539 Parts \u7684\u6a5f\u6703\u4f4e\u65bc\u4fee\u6539 PO\u3002</li> <li>\u4fee\u6539 Parts \u7684 Price \u53ef\u4ee5\u4e0d\u5fc5\u5f71\u97ff\u5df2\u5b58\u5728\u7684 PO\u3002</li> </ol> <p><code>Purchase Order Line Item</code> \u4e2d\u4fdd\u7559\u4e86\u4e00\u4efd <code>price</code>\uff0c\u5b83\u662f\u586b\u5beb PO \u6642\u7684\u50f9\u683c\uff0c\u800c\u975e\u6700\u65b0\u50f9\u683c\u3002</p> <p>Aggregate \u5f37\u8feb <code>Purchase Order</code> \u8207 <code>Purchase Order Line Item</code> \u7684\u65b0\u589e\u8207\u522a\u9664\u3002\u800c <code>Part</code> \u7684\u65b0\u589e\u8207\u522a\u9664\u662f\u7368\u7acb\u7684\u3002</p>"},{"location":"domain-driven-design/06-the-life-cycle-of-a-domain-object.html#factory","title":"Factory","text":"<p>Factory \u7684\u5be6\u4f5c\u624b\u6bb5: (GoF Design Patterns) 1. Factory method 2. Abstract factory 3. Builder</p> <p>\u6574\u500b Aggregate \u901a\u5e38\u7531 Factory \u5efa\u7acb\uff0c\u4e26\u56de\u50b3 Aggregate root\u3002</p> <p></p>"},{"location":"domain-driven-design/06-the-life-cycle-of-a-domain-object.html#aggregate","title":"\u5728\u65e2\u6709\u7684 Aggregate \u4e2d\u65b0\u589e\u5143\u7d20","text":"<p>\u5728 Aggregate root \u589e\u52a0 Factory method\uff0c\u7528\u4ee5\u65b0\u589e\u5143\u7d20\u3002</p> <p>\u4f46\u662f\uff0cFactory method \u7522\u751f\u7684\u5143\u7d20\u53ef\u4ee5\u4e0d\u5fc5\u5c6c\u65bc Aggregate\u3002</p> <p></p> <p><code>TradeOrder</code> \u4e0d\u5c6c\u65bc <code>Brokerage Account</code> \u7684 Aggregate\u3002\u4f46\u662f\u8b93 <code>Brokerage Account</code> \u7522\u751f <code>TradeOrder</code> \u662f\u5f88\u81ea\u7136\u7684\u4e8b\u60c5\u3002\u56e0\u70ba</p> <ul> <li><code>TradeOrder</code> \u5efa\u7acb\u9700\u8981 <code>Brokerage Account</code> \u7684\u8cc7\u8a0a\u3002</li> <li><code>Brokerage Account</code> \u63a7\u5236\u4ea4\u6613\u662f\u5426\u5141\u8a31\u3002</li> </ul>"},{"location":"domain-driven-design/06-the-life-cycle-of-a-domain-object.html#aggregate_1","title":"\u91cd\u5efa Aggregate","text":"<p>CUST: customer?</p> <p></p>"},{"location":"domain-driven-design/06-the-life-cycle-of-a-domain-object.html#repository","title":"Repository","text":"<p>\u5beb\u6b7b\u7684\u67e5\u8a62\uff0c\u53ea\u63a5\u6536\u56fa\u5b9a\u53c3\u6578\u7684\u67e5\u8a62\u3002</p> <p></p> <p>Specification-based \u7684\u67e5\u8a62\uff0c\u8b93 repository \u66f4\u901a\u7528\u5316\u3002</p> <p></p>"},{"location":"domain-driven-design/06-the-life-cycle-of-a-domain-object.html#repository_1","title":"Repository \u7684\u5be6\u4f5c","text":"<p>\u7406\u60f3\u7684 Repository \u5411 client \u96b1\u85cf\u6240\u6709\u7d30\u7bc0\uff0c\u7121\u8ad6\u8cc7\u6599\u662f\u5b58\u5728\u7269\u4ef6\u8cc7\u6599\u5eab\u3001\u95dc\u806f\u5f0f\u8cc7\u6599\u5eab\u3001\u6216\u662f\u5728\u8a18\u61b6\u9ad4\u4e2d\u3002</p>"},{"location":"domain-driven-design/06-the-life-cycle-of-a-domain-object.html#factory-vs-repository","title":"Factory v.s. Repository","text":"<p>Factory \u8ca0\u8cac\u5efa\u7acb\u7269\u4ef6\u3002 Repository \u8ca0\u8cac\u4fdd\u5b58\u7269\u4ef6\u3001\u67e5\u8a62\u7269\u4ef6\u3001\u522a\u9664\u7269\u4ef6\u3002\u5373\u4f7f\u7269\u4ef6\u88ab\u4fdd\u7559\u5728\u5916\u90e8\u5a92\u4ecb(\u8cc7\u6599\u5eab\u7b49)\uff0c\u4e5f\u61c9\u8a72\u8b93 client \u89ba\u5f97\u7269\u4ef6\u5c31\u662f\u5728\u8a18\u61b6\u9ad4\u4e2d\u3002</p> <p>Repository \u53ef\u4ee5\u59d4\u8a17(delegate) Factory \u4f86\u5efa\u7acb\u7269\u4ef6\u3002 </p> <p>Client \u5f9e Factory \u5efa\u7acb\u7269\u4ef6\u5f8c\uff0c\u9700\u8981\u77e5\u9053\u61c9\u900f\u904e Repository \u4fdd\u5b58\u7269\u4ef6\u3002 </p>"},{"location":"domain-driven-design/07-using-the-language-an-extended-example.html","title":"Ch 7: Using the Language: An Extended Example","text":""},{"location":"domain-driven-design/07-using-the-language-an-extended-example.html#cargo-shipping-system","title":"Cargo Shipping System (\u8ca8\u7269\u904b\u9001\u7cfb\u7d71)","text":"<p>\u6211\u5011\u8981\u66ff\u4e00\u5bb6\u8ca8\u904b\u516c\u53f8\u958b\u767c\u8edf\u9ad4\uff0c\u6700\u521d\u7684\u9700\u6c42\u5982\u4e0b:</p> <ol> <li>\u8ffd\u8e64\u8ca8\u7269\u7684\u8655\u7406\u72c0\u614b</li> <li>\u9810\u7d04\u5bc4\u9001\u8ca8\u7269</li> <li>\u7576\u8ca8\u7269\u62b5\u9054\u67d0\u500b\u5730\u65b9\u6642\uff0c\u81ea\u52d5\u5bc4\u9001\u767c\u7968\u7d66\u5ba2\u6236</li> </ol> <p>\u7528\u4f86\u8868\u793a Domain Model \u7684 class diagram \u5982\u4e0b:</p> <p></p> <p>\u900f\u904e Domain Model \u6211\u5011\u53ef\u80fd\u4f7f\u7528\u4ee5\u4e0b\u7684\u63cf\u8ff0:</p> <ul> <li><code>Cargo</code> (\u8ca8\u7269) \u6d89\u53ca\u591a\u500b <code>Customer</code> (\u5ba2\u6236)\uff0c\u6bcf\u4e00\u500b <code>Customer</code> \u626e\u6f14\u8457\u4e0d\u540c\u7684 <code>Role</code> (\u89d2\u8272)\u3002</li> <li><code>Cargo</code> (\u8ca8\u7269) \u7684 <code>Goal</code> (\u76ee\u6a19) \u5df2\u6307\u5b9a\u3002</li> <li>\u900f\u904e\u4e00\u7d44\u6eff\u8db3 <code>Specification</code> (\u898f\u683c) \u7684 <code>Carrier Movement</code> (\u904b\u8f38\u52d5\u4f5c) \u5c07\u9054\u6210 <code>Delivery Goal</code> (\u904b\u9001\u76ee\u6a19)\u3002</li> </ul> <p>\u5716\u4e2d\u7684\u6bcf\u500b\u7269\u4ef6\u7684\u610f\u7fa9:</p> <ul> <li><code>Handling Event</code> (\u8655\u7406\u4e8b\u4ef6): \u63cf\u8ff0\u5c0d <code>Cargo</code> \u63a1\u53d6\u7684\u8655\u7406\uff0c\u50cf\u662f<ul> <li>loading it onto a ship (\u5c07\u8ca8\u7269\u88dd\u4e0a\u8239)</li> <li>clearing it through customs (\u5c07\u8ca8\u7269\u901a\u904e\u6d77\u95dc\u6aa2\u67e5\u4e26\u7372\u5f97\u8a31\u53ef)</li> <li>loading (\u88dd\u8ca8)</li> <li>unloading (\u5378\u8ca8)</li> <li>being claimed by the receiver (\u88ab\u6536\u8ca8\u4eba\u63d0\u8d70)</li> </ul> </li> <li><code>Delivery Specification</code> (\u904b\u9001\u898f\u683c): \u63cf\u8ff0 <code>delivery goal</code> (\u904b\u9001\u76ee\u6a19)\uff0c\u5305\u542b\u4e86 <code>destination</code> (\u76ee\u7684\u5730) \u8207 <code>arrival time</code> (\u62b5\u9054\u6642\u9593)\u3002</li> <li><code>Customer</code>: <code>Role</code> (\u89d2\u8272) \u5340\u9694\u4e86 <code>Customer</code> (\u5ba2\u6236) \u5728\u904b\u9001\u626e\u6f14\u7684\u8eab\u4efd\u3002<ul> <li><code>Role</code> \u53ef\u4ee5\u662f shipper (\u8a17\u904b\u4eba), receiver (\u6536\u8ca8\u4eba), payer (\u4ed8\u6b3e\u4eba) \u7b49\u3002</li> <li><code>Customer</code> \u8207 <code>Cargo</code> \u7684\u95dc\u4fc2\u662f\u300cqualified (\u9650\u5b9a\u7684) many-to-one\u300d\u800c\u975e\u300cmany-to-many\u300d\u3002</li> </ul> </li> <li><code>Carrier Movement</code> (\u904b\u8f38\u884c\u52d5): \u63cf\u8ff0 <code>Carrier</code> (\u5982\uff0c\u5361\u8eca\u6216\u8239) \u5f9e\u4e00 <code>Location</code> (\u5730\u9ede) \u5230\u53e6\u4e00 <code>Location</code> (\u5730\u9ede) \u7684\u65c5\u7a0b\u3002<ul> <li> \u770b\u5716\u8aaa\u660e <code>Cargo</code> \u7d93\u904e\u591a\u500b <code>Handling Event</code> \u8655\u7406\uff0c\u900f\u904e <code>Carrier</code> \u7684 <code>Carrier Movement</code> \u5728 <code>Location</code> \u4e4b\u9593\u79fb\u52d5\u3002 </li> </ul> </li> <li><code>Delivery History</code> (\u904b\u9001\u6b77\u53f2\u7d00\u9304): \u63cf\u8ff0 <code>Cargo</code> \u5728\u904b\u9001\u904e\u7a0b\u7684\u3002</li> </ul> <p>Model \u5df2\u7d93\u6db5\u84cb\u5be6\u4f5c\u9700\u8981\u7684\u6982\u5ff5\u3002\u5047\u5b9a\u6211\u5011\u6709\u9069\u7576\u7684\u6a5f\u5236\u4fdd\u5b58\u7269\u4ef6\u8207\u641c\u5c0b\u7269\u4ef6\u3002</p> <p>Model \u7684 refinement, design, implementation \u662f\u5728\u8fed\u4ee3\u958b\u767c\u7684\u904e\u7a0b\u4e2d\u4e92\u76f8\u914d\u5408\u3001\u540c\u6b65\u9032\u884c\u7684\u3002\u4e5f\u5c31\u662f\u8aaa\uff0cModel \u4e0d\u6703\u662f\u5b8c\u5168\u8a2d\u8a08\u597d\uff0c\u7136\u5f8c\u518d\u4ea4\u7531\u4e0b\u4e00\u500b\u968e\u6bb5\u9032\u884c\u5be6\u4f5c\uff0c\u800c\u662f\u61c9\u96a8\u8457\u958b\u767c\u4e0d\u65b7\u5730\u767c\u5c55\u3001\u6539\u9032\u8207\u8abf\u6574\u3002</p> <p>\u9019\u500b\u7bc4\u4f8b\u5f9e\u4e00\u500b\u76f8\u5c0d\u6bd4\u8f03\u6210\u719f\u7684 Model \u958b\u59cb\u3002\u4e26\u4e14\uff0c\u70ba\u4e86\u805a\u7126\u672c\u7ae0\u7684\u91cd\u9ede\uff0c\u7bc4\u4f8b\u9650\u5236 Model \u7684\u4fee\u6539\u52d5\u6a5f\u5fc5\u9808\u662f\u300c\u70ba\u4e86\u4f7f Model \u80fd\u8207\u5177\u9ad4\u7684\u5be6\u4f5c\u76f8\u4e92\u95dc\u806f\u300d\uff0c\u7136\u5f8c\u4f7f\u7528 building block patterns \u9032\u884c\u4fee\u6539 (\u5373 Entity, Value Object, Aggregation, Repository \u7b49)\u3002</p>"},{"location":"domain-driven-design/07-using-the-language-an-extended-example.html#isolating-the-domain-introducing-the-applications","title":"Isolating the Domain: Introducing the Applications","text":"<p>\u4f7f\u7528 Layered Architecture \u5c07 domain \u8207\u5176\u4ed6\u90e8\u5206\u5340\u9694\u3002</p> <p>\u4ee5\u4e0b\u662f\u4e09\u500b application layer \u7684 class:</p> <ol> <li>Tracking Query: \u67e5\u8a62 <code>Cargo</code> \u7684\u8655\u7406\u60c5\u6cc1\u3002</li> <li>Booking Application: \u8a3b\u518a\u65b0\u7684 <code>Cargo</code> \u8b93\u7cfb\u7d71\u8655\u7406\u3002</li> <li>Incident Logging Application: \u7d00\u9304 <code>Cargo</code> \u8655\u7406\u7684\u4e8b\u4ef6\u3002</li> </ol> <p>Application layer \u8ca0\u8cac\u5411 domain layer \u554f\u554f\u984c\uff0cdomain layer \u8ca0\u8cac\u56de\u7b54\u554f\u984c\u3002</p>"},{"location":"domain-driven-design/07-using-the-language-an-extended-example.html#entity-value-object","title":"\u5340\u5206 Entity \u8207 Value Object","text":"<p>\u6aa2\u8996\u6bcf\u4e00\u500b\u7269\u4ef6: (\u5224\u65b7\u65b9\u6cd5: \u53ef\u4ee5\u5171\u7528\u7684\u7269\u4ef6\u662f Value Object\uff0c\u4e0d\u884c\u7684\u662f Entity)</p> <ul> <li><code>Customer</code><ul> <li>Entity</li> <li>\u552f\u4e00\u8b58\u5225\u78bc: customer ID</li> </ul> </li> <li><code>Cargo</code><ul> <li>Entity</li> <li>\u552f\u4e00\u8b58\u5225\u78bc: tracking ID</li> </ul> </li> <li><code>Handling Event</code> \u8207 <code>Carrier Movement</code><ul> <li>Entity</li> <li>\u552f\u4e00\u8b58\u5225\u78bc<ul> <li><code>Carrier Movement</code>: schedule ID (\u5f9e shipping schedule \u4e2d\u7684 code)</li> <li><code>Handling Event</code>: Cargo tracking ID + completion time + type</li> </ul> </li> </ul> </li> <li><code>Location</code><ul> <li>Entity</li> </ul> </li> <li><code>Delivery History</code><ul> <li>Entity</li> <li>\u552f\u4e00\u8b58\u5225\u78bc: Cargo tracking ID (<code>Delivery History</code> \u8207 <code>Cargo</code> \u4e00\u5c0d\u4e00\u95dc\u806f\uff0c\u6c92\u6709\u81ea\u5df1\u7684\u552f\u4e00\u8b58\u5225\u78bc\u3002<code>Delivery History</code> \u7684\u8b58\u5225\u78bc\u4f86\u81ea <code>Cargo</code>)</li> </ul> </li> <li><code>Delivery Specification</code><ul> <li>Value Object (\u53ef\u4ee5\u6709\u5169\u500b <code>Cargo</code> \u9001\u5f80\u76f8\u540c\u7684\u5730\u9ede\uff0c\u56e0\u6b64\u5171\u7528\u540c\u4e00\u500b Specification)</li> </ul> </li> <li><code>Role</code> \u8207\u5176\u4ed6\u5c6c\u6027<ul> <li>Value Object</li> <li>\u5176\u4ed6\u5c6c\u6027\uff0c\u5305\u542b\u50cf\u662f time, name</li> </ul> </li> </ul>"},{"location":"domain-driven-design/07-using-the-language-an-extended-example.html#_1","title":"\u95dc\u806f","text":"<p>\u6307\u5b9a\u95dc\u806f\u65b9\u5411\u3002\u5716\u4e2d\u8aaa\u660e\u6bcf\u500b\u95dc\u806f\u65b9\u5411\u7684\u539f\u56e0\u3002</p> <p></p> <ul> <li><code>Carrier Movement - Handling Event</code><ul> <li>\u5982\u679c\u8981\u5f9e <code>Carrier</code> \u8ffd\u8e64\u8ca8\u7269\uff0c\u5c31\u9700\u8981 <code>Carrier Movement -&gt; Handling Event</code>\uff0c\u4f46\u662f\u6211\u5011\u7684\u696d\u52d9\u4e0d\u9700\u8981\u3002</li> <li>\u696d\u52d9\u9700\u8981\u8ffd\u8e64 <code>Cargo</code> \u7684\u72c0\u614b\uff0c\u9700\u8981\u900f\u904e <code>Cargo -&gt; Delivery History -&gt; Handling Event -&gt; Carrier Movement -&gt; Location</code> \u77e5\u9053\u76ee\u524d <code>Cargo</code> \u7684\u4f4d\u5740\u3002</li> </ul> </li> </ul>"},{"location":"domain-driven-design/07-using-the-language-an-extended-example.html#aggregate-boundaries","title":"Aggregate Boundaries","text":"<p>Aggregate root \u662f Entity \u4e14\u6709\u81ea\u5df1\u7684\u552f\u4e00\u8b58\u5225\u78bc: <code>Customer</code>, <code>Cargo</code>, <code>Carrier Movement</code>, <code>Location</code></p> <p><code>Cargo</code> \u7684 aggregate \u53ef\u4ee5\u628a\u6240\u6709\u56e0\u70ba <code>Cargo</code> \u800c\u5b58\u5728\u7684\u4e8b\u7269\u5283\u5165\u908a\u754c\u4e2d\uff0c\u5305\u542b <code>Delivery History</code>, <code>Delivery Specification</code>, <code>Handling Event</code>\u3002</p> <p><code>Handling Event</code> \u6700\u5f8c\u88ab\u8a2d\u8a08\u6210\u81ea\u5df1\u70ba aggregate\uff0c\u56e0\u70ba\u696d\u52d9\u4e0a\u6709\u9700\u8981\u67e5\u8a62 <code>Cargo</code> \u8655\u7406\u72c0\u614b\uff0c\u9700\u8981\u900f\u904e <code>Handling Event</code>\u3002</p> <p></p>"},{"location":"domain-driven-design/07-using-the-language-an-extended-example.html#repository","title":"Repository","text":"<p>\u53ea\u6709 Aggregate root \u6703\u6709 Repository\u3002</p> <p></p> <p>\u6c99\u76e4\u63a8\u6f14\uff0c\u9019\u4e9b Repository \u662f\u5426\u80fd\u6eff\u8db3\u9700\u6c42\u3002</p> <ul> <li>Booking Application<ul> <li>\u5ba2\u6236 <code>Customer</code> (<code>Customer Repository</code>)</li> <li>\u9810\u5b9a\u8ca8\u7269\u8981\u904b\u9001\u5230 <code>Location</code> (<code>Location Repository</code>)</li> </ul> </li> <li>Activity Logging Application<ul> <li>\u4f7f\u7528 <code>Carrier Movement Repository</code> \u67e5\u8a62\u8981\u88dd\u8ca8\u7684 <code>Carrier Movement</code>\u3002</li> <li>\u4f7f\u7528 <code>Cargo Repository</code> \u7d00\u9304\u5df2\u5b8c\u6210\u88dd\u8ca8\u3002</li> </ul> </li> </ul> <p>\u6c92\u6709 <code>Handling Event Repository</code>\uff0c\u5728\u9019\u6b21\u8fed\u4ee3\u4e2d <code>Handling Event</code> \u662f\u8207 <code>Delivery History</code> \u95dc\u806f\u7522\u751f\u96c6\u5408 \u4e14 \u6c92\u6709\u67e5\u8a62 <code>Handling Event</code> \u7684\u9700\u6c42\u3002</p>"},{"location":"domain-driven-design/07-using-the-language-an-extended-example.html#working-through-scenarios","title":"\u5834\u666f\u6f14\u7df4 (Working Through Scenarios)","text":"<p>\u7d93\u5e38\u6f14\u7df4 Scenario\uff0c\u78ba\u4fdd Model \u80fd\u5920\u6709\u6548\u7684\u89e3\u6c7a\u554f\u984c\u3002</p>"},{"location":"domain-driven-design/07-using-the-language-an-extended-example.html#cargo","title":"\u61c9\u7528\u7a0b\u5f0f\u529f\u80fd\u7bc4\u4f8b: \u66f4\u6539 Cargo \u7684\u76ee\u7684\u5730","text":"<p><code>Delivery Specification</code> \u662f Value Object\uff0c\u6700\u7c21\u55ae\u505a\u6cd5\u662f\uff0c\u5efa\u7acb\u65b0\u7684 <code>Delivery Specification</code> \u4e26\u4e14\u66f4\u65b0 <code>Cargo</code> \u7684 <code>Delivery Specification</code>\u3002</p>"},{"location":"domain-driven-design/07-using-the-language-an-extended-example.html#repeat-business","title":"\u61c9\u7528\u7a0b\u5f0f\u529f\u80fd\u7bc4\u4f8b: \u91cd\u8907\u696d\u52d9 (Repeat Business)","text":"<p>\u5141\u8a31\u4f7f\u7528\u8005\u5728 <code>Repository</code> \u4e2d\u627e\u5230\u4e00\u500b <code>Cargo</code> \u4e26\u57fa\u65bc\u5b83\u7522\u751f\u65b0\u7684 <code>Cargo</code>\u3002</p> <p>Aggregate \u908a\u754c\u5167\u7684\u7269\u4ef6\u8207\u5c6c\u6027\uff0c\u90fd\u8981\u5c0f\u5fc3\u8003\u616e:</p> <ul> <li>\u61c9\u5efa\u7acb\u65b0\u7684\uff0c\u7a7a\u7684 <code>Delivery History</code>\uff0c\u820a\u7684\u6b77\u53f2\u4e0d\u9069\u7528\u5728\u65b0\u7684 <code>Cargo</code> \u4e0a\u3002</li> <li>\u61c9\u8907\u88fd <code>Customer Role</code> \u7684 Map\uff0c\u4e26\u4e14\u4fdd\u7559 key \u8207 value \u7684 reference\u3002\u4e5f\u5c31\u662f\uff0c\u53c3\u8003\u5230\u8207\u539f <code>Cargo</code> \u76f8\u540c\u7684 <code>Customer</code>\uff0c\u56e0\u70ba\u4ed6\u662f\u5c6c\u65bc Aggregate \u908a\u754c\u5916\u7684 Entity\u3002</li> <li>\u7522\u751f\u65b0\u7684 <code>Tracking ID</code>\u3002</li> </ul> <p>\u8907\u88fd <code>Carge</code> Aggregate \u4e26\u6c92\u6709\u5c0d\u5916\u90e8\u7269\u4ef6\u7522\u751f\u526f\u4f5c\u7528\u3002</p>"},{"location":"domain-driven-design/07-using-the-language-an-extended-example.html#_2","title":"\u5efa\u7acb\u7269\u4ef6","text":""},{"location":"domain-driven-design/07-using-the-language-an-extended-example.html#cargo_1","title":"Cargo","text":""},{"location":"domain-driven-design/07-using-the-language-an-extended-example.html#cargo-constructor","title":"<code>Cargo</code> \u7684 constructor","text":"<pre><code>public Cargo(String trackingId) {\n    this.trackingId = trackingId;\n    this.deliveryHistory = new DeliveryHistory(this);\n    this.customerrolers = new HashMap&lt;Role, Customer&gt;();\n}\n</code></pre> <ul> <li><code>DeliveryHistory</code> \u8207 <code>Cargo</code> \u96d9\u5411\u95dc\u806f\u3002</li> <li><code>Cargo</code> Aggregate \u5305\u542b <code>DeliveryHistory</code>\uff0c\u6240\u4ee5 <code>Cargo</code> \u8981\u8ca0\u8cac\u751f\u6210 <code>DeliveryHistory</code>\u3002</li> </ul>"},{"location":"domain-driven-design/07-using-the-language-an-extended-example.html#repeat-business_1","title":"Repeat Business","text":"<p>\u70ba\u4e86\u6eff\u8db3\u91cd\u8907\u696d\u52d9 (Repeat Business) \u7684\u9700\u6c42\uff0c\u53ef\u4ee5\u4f7f\u7528 Factory\u3002\u4ee5\u4e0b\u63d0\u4f9b\u5e7e\u7a2e\u5be6\u4f5c\u65b9\u5f0f:</p> \u4f7f\u7528 Factory Method\u4f7f\u7528 Factory\u4f7f\u7528 Factory (\u81ea\u52d5\u7522\u751f tracking id) <pre><code>public Cargo copyPrototype(String newTrackingId)\n</code></pre> <pre><code>public Cargo newCargo(Cargo prototype, String newTrackingId)\n</code></pre> <pre><code>public Cargo newCargo(Cargo prototype)\n</code></pre> <p>\u56de\u50b3\u7684 <code>Cargo</code> \u6703\u6709\u65b0\u7684 <code>trackingId</code>\u3002</p> <p>\u4ee5\u4e0a\u56de\u50b3\u7684 <code>Cargo</code> \u90fd\u5be6\u4f5c</p> <ol> <li>\u7a7a\u7684 <code>DispatchHistory</code></li> <li><code>DeliverySpecification</code> \u70ba <code>null</code></li> </ol>"},{"location":"domain-driven-design/07-using-the-language-an-extended-example.html#handling-event","title":"Handling Event","text":"<p>\u5efa\u7acb Entity \u9700\u8981\u628a\u6240\u6709 identity \u90fd\u50b3\u5165\u3002</p> <p>Handling Event \u7684 identity \u662f <code>Cargo</code> \u7684 tracking ID, <code>Completion Time</code>, <code>Type</code>\u3002</p> <pre><code>public HandlingEvent(Cargo handled, String eventType, Date completionTime) {\n    this.handled = handled;\n    this.completionTime = completionTime;\n    this.eventType = eventType;\n}\n</code></pre> <p>\u5c0d\u65bc Entity\uff0c\u975e identity \u7684\u5c6c\u6027\uff0c\u901a\u5e38\u53ef\u4ee5\u4e4b\u5f8c\u518d\u8a2d\u5b9a\u3002</p> <p>\u53e6\u4e00\u7a2e\u505a\u6cd5\uff0c\u5728 <code>HandlingEvent</code> \u4e2d\uff0c\u52a0\u5165 Factory Method \u63d0\u4f9b\u5fc5\u8981\u5c6c\u6027\uff0c\u5efa\u7acb <code>HandlingEvent</code>\u3002 \u4ee5\u4e0b\u662f\u5efa\u7acb\u4e00\u500b loading event \u7684 Factory Method:</p> <pre><code>public static HandlingEvent newLoading(\n    Cargo handled, CarrierMovement loadedOnto, Date completionTime\n) {\n    HandlingEvent result = new HandlingEvent(handled, LOADING_EVENT, completionTime);\n    result.setCarrierMovement(loadedOnto);\n    return result;\n}\n</code></pre> <p><code>DeliveryHistory</code> \u8207 <code>HandlingEvent</code> \u6709\u4e00\u500b\u55ae\u5411\u95dc\u806f\u3002\u56e0\u6b64\uff0c\u5efa\u7acb <code>HandlingEvent</code> \u6642\uff0c\u900f\u904e <code>Cargo</code> \u53d6\u5f97 <code>DeliveryHistory</code>\uff0c\u7136\u5f8c\u5c07 <code>HandlingEvent</code> \u52a0\u5165\u5176\u4e2d\u3002</p> <p></p>"},{"location":"domain-driven-design/07-using-the-language-an-extended-example.html#cargo-aggregate","title":"\u91cd\u69cb: Cargo aggregate \u7684\u53e6\u4e00\u7a2e\u8a2d\u8a08","text":"<p>\u5982\u524d\u6240\u8ff0\uff0c\u589e\u52a0 <code>HandlingEvent</code> \u5fc5\u9808\u8981\u66f4\u65b0 <code>DeliveryHistory</code>\uff0c\u4f7f\u5f97\u4fee\u6539\u727d\u626f <code>Cargo</code> Aggregate\u3002\u82e5\u540c\u6642\u6709\u5176\u4ed6 client \u5728\u4fee\u6539 <code>Cargo</code>\uff0c\u56e0\u70ba\u7af6\u722d\u72c0\u6cc1\uff0c\u9020\u6210 <code>HandlingEvent</code> \u5efa\u7acb\u5ef6\u9072\u6216\u8005\u5931\u6557\u3002\u56e0\u6b64\uff0c\u80fd\u5920\u5728\u4e0d\u7522\u751f\u7af6\u722d\u6cc1\u72c0\u6cc1\u4e0b\uff0c\u589e\u52a0 <code>HandlingEvent</code> \u662f\u91cd\u8981\u7684\u9700\u6c42\uff0c\u6211\u5011\u8981\u8003\u616e\u53e6\u4e00\u7a2e\u8a2d\u8a08\u3002</p> <ul> <li>\u5728 <code>DeliveryHistory</code> \u4e2d\u4e0d\u4f7f\u7528 <code>HandlingEvent</code> \u7684\u96c6\u5408\uff0c\u800c\u7528 query \u66ff\u4ee3\u3002</li> </ul> <p>\u70ba\u4e86\u8b93 <code>DeleryHistory</code> \u80fd\u5920\u67e5\u8a62 <code>HandlingEvent</code>\uff0c\u9700\u8981\u589e\u52a0 <code>HandlingEvent</code> \u7684 Repository\u3002\u6b64\u5916\uff0cRepository \u4e5f\u53ef\u4ee5\u7528\u4f86\u6700\u4f73\u5316\uff0c\u63d0\u4f9b\u6700\u6709\u6548\u7387\u7684\u67e5\u8a62\u65b9\u5f0f\u3002</p> <p></p>"},{"location":"domain-driven-design/07-using-the-language-an-extended-example.html#module","title":"Module","text":"<p>\u4ee5\u4e0b\u662f\u7a0d\u5fae\u5927\u4e00\u9ede\u7684 Shipping Model\u3002\u4ee5\u4e0b\u7269\u4ef6\u6839\u64da\u5176\u5957\u7528\u7684 Pattern \u9032\u884c\u5206\u985e:</p> <p></p> <p>Module \u672c\u8eab\u6c92\u6709\u50b3\u9054\u51fa domain knowledge\u3002</p> <p></p> <p>Module \u7684\u540d\u7a31\u61c9\u6210\u70ba\u5718\u968a\u8a9e\u8a00\u7684\u4e00\u90e8\u4efd\u3002\u4f8b\u5982\uff1a\u300c\u6211\u5011\u516c\u53f8\u66ff\u5ba2\u6236(<code>Customer</code>)\u9001\u8ca8(<code>Shipping</code>)\uff0c\u6240\u4ee5\u80fd\u5411\u4ed6\u5011\u6536\u53d6\u8cbb\u7528(<code>Bill</code>)\u3002\u6211\u5011\u7684\u92b7\u552e\u8207\u884c\u92b7\u4eba\u54e1\u8207\u5ba2\u6236(<code>Customer</code>)\u5354\u5546\u4e26\u7c3d\u7f72\u5408\u7d04\u3002\u64cd\u4f5c\u4eba\u54e1\u8ca0\u8cac\u5c07\u8ca8\u7269\u904b\u9001(<code>Shipping</code>)\u5230\u6307\u5b9a\u7684\u76ee\u7684\u5730\u3002\u5f8c\u52e4\u4eba\u54e1\u8ca0\u8cac\u5e33\u55ae(<code>Billing</code>)\uff0c\u6839\u64da\u8207\u5ba2\u6236(<code>Customer</code>)\u7c3d\u7d04\u7684\u50f9\u683c\uff0c\u5bc4\u9001\u767c\u7968\u3002\u300d</p>"},{"location":"domain-driven-design/07-using-the-language-an-extended-example.html#allocation-checking","title":"\u589e\u52a0\u529f\u80fd: Allocation Checking","text":"<p>\u92b7\u552e\u90e8\u9580\u4f7f\u7528\u5176\u4ed6\u8edf\u9ad4\u4f86\u7ba1\u7406\u5ba2\u6236\u95dc\u4fc2\u3001\u92b7\u552e\u8a08\u5283\u7b49\u3002\u5176\u4e2d\u4e00\u9805\u529f\u80fd\u70ba\u6536\u76ca\u7ba1\u7406(yield management)\uff0c\u53ef\u4ee5\u8b93\u516c\u53f8\u6839\u64da\u300c\u8ca8\u7269\u985e\u578b\u3001\u51fa\u767c\u5730\u3001\u76ee\u7684\u5730\u300d\u6216\u300c\u4ee5\u5206\u985e\u4f5c\u70ba\u8f38\u5165\u7684\u5176\u4ed6\u56e0\u7d20\u300d\u4f86\u5236\u5b9a\u4e0d\u540c\u8ca8\u7269\u985e\u578b\u7684\u904b\u9001\u914d\u984d\u3002\u914d\u984d\u69cb\u6210\u5404\u985e\u8ca8\u7269\u7684\u904b\u9001\u76ee\u6a19\uff0c\u9019\u6a23\u5c31\u4e0d\u6703\u9020\u6210\u300c\u4f4e\u5229\u6f64\u8ca8\u7269\u904e\u591a\u300d\u3001\u300c\u9ad8\u5229\u6f64\u8ca8\u7269\u904e\u5c11\u300d\u3001\u300c\u9810\u5b9a\u91cf\u4e0d\u8db3 (\u9084\u6709\u53ef\u4ee5\u904b\u9001\u5f88\u591a\u8ca8\u7269)\u300d\u3001\u300c\u9810\u5b9a\u91cf\u904e\u8f09\u300d\u7b49\u3002</p> <p>\u73fe\u5728\uff0c\u8981\u5c07\u6536\u76ca\u7ba1\u7406\u7684\u529f\u80fd\u6574\u5408\u9032\u958b\u767c\u7684\u7cfb\u7d71\uff0c\u8b93\u5ba2\u6236\u5728\u9810\u7d04\u5bc4\u9001\u8ca8\u7269\u6642\uff0c\u53ef\u4ee5\u6839\u64da\u914d\u984d (allocation) \u6c7a\u5b9a\u662f\u5426\u63a5\u53d7\u9810\u7d04\u3002</p> <p></p>"},{"location":"domain-driven-design/07-using-the-language-an-extended-example.html#_3","title":"\u4e32\u63a5\u5169\u500b\u7cfb\u7d71","text":"<p> \u7cfb\u7d71\u8207 <code>Sales Management System</code> \u9023\u63a5\u7684\u4ecb\u9762\uff0c\u6703\u60f3\u5230\u4ee5 <code>Sales Management Interface</code> \u4f86\u547d\u540d\u3002  \u547d\u540d\u6210 <code>Allocation Checker</code> \u53cd\u6620\u5b83\u5728\u7cfb\u7d71\u7684\u8077\u8cac\u3002</p>"},{"location":"domain-driven-design/07-using-the-language-an-extended-example.html#model-segmenting-the-business","title":"\u52a0\u5f37 Model: Segmenting the Business","text":"<p><code>Enterprise Segment</code> \u662f Value Object\u3002(Analysis Patterns, Fowler 1996)</p> Enterprise Segment \u793a\u610f<pre><code>public class EnterpriseSegment {\n    private final String region;\n    private final String productType;\n    private final String customerCategory;\n    ...\n}\n</code></pre> <p><code>EnterpriseSegment</code> \u5b9a\u7fa9\u4e86\u5224\u65b7\u904b\u9001\u91cf\u7684\u4f9d\u64da\u6a19\u6e96\uff0c\u900f\u904e <code>EnterpriseSegment</code> \u53ef\u4ee5\u67e5\u8a62\u5df2\u9810\u7d04\u91cf\u8207\u914d\u984d\u3002\u4f8b\u5982:</p> <ul> <li><code>{region=\u53f0\u5317, productType=\u51b7\u51cd\u98df\u54c1, customerCategory=\u4e00\u822c\u7528\u6236} \u914d\u984d 50 \u516c\u65a4</code></li> <li><code>{region=\u53f0\u5317, productType=\u96fb\u5b50\u7522\u54c1, customerCategory=\u4e00\u822c\u7528\u6236} \u914d\u984d 100 \u516c\u65a4</code></li> </ul> <p>\u9019\u500b\u8a2d\u8a08\u7684\u554f\u984c:</p> <ul> <li>\u63a5\u53d7\u6216\u62d2\u7d55 <code>Cargo</code> \u7684\u9810\u7d04\u662f Domain \u7684\u8cac\u4efb\uff0c\u800c\u975e application layer (\u5373 <code>Booking Application</code>) \u7684\u8cac\u4efb\u3002</li> <li><code>EnterpriseSegment</code> \u662f\u5982\u4f55\u751f\u6210\u7684\uff0c\u6c92\u6709\u6e05\u695a\u8aaa\u660e\u3002\u4e5f\u5c31\u662f\uff0c<code>Booking Application</code> \u5982\u4f55\u77e5\u9053 <code>Cargo</code> \u7684\u5206\u985e\uff0c\u9032\u800c\u7522\u751f <code>EnterpriseSegment</code>\u3002</li> </ul> <p>\u9019\u5169\u500b\u8a2d\u8a08\u554f\u984c\uff0c\u9069\u5408\u7d66 <code>Allocation Checker</code> \u8655\u7406\u3002</p> <p></p> <ol> <li>\u900f\u904e <code>Cargo</code> \u53d6\u5f97 <code>EnterpriseSegment</code> (<code>Allocation Checker</code> \u77e5\u9053 <code>Cargo</code> \u7684\u914d\u984d\u6240\u5c6c\u7684\u5206\u985e)</li> <li>\u900f\u904e <code>EnterpriseSegment</code> \u67e5\u8a62\u914d\u984d</li> <li>\u900f\u904e <code>Cargo</code> \u8ddf\u5df2\u9810\u7d04\u7684\u91cf\uff0c\u6aa2\u67e5\u8a02\u55ae\u662f\u5426\u63a5\u6536\u6216\u62d2\u7d55\u3002<ul> <li><code>Allocation Checker</code> \u77e5\u9053\u5982\u4f55\u5f9e <code>Cargo</code> \u751f\u6210 <code>EnterpriseSegment</code>\uff0c\u6240\u4ee5\u9019\u88e1\u50b3\u5165\u7684\u662f <code>Cargo</code>\u3002</li> </ul> </li> </ol> <p><code>EnterpriseSegment</code> \u5728\u9019\u88e1\u61c9\u8a72\u53ef\u4ee5\u7406\u89e3\u6210 Request Payload\uff0c\u628a request \u6240\u9700\u8981\u7684\u6700\u5c0f\u8cc7\u6599\u5c01\u88dd\u6210\u7269\u4ef6\u3002\u9019\u6a23\u7684\u505a\u6cd5\u53ef\u4ee5\u4e0d\u66b4\u9732\u8655\u7406 request \u7684\u5be6\u4f5c\u5167\u90e8\uff0c\u8b93 client \u7684\u7a0b\u5f0f\u78bc\u4e0d\u5bb9\u6613\u56e0\u70ba\u5167\u90e8\u7d50\u69cb\u4fee\u6539\u800c\u53d7\u5f71\u97ff\u3002</p>"},{"location":"domain-driven-design/08-breakthrough.html","title":"Ch 8: Breakthrough","text":""},{"location":"domain-driven-design/08-breakthrough.html#breakthrough","title":"\u4e00\u500b breakthrough \u7684\u6545\u4e8b","text":"<p>\u9019\u662f\u4e00\u500b\u7ba1\u7406\u806f\u5408\u8cb8\u6b3e\u7684\u7a0b\u5f0f\u3002</p> <p>\u5047\u8a2d Intel \u9700\u8981\u5efa\u9020\u4e00\u500b\u5341\u5104\u7f8e\u5143\u7684\u5de5\u5ee0\uff0c\u9700\u8981\u7533\u8acb\u8cb8\u6b3e\u3002\u56e0\u70ba\u984d\u5ea6\u592a\u5927\uff0c\u6c92\u6709\u4e00\u9593\u501f\u8cb8\u516c\u53f8\u6709\u80fd\u529b\u7368\u7acb\u627f\u64d4\uff0c\u65bc\u4e8b\u806f\u5408\u5176\u4ed6\u516c\u53f8\u5171\u540c\u652f\u6301\u5de8\u984d\u4fe1\u8cb8\u3002\u958b\u767c\u7684\u8edf\u9ad4\u8ca0\u8cac\u8ffd\u8e64\u8207\u652f\u63f4\u9019\u7a2e\u4fe1\u8cb8\u3002</p> <p>\u4ee5\u4e0b\u5c55\u793a\u6a21\u578b\u3002<code>Loan Investment</code> (\u8cb8\u6b3e\u6295\u8cc7) \u7528\u4f86\u8868\u793a\u6295\u8cc7\u8005\u5728\u4e00\u7b46 <code>Loan</code> (\u8cb8\u6b3e) \u6240\u627f\u64d4\u7684\u80a1\u4efd\uff0c\u8207\u6295\u8cc7\u8005\u5728 <code>Facility</code> (\u4fe1\u8cb8) \u6240\u6301\u7684\u80a1\u4efd\u6210\u6b63\u6bd4\u3002</p> <p></p> <p>\u7bc4\u4f8b</p> <ul> <li>\u4e00\u7b46 1000 \u842c\u7f8e\u5143\u7684 <code>Loan</code> (\u8cb8\u6b3e)</li> <li>\u9019\u7b46 <code>Loan</code> \u662f\u5f9e <code>Facility</code> (\u4fe1\u8cb8) \u4e2d\u63d0\u4f9b\u3002 (<code>Loan</code> \u4e0d\u80fd\u8d85\u904e <code>Facility</code> \u7684\u4e0a\u9650\uff0c\u5c31\u50cf\u4fe1\u7528\u5361\u7684\u5237\u5361\u7d2f\u7a4d\u91d1\u984d\u4e0d\u80fd\u8d85\u904e\u5237\u5361\u7684\u984d\u5ea6\u3002)</li> <li><code>Facility</code> (\u4fe1\u8cb8) \u4ee5\u4e0b\u4e09\u9593\u516c\u53f8\u5171\u540c\u51fa\u8cc7:<ul> <li>\u6295\u8cc7\u8005 A \u51fa\u8cc7 500 \u842c\u7f8e\u5143\uff0c\u4f54 <code>Facility</code> \u7684 50%</li> <li>\u6295\u8cc7\u8005 B \u51fa\u8cc7 300 \u842c\u7f8e\u5143\uff0c\u4f54 <code>Facility</code> \u7684 30%</li> <li>\u6295\u8cc7\u8005 C \u51fa\u8cc7 200 \u842c\u7f8e\u5143\uff0c\u4f54 <code>Facility</code> \u7684 20%</li> </ul> </li> </ul> <p><pre>77538524c724b2b0535f96860ed9e085d0a59b8c6bd13bc0a038314b65abb02bfb9e383f2b08933209ee34746254420b0ec1f5bb489b2f1e75affb7097fbc448</pre><pre>331466922d4a814b7ff3276d0b044edb45638dd20f26333d27805ad08a8854dbb774d445c13ace2f5c314ac89b89b262b521f0e4a03a2bae4fcc2f993c4361c7</pre></p> <p>\u51fa\u4e4e\u610f\u6599\u7684\u9700\u6c42: \u501f\u8cb8\u65b9\u8981\u6c42\u63d0\u6b3e\u6642\uff0c\u9280\u884c\u9818\u5c0e\u4eba\u6703\u8981\u6c42\u6295\u8cc7\u4eba\u6309\u5404\u81ea\u80a1\u4efd\u9032\u884c\u652f\u4ed8\u3002\u6295\u8cc7\u4eba\u901a\u5e38\u6703\u6309\u7167\u81ea\u5df1\u80a1\u4efd\u652f\u4ed8\uff0c\u4f46\u4ed6\u5011\u4e5f\u6703\u5354\u5546\u8981\u6c42\u5c11\u6295\u5165(\u6216\u591a\u6295\u5165)\u3002\u65bc\u662f\uff0c\u6a21\u578b\u52a0\u5165\u4e86 <code>Loan Adjustment</code> (\u8cb8\u6b3e\u8abf\u6574) \u4f86\u8655\u7406\u8655\u7406\u9700\u6c42\u3002</p> <p></p>"},{"location":"domain-driven-design/08-breakthrough.html#breakthrough_1","title":"Breakthrough","text":"<p>\u65e2\u6709\u7684\u6a21\u578b\u5c07 <code>Loan</code> \u8207 <code>Facility</code> \u7d81\u5728\u4e00\u8d77\uff0c\u4e0d\u9069\u7528\u5728\u5be6\u969b\u7684\u696d\u52d9\u3002</p> <p>\u65b0\u6a21\u578b\u61c9\u6709\u7684\u95dc\u9375: <code>Loan</code> \u8207 <code>Facility</code> \u662f\u7368\u7acb\u7684\u3002\u4f7f\u7528\u4ee5\u4e0b\u5716\u6f14\u7df4\u6578\u500b Scenarios\u3002</p> <p></p> <p>\u5716\u986f\u793a\uff0c\u4e00\u5104\u7f8e\u5143\u7684 <code>Facility</code>\uff0c\u501f\u8cb8\u65b9\u63d0\u53d6\u91d1\u984d 5000 \u842c\u7f8e\u5143\u3002\u4e09\u500b\u653e\u8cb8\u65b9\u4f9d\u7167\u539f\u5148\u627f\u8afe\u7684 <code>Facility</code> \u80a1\u4efd\u652f\u4ed8\u3002</p> <p></p> <p>\u63a5\u8457\uff0c\u501f\u8cb8\u65b9\u53c8\u63d0\u4e86\u4e00\u7b46 3000 \u842c\u7f8e\u5143\uff0cCompany B \u6c7a\u5b9a\u4e0d\u53c3\u8207 <code>Loan</code> \u800c\u6539\u7531 Company A \u627f\u64d4\u9019\u90e8\u5206\u7684\u80a1\u4efd\u3002</p> <p>\u96a8\u8457 <code>Loan</code> \u7684\u63d0\u53d6\u984d\u4e0d\u65b7\u5730\u589e\u52a0\uff0c\u8207 <code>Facility</code> \u7684\u80a1\u4efd\u6bd4\u4f8b\u4e0d\u518d\u76f8\u540c\u7684\u73fe\u8c61\u5f88\u5e38\u898b\u3002</p> <p></p> <p>\u501f\u8cb8\u65b9\u9084\u6b3e\uff0c\u91d1\u984d\u4f9d\u64da <code>Loan</code> \u7684\u80a1\u4efd\u5206\u914d\u7d66\u653e\u8cb8\u65b9\uff0c\u800c\u975e <code>Facility</code> \u7684\u80a1\u4efd\u3002\u540c\u6a23\u5730\uff0c\u5229\u606f\u4e5f\u662f\u6309\u7167 <code>Loan</code> \u7684\u80a1\u4efd\u5206\u914d\u3002</p> <p></p> <p>\u501f\u8cb8\u65b9\u4eab\u6709 <code>Facility</code> \u6b0a\u5229\u6240\u652f\u4ed8\u7684\u8cbb\u7528\uff0c\u4f9d\u7167 <code>Facility</code> \u7684\u80a1\u4efd\uff0c\u800c\u4e0d\u662f\u653e\u8cb8\u65b9\u51fa\u4e86\u591a\u5c11\u9322\u3002</p>"},{"location":"domain-driven-design/08-breakthrough.html#_1","title":"\u66f4\u6df1\u5c64\u7684\u6a21\u578b","text":"<p>\u9019\u500b\u904e\u7a0b\uff0c\u6709\u5169\u500b\u6df1\u5c64\u7684\u7406\u89e3:</p> <ol> <li>\"Investments\" \u8207 \"Loan Investments\" \u90fd\u662f\u4e00\u7a2e share (\u80a1\u4efd) \u7684\u6982\u5ff5</li> <li>share \u7121\u6240\u4e0d\u5728: share of a facility, shares of a loan, shares of a payment distribution</li> </ol> <p></p> <p>\u7bc4\u4f8b</p> <p>Loan \u7684\u80a1\u4efd\u5206\u914d:     - Company A: 500 \u842c     - Company B: 300 \u842c     - Company C: 200 \u842c</p> <p><pre>0013fbff62cea9ac0dade0b9ec22a107dcecdddfbac3dd8b1fbc5aa0c495e0495bea7cfab48578a5997a837a1f06f89f7fe2a2aeeea6f58a118dea2e4a7f2520</pre><pre>06a2cbfccfe823d862a95028ea7ca13ad15166808b9408f4b1c4d2e7dbe8f5b456071f85ce8889d42c800f2fdff8c329ef38c26b3902507f57a4a424c601cdfe</pre></p> <p>Facility \u7684\u80a1\u4efd\u5206\u914d:     - Company A: 50%     - Company B: 30%     - Company C: 20%</p> <p><pre>2649cf8f059f3364989367753c891e7f20841b58e9ba3d43b9d586907cfcc4f4429980a6b13ed66f6740778928e0f7ff0f76ff6e5a0d9f0de3b466d1ce5ccd78</pre><pre>8b71db8e25d328e9c02e7df10cec9b2edb813e668f7093eaf44447a93bf1ff65a9cdc8f2d676cb8444ec1eeeefe3848611072a2afa1dd5508c1e89891c89c8bc</pre></p> <p>\u80a1\u4efd\u6a21\u578b\u8207\u65b0\u7684\u8cb8\u6b3e\u6a21\u578b:</p> <p></p> <p>\u65b0\u6a21\u578b\u4e0d\u518d\u9700\u8981 <code>Loan Adjustment</code> \u7b49\u7279\u6b8a\u8655\u7406\u7684\u908f\u8f2f\u3002</p> <p>\u65b0\u6a21\u578b\u4e0d\u518d\u5305\u542b <code>Load Investment</code>\u3002\u66f8\u4e2d\u8868\u793a\uff0c\u5728\u9019\u500b\u904e\u7a0b\uff0c\u4ed6\u5011\u5728\u610f\u8b58\u5230 <code>Loan Investment</code> \u4e26\u975e\u9280\u884c\u5c08\u696d\u8853\u8a9e\uff0c\u96d6\u7136\u9818\u57df\u5c08\u5bb6\u5df2\u7d93\u591a\u6b21\u8868\u793a\u4ed6\u5011\u4e0d\u660e\u767d <code>Loan Investment</code> \u7684\u610f\u601d\uff0c\u4f46\u662f\u4ed6\u5011\u9084\u662f\u5c0a\u91cd\u8edf\u9ad4\u7684\u5c08\u696d\uff0c\u5047\u8a2d\u9019\u500b\u5c0d\u65bc\u8edf\u9ad4\u662f\u6709\u5e6b\u52a9\u7684\u3002\u4e8b\u5be6\u662f\uff0c<code>Loan Investment</code> \u4e4b\u6240\u4ee5\u7522\u751f\uff0c\u662f\u56e0\u70ba\u5c0d\u9818\u57df\u6c92\u6709\u5b8c\u5168\u7684\u7406\u89e3\u3002\u9818\u57df\u5c08\u5bb6\u8a8d\u70ba\u65b0\u7684\u6a21\u578b\u975e\u5e38\u5408\u7406\uff0c\u820a\u7684\u6a21\u578b\u592a\u6280\u8853\u6027\u3002</p>"},{"location":"domain-driven-design/08-breakthrough.html#_2","title":"\u65b0\u7684\u898b\u89e3","text":"<p>\"transaction\" \u5728\u8a0e\u8ad6\u4e2d\u7d93\u5e38\u51fa\u73fe\uff0c\u4ee3\u6c92\u6709\u53cd\u6620\u5728\u6a21\u578b\u4e2d\u3002</p> <p>\u4ee5\u4e0b\u662f\u53e6\u4e00\u500b breakthrough \u7522\u751f\u7684\u6a21\u578b:</p> <p></p>"},{"location":"domain-driven-design/09-making-implicit-concepts-explicit.html","title":"Ch 9: Making Implicit Concepts Explicit","text":""},{"location":"domain-driven-design/09-making-implicit-concepts-explicit.html#example-hearing-a-missing-concept-in-the-shipping-model","title":"Example: Hearing a Missing Concept in the Shipping Model","text":"<p>Quote</p> <p>The team had already developed a working application that could book a cargo. They were starting to build an \u201coperations support\u201d application that would help juggle the work orders for loading and unloading cargos at the origin and destination and at transfers between ships.</p> <p>The booking application used a routing engine to plan the trip for a cargo. Each leg of the journey was stored in a row of a database table, indicating the ID of the vessel voyage (a particular voyage by a particular ship) slated to carry the cargo, the location where it would be loaded, and the location where it would be unloaded.</p> <p></p> <p>Developer: I want to make sure the \u201ccargo bookings\u201d table has all the data that the operations application will need.</p> <p>Expert: They\u2019re going to need the whole itinerary for the <code>Cargo</code>. What information does it have now?</p> <p>Developer: The cargo ID, the vessel voyage, the loading port, and the unloading port for each leg.</p> <p>Expert: What about the date? Operations will need to contract handling work based on the expected times.</p> <p>Developer: Well, that can be derived from the schedule of the vessel voyage. The table data is normalized.</p> <p>Expert: Yes, it is normal to need the date. Operations people use these kinds of itineraries to plan for upcoming handling work.</p> <p>Developer: Yeah . . . OK, they\u2019ll definitely have access to the dates. The operations management application will be able to provide the whole loading and unloading sequence, with the date of each handling operation. The \u201citinerary,\u201d I guess you would say.</p> <p>Expert: Good. The itinerary is the main thing they\u2019ll need. Actually, you know, the booking application has a menu item that will print an itinerary or e-mail it to the customer. Can you use that somehow?</p> <p>Developer: That\u2019s just a report, I think. We won\u2019t be able to base the operations application on that.</p> <p>[Developer looks thoughtful, then excited.]</p> <p>Developer: So, this itinerary is really the link between booking and operations.</p> <p>Expert: Yes, and some customer relations, too.</p> <p>Developer: [Sketching a diagram on the whiteboard.] So would you say it is something like this?</p> <p></p> <p>Expert: Yes, that looks basically right. For each leg you\u2019d like to see the vessel voyage, the load and unload location, and time.</p> <p>Developer: So once we create the <code>Leg</code> object, it can derive the times from the vessel voyage schedule. We can make the <code>Itinerary</code> object our main point of contact with the operations application. And we can rewrite that itinerary report to use this, so we\u2019ll get the domain logic back into the domain layer.</p> <p>Expert: I didn\u2019t follow all of that, but you are right that the two main uses for the <code>Itinerary</code> are in the report in booking and in the operations application.</p> <p>Developer: Hey! We can make the <code>Routing Service</code> interface return an itinerary object instead of putting the data in the database table. That way the routing engine doesn\u2019t need to know about our tables.</p> <p>Expert: Huh?</p> <p>Developer: I mean, I\u2019ll make the routing engine just return an <code>Itinerary</code>. Then it can be saved in the database by the booking application when the rest of the booking is saved.</p> <p>Expert: You mean it isn\u2019t that way now?!</p> <p>The developer then went off to talk with the other developers involved in the routing process. They hashed out the changes to the model and the implications for the design, calling on the shipping experts when needed. They came up with the diagram.</p> <p></p> <pre>fd0e0e10ca1d2e3c0a59556f251502a822fe9300ca8e85bdf37a3c211e6e66aba840d95b04a8a6553ccb1cbeb68c96e1dc6906d47af50634ea7957389b74fabf</pre><pre>8f966abac0783dd2038a3254a425aac3da7b01ee944b92e7b7837f7cd887885bc71630b120caf5b176299aee37e1525c30438d9c0bc88ecdc28db0aff30eee68</pre> Cargo ID Voyage Id Load Loc Unload Loc 123 V1 \u6377\u904b\u4e2d\u5c71\u7ad9 \u6377\u904b\u53f0\u5317\u8eca\u7ad9 123 V2 \u6377\u904b\u53f0\u5317\u8eca\u7ad9 \u9ad8\u9435\u53f0\u5317\u8eca\u7ad9 123 V3 \u9ad8\u9435\u53f0\u5317\u8eca\u7ad9 \u9ad8\u9435\u5de6\u71df\u7ad9 <p></p>"},{"location":"domain-driven-design/09-making-implicit-concepts-explicit.html#example-earning-interest-the-hard-way","title":"Example: Earning Interest the Hard Way","text":"<p>\u5047\u5b9a\u4e00\u5bb6\u91d1\u878d\u516c\u53f8\uff0c\u8a72\u516c\u53f8\u6295\u8cc7\u65bc\u5546\u696d\u8cb8\u6b3e(commercial loans)\u548c\u5176\u4ed6\u5229\u606f\u8cc7\u7522(interest-bearing assets)\u3002\u516c\u53f8\u6709\u4e00\u500b\u61c9\u7528\u7a0b\u5f0f\u7528\u4f86\u8ffd\u8e64\u9019\u4e9b\u6295\u8cc7\u8207\u6536\u76ca\u3002\u6bcf\u665a\uff0c\u7a0b\u5f0f\u6703\u57f7\u884c\u8173\u672c\uff0c\u8a08\u7b97\u7576\u5929\u7684\u5229\u606f(interest)\u548c\u8cbb\u7528(fees)\uff0c\u4e26\u8a18\u9304\u5230\u516c\u53f8\u7684\u8ca1\u52d9\u8edf\u9ad4\u3002</p> <p></p> <p>\u665a\u4e0a\u7684\u8173\u672c\uff0c\u7a0b\u5f0f\u8d70\u8a2a\u6bcf\u500b <code>Asset</code>\uff0c\u4e26\u57f7\u884c <code>calculateInterestForDate()</code> \u8a08\u7b97\u7576\u5929\u7684\u5229\u606f(interest)\u3002\u8173\u672c\u5c07\u56de\u50b3\u503c(the amount earned) \u8207\u6307\u5b9a\u7684 ledger \u540d\u7a31\uff0c\u50b3\u9001\u7d66\u8ca1\u52d9\u8edf\u9ad4\u7684 Service \u516c\u958b\u7684\u4ecb\u9762\u3002\u8ca1\u52d9\u8edf\u9ad4\u5c07 amount \u904e\u5230 ledger \u4e2d\u3002\u76f8\u4f3c\u7684\u6d41\u7a0b\uff0c\u8173\u672c\u8a08\u7b97\u6bcf\u4e00\u500b <code>Asset</code> \u7684\u8cbb\u7528(fee)\uff0c\u4e26\u8a18\u9304\u5230\u4e0d\u540c\u7684 ledger \u4e2d\u3002</p> <p>\u958b\u767c\u4eba\u54e1\u5728\u8a08\u7b97\u5229\u606f\u906d\u9047\u8d8a\u4f86\u8d8a\u8907\u96dc\u7684\u554f\u984c\uff0c\u4ed6\u61f7\u7591\u662f\u5426\u6709\u66f4\u9069\u5408\u7684\u6a21\u578b\uff0c\u6240\u4ee5\u4ed6\u8acb\u6559\u5c08\u5bb6\u3002</p> <p>Quote</p> <p>Developer: Our Interest Calculator is getting out of hand.</p> <p>Expert: That is a complicated part. We still have more cases we\u2019ve been holding back.</p> <p>Developer: I know. We can add new interest types by substituting a different Interest Calculator. But what we\u2019re having the most trouble with right now is all these special cases when they don\u2019t pay the interest on schedule.</p> <p>Expert: Those really aren\u2019t special cases. There\u2019s a lot of flexibility in when people pay.</p> <p>Developer: Back when we factored out the Interest Calculator from the Asset, it helped a lot. We may need to break it up more.</p> <p>Expert: OK.</p> <p>Developer: I was thinking you might have a way of talking about this interest calculation.</p> <p>Expert: What do you mean?</p> <p>Developer: Well, for example, we\u2019re tracking the interest (\u5229\u606f) due but unpaid within an accounting period (\u6703\u8a08\u671f\u9593). Do you have a name for that?</p> <p>Expert: Well, we don\u2019t really do it like that. The interest earned and the payment are quite separate postings.</p> <p>Developer: So you don\u2019t need that number?</p> <p>Expert: Well, sometimes we might look at it, but it isn\u2019t the way we do business.</p> <p>Developer: OK, so if the payment (\u4ed8\u6b3e) and interest (\u5229\u606f) are separate, maybe we should model them that way. How does this look? [Sketching on whiteboard]</p> <p></p> <p>Expert: It makes sense, I guess. But you just moved it from one place to another.</p> <p>Developer: Except now the Interest Calculator only keeps track of interest earned, and the Payment keeps that number separately. It hasn\u2019t simplified it a lot, but does it better reflect your business practice?</p> <p>Expert: Ah. I see. Could we have interest history, too? Like the Payment History.</p> <p>Developer: Yes, that has been requested as a new feature. But that could have been added onto the original design.</p> <p>Expert: Oh. Well, when I saw interest and Payment History separated like that, I thought you were breaking up the interest to organize it more like the Payment History. Do you know anything about accrual basis accounting (\u61c9\u8a08\u5236\u6703\u8a08)?</p> <p>Developer: Please explain.</p> <p>Expert: Each day, or whenever the schedule calls for, we have an interest accrual (\u61c9\u8a08\u5229\u606f) that gets posted to a ledger (\u6536\u652f\u7e3d\u5e33). The payments are posted a different way. This aggregate (\u5408\u8a08) you have here is a little awkward.</p> <p>Developer: You\u2019re saying that if we keep a list of \u201caccruals,\u201d they could be aggregated or . . . \u201cposted\u201d as needed.</p> <p>Expert: Probably posted on the accrual date, but yes, aggregated anytime. Fees work the same way, posted to a different ledger, of course.</p> <p>Developer: Actually, the interest calculation would be simpler if it was done just for one day, or period. And then we could just hang on to them all. How about this?</p> <p></p> <p>Expert: Sure. It looks good. I\u2019m not sure why this would be easier for you. But basically, what makes any asset valuable is what it can accrue in interest, fees, and so on.</p> <p>Developer: You said fees work the same way? They . . . what was it . . . post to different ledgers (\u5206\u985e\u5e33)?</p> <p></p> <p>Developer: With this model, we get the interest calculation, or rather, the accrual calculation logic that was in the Interest Calculator separated from tracking. And I hadn\u2019t noticed until now how much duplication there is in the Fee Calculator. Also, now the different kinds of fees can easily be added.</p> <p>Expert: Yes, the calculation was correct before, but I can see everything now.</p> <p>\u6700\u7d42\uff0c\u958b\u767c\u4eba\u54e1\u5f97\u5230\u4ee5\u4e0b\u6a21\u578b:</p> <p></p> <p>\u91cd\u69cb\u5f8c\u7684\u7a0b\u5f0f\uff0c\u6bcf\u665a\u8173\u672c\u6703\u8d70\u8a2a\u6bcf\u4e00\u500b <code>Asset</code>\uff0c\u4e26\u57f7\u884c <code>calculateAccrualsThrough(Date)</code>\uff0c\u5176\u56de\u50b3 <code>Accural</code> \u7684\u96c6\u5408\uff0c\u5176\u91d1\u984d\u6703\u88ab\u904e\u5e33\u5230\u5c0d\u61c9\u7684\u5206\u985e\u5e33(ledger)\u4e2d\u3002</p>"},{"location":"domain-driven-design/09-making-implicit-concepts-explicit.html#example-earning-interest-by-the-book","title":"Example: Earning Interest by the Book","text":"<p>Accrual Basis Accounting</p> <p>This method recognizes income when it is earned, even if it is not paid. All expenses also show when they are incurred whether they have been paid for or billed to be paid at a later date. Any obligation due, including taxes, will be shown as expense.</p> <p>-- Finance and Accounting: How to Keep Your Books and Manage Your Finances Without an MBA, a CPA or a Ph.D., by Suzanne Caplan (Adams Media, 2000)</p> <p></p>"},{"location":"domain-driven-design/09-making-implicit-concepts-explicit.html#_1","title":"\u5c07\u4e0d\u660e\u986f\u7684\u6982\u5ff5\u8868\u793a\u5728\u6a21\u578b\u4e2d","text":""},{"location":"domain-driven-design/09-making-implicit-concepts-explicit.html#_2","title":"\u660e\u78ba\u8868\u793a\u51fa\u9650\u5236","text":"<p>\u5716\u4e2d\u5c07 <code>Bucket</code> (\u6876\u5b50) \u7684 <code>contents</code> (\u5167\u5bb9) \u4e0d\u80fd\u8d85\u904e <code>capacity</code> (\u5bb9\u91cf) \u7684\u9650\u5236\u660e\u78ba\u8868\u793a\u51fa\u4f86\u3002</p> <p>\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u5be6\u4f5c model \u7684\u9650\u5236\u689d\u4ef6\u3002</p> \u6a21\u578b\u7684\u5be6\u4f5c<pre><code>class Bucket {\n  private float capacity;\n  private float contents;\n\n  public void pourIn(float addedVolume) {\n    if(contents + addedVolume &gt; capacity) {\n      contents = capacity;\n    } else {\n      contents = contents + addedVolume;\n    }\n  }\n}\n</code></pre> <p>\u4ee5\u4e0b\u7248\u672c\u7684\u5be6\u4f5c\uff0c\u8b93\u7a0b\u5f0f\u78bc\u8207\u6a21\u578b\u7684\u95dc\u4fc2\u66f4\u52a0\u660e\u986f\u3002</p> \u6bd4\u8f03\u597d\u7684\u5be6\u4f5c: \u5c07\u898f\u5247\u62bd\u6210 method<pre><code>class Bucket {\n  private float capacity;\n  private float contents;\n\n  public void pourIn(float addedVolume) {\n    float volumePresent = contents + addedVolume;\n    contents = constrainedToCapacity(volumePresent);\n  }\n\n  private float constrainedToCapacity(float volumePlacedIn) {\n    if(volumePlacedIn &gt; capacity) {\n      return capacity;\n    } else {\n      return volumePlacedIn;\n    }\n  }\n}\n</code></pre> <p>\u5982\u6b64\uff0c\u9019\u689d\u898f\u5247\u5c31\u6709\u540d\u6709\u59d3\u4e86\u3002</p>"},{"location":"domain-driven-design/09-making-implicit-concepts-explicit.html#overbooking-policy","title":"\u7bc4\u4f8b: Overbooking Policy","text":"<p>\u7b2c\u4e00\u7ae0\u63d0\u5230\u7684\u7bc4\u4f8b: \u904b\u8f38\u696d\u52d9\u5e38\u898b\u7684\u696d\u52d9\u6163\u4f8b\uff0c\u9810\u5b9a\u8d85\u51fa\u904b\u8f38\u80fd\u529b 10% \u7684\u8ca8\u7269\u3002</p> <p></p>"},{"location":"domain-driven-design/09-making-implicit-concepts-explicit.html#specification","title":"Specification","text":"<p>\u7528\u4f86\u63cf\u8ff0 Boolean test\u3002\u4f8b\u5982\uff0c<code>Invoice</code> \u985e\u5225\uff0c\u6709\u4e00\u500b\u6f14\u7b97\u6cd5\u5224\u5225\u662f\u5426\u5df2\u7d93\u904e\u671f\u3002</p> <pre><code>public boolean isOverduce() {\n  Date currentDate = new Date();\n  return currentDate.after(dueDate);\n}\n</code></pre> <p>\u5728 <code>Invoice</code> \u985e\u5225\u4e2d\uff0c\u53ef\u80fd\u6709\u53e6\u4e00\u500b method <code>isDelinquent()</code>\uff0c\u4e5f\u662f\u7528\u4f86\u6aa2\u67e5\u662f\u5426\u904e\u671f (\u662f\u5426\u62d6\u6b20\u6b3e\u9805)\u3002\u96a8\u8457\u767c\u5c55\uff0c\u53ef\u80fd\u53c3\u96dc\u5176\u4ed6\u908f\u8f2f\uff0c\u50cf\u662f\u5bec\u9650\u671f(grace period)\u3001\u6216\u53c3\u8003\u4ed8\u6b3e\u6b77\u53f2\u7d00\u9304\u7b49\u3002\u800c\u4e14\uff0c\u53ef\u80fd\u9084\u6703\u958b\u59cb\u76f8\u4f9d\u5176\u4ed6 domain object\u3001subsystems\u7b49\u3002\u7136\u800c\uff0c\u9577\u51fa\u4f86\u7684\u9019\u4e9b\u76f8\u4f9d\u95dc\u4fc2\uff0c\u53ef\u80fd\u8207 <code>Invoice</code> \u672c\u8eab\u7684\u610f\u6db5\u6c92\u4ec0\u9ebc\u95dc\u806f\u3002</p> <p>\u5546\u696d\u908f\u8f2f\u901a\u5e38\u4e0d\u9069\u5408\u653e\u5728 Entity \u6216 Value Object \u4e2d\u3002\u4f46\u662f\uff0c\u628a\u5546\u696d\u908f\u8f2f\u79fb\u51fa domain layer \u7684\u4f5c\u6cd5\u66f4\u7cdf\u7cd5\u3002</p> <p>\u5c07 Boolean test \u63d0\u53d6\u5230\u55ae\u7368\u7684 Value Object \u4e2d\u3002\u6b64\u7269\u4ef6\u7528\u65bc\u8a08\u7b97\u53e6\u4e00\u500b\u7269\u4ef6\uff0c\u8a55\u4f30\u67d0\u500b\u689d\u4ef6\u662f\u5426\u70ba\u771f\u3002</p> <p></p> <p>\u5716\u4e2d\u7684 <code>Invoice Delinquency</code> \u7a31\u4f5c Specification\uff0c\u7528\u4f86\u6e2c\u8a66\u7269\u4ef6\uff0c\u6aa2\u67e5\u4ed6\u5011\u662f\u5426\u6eff\u8db3\u6307\u5b9a\u7684\u689d\u4ef6\u3002\u63db\u53e5\u8a71\u8aaa\uff0cSpecification \u5c31\u662f\u4e00\u500b Predicate\u3002</p> <p>\u5c07\u62d6\u6b20\u898f\u5247\u63d0\u53d6\u6210 Specification\uff0c\u66f4\u8a73\u7d30\u7684\u63cf\u8ff0\u898f\u5247\u3002\u4ee5\u4e0b\u7bc4\u4f8b\u4f7f\u7528 object diagram \u8aaa\u660e\u3002</p> <ul> <li>\u767c\u7968 inv123 \u5728 2001/4/6 \u8a55\u4f30\uff0c\u5df2\u904e\u671f 32 \u5929\u3002</li> <li>\u4fe1\u8b7d\u826f\u597d\u7684\u5ba2\u6236\u5bec\u9650\u671f\u662f 60 \u5929\uff0c\u975e\u4fe1\u8b7d\u826f\u597d\u7684\u5ba2\u6236\u5bec\u9650\u671f\u662f 20 \u5929\u3002</li> <li>enron \u975e\u4fe1\u8b7d\u826f\u597d\u7684\u5ba2\u6236\uff0c\u53ea\u6709 20 \u5929\u7684\u5bec\u9650\u671f\u3002</li> </ul> <p>\u7531\u65bc\u5df2\u904e 20 \u5929\u5bec\u9650\u671f\uff0c inv123 \u70ba\u62d6\u6b20\u7968\u64da\u3002</p> <p></p>"},{"location":"domain-driven-design/09-making-implicit-concepts-explicit.html#specification_1","title":"\u5957\u7528\u8207\u5be6\u4f5c Specification","text":"<p>Specification \u7684\u4e09\u7a2e\u76ee\u7684:</p> <ol> <li>\u9a57\u8b49 (validation)</li> <li>\u9078\u64c7 (selection) \u6216 \u67e5\u8a62 (query)</li> <li>\u5efa\u7acb (creation)</li> </ol>"},{"location":"domain-driven-design/09-making-implicit-concepts-explicit.html#validation","title":"Validation","text":"Domain Layer \u7684\u7a0b\u5f0f\u78bc<pre><code>class DelinquentInvoiceSpecification extends InvoiceSpecification {\n  private Date currentDate;\n  // An instance is used and discarded on a single date\n\n  public DelinquentInvoiceSpecification(Date currentDate) {\n    this.currentDate = currentDate;\n  }\n\n  public boolean isSatisfiedBy(Invoice candidate) {\n    int gracePeriod = candidate.customer().getPaymentGracePeriod();\n    Date firmDeadline = DateUtility.addDaysToDate( candidate.dueDate(), gracePeriod);\n    return currentDate.after(firmDeadline);\n  }\n}\n</code></pre> <p>\u7576\u6211\u5011\u9700\u8981\u6a19\u8a18\u62d6\u6b20\u6b3e\u9805\u7684\u5ba2\u6236\uff0c\u6703\u5728 Application layer \u6709\u985e\u4f3c\u4ee5\u4e0b\u7684\u7a0b\u5f0f\u78bc\u3002</p> Application layer \u7684\u7a0b\u5f0f\u78bc<pre><code>public boolean accountIsDelinquent(Customer customer) {\n   Date today = new Date();\n   Specification delinquentSpec = new DelinquentInvoiceSpecification(today);\n   Iterator it = customer.getInvoices().iterator();\n   while (it.hasNext()) {\n      Invoice candidate = (Invoice) it.next();\n      if (delinquentSpec.isSatisfiedBy(candidate))\n        return true;\n   }\n   return false;\n}\n</code></pre>"},{"location":"domain-driven-design/09-making-implicit-concepts-explicit.html#selection-or-querying","title":"Selection or Querying","text":"<p>\u9700\u6c42\u662f\u5217\u51fa\u6240\u6709\u62d6\u6b20\u6b3e\u9805\u7684\u5ba2\u6236\u3002</p> <pre><code>public Set selectSatisfying(InvoiceSpecification spec) {\n  Set results = new HashSet();\n  Iterator it = invoices.iterator();\n  while(it.hasNext()) {\n    Invoice candidate = (Invoice) it.next();\n    if(spec.isSatisfiedBy(candidate))\n      result.add(candidate);\n  }\n  return results;\n}\n\nSet delinquentInvoices = invoiceRepository.selectSatisfying(new DelinquentInvoiceSpecification(currentDate));\n</code></pre> <p></p> <pre><code>public String asSQL() {\n    return \"SELECT * FROM INVOICE, CUSTOMER\" +\n           \" WHERE INVOICE.CUST_ID = CUSTOMER.ID\" +\n           \" AND INVOICE.DUE_DATE + CUSTOMER.GRACE_PERIOD\" +\n           \"  &lt; \" + SQLUtility.dateAsSQL(currentDate);\n}\n</code></pre> <p>\u4ee5\u4e0a\u4f5c\u6cd5\u7684\u554f\u984c: SQL \u66b4\u9732\u5230 Domain Layer\u3002</p> <p>\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u5c07 SQL \u653e\u5230 Repository \u4e2d\uff0c\u6539\u9032\u4e86\u9019\u500b\u554f\u984c\u3002</p> <pre><code>public class InvoiceRepository {\n\n  public Set selectWhereGracePeriodPast(Date aDate){\n    //This is not a rule, just a specialized query\n    String sql = whereGracePeriodPast_SQL(aDate);\n    ResultSet queryResultSet = SQLDatabaseInterface.instance().executeQuery(sql);\n    return buildInvoicesFromResultSet(queryResultSet);\n  }\n\n  public String whereGracePeriodPast_SQL(Date aDate) {\n    return \"SELECT * FROM INVOICE, CUSTOMER\" +\n           \"  WHERE INVOICE.CUST_ID = CUSTOMER.ID\" +\n           \"  AND INVOICE.DUE_DATE + CUSTOMER.GRACE_PERIOD\" +\n           \"    &lt; \" + SQLUtility.dateAsSQL(aDate);\n  }\n\n  public Set selectSatisfying(InvoiceSpecification spec) {\n    return spec.satisfyingElementsFrom(this);\n  }\n}\n\npublic class DelinquentInvoiceSpecification {\n  // Basic DelinquentInvoiceSpecification code here\n\n  public Set satisfyingElementsFrom(InvoiceRepository repository) {\n    //Delinquency rule is defined as: \"grace period past as of current date\"\n    return repository.selectWhereGracePeriodPast(currentDate);\n  }\n}\n</code></pre> <pre>e2f4585db145122590fd2295b7a41ff8ff95d78c819fb56c45b99cdfb29a19790871b4cee6bc0fbe8d37c4afdffadb321807908dcfbd86275a59b10d952190ab</pre><pre>b0f6ab05e806fa7dfb154051721be77d7fadf6d1755774bbebf3bfa819fd3c1f3160fb974a1355312e8b8374765664e156b32b72efaabb1721350c622f474005</pre> <p>\u96d6\u7136 SQL \u5be6\u4f5c\u6c92\u6709\u64fa\u5728 Specification \u4e2d\uff0c\u4f46\u662f Specification \u5df2\u7d93\u8868\u660e\u8d85\u904e\u5bec\u9650\u671f\u5373\u70ba\u62d6\u6b20\u6b3e\u9805\u3002</p> <p>\u7136\u800c\uff0c\u9019\u7a2e\u4f5c\u6cd5\u9084\u6709\u554f\u984c: <code>InvoiceRepository.whereGracePeriodPast_SQL</code> \u53ea\u9069\u7528\u5728\u7279\u5b9a\u7684\u9700\u6c42\u60c5\u5883\u3002\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\uff0c\u5c07\u904e\u6ffe\u7684\u7a0b\u5f0f\u78bc\u653e\u5230 Specification \u4e2d\uff0c\u6539\u9032\u6b64\u554f\u984c\u3002</p> <pre><code>public class InvoiceRepository {\n\n  public Set selectWhereDueDateIsBefore(Date aDate) {\n    String sql = whereDueDateIsBefore_SQL(aDate);\n    ResultSet queryResultSet = SQLDatabaseInterface.instance().executeQuery(sql);\n    return buildInvoicesFromResultSet(queryResultSet);\n  }\n\n  public String whereDueDateIsBefore_SQL(Date aDate) {\n    return \"SELECT * FROM INVOICE\" +\n           \"  WHERE INVOICE.DUE_DATE\" +\n           \"     &lt; \" + SQLUtility.dateAsSQL(aDate);\n   }\n\n  public Set selectSatisfying(InvoiceSpecification spec) {\n    return spec.satisfyingElementsFrom(this);\n  }\n}\n\npublic class DelinquentInvoiceSpecification {\n  //Basic DelinquentInvoiceSpecification code here\n\n  public Set satisfyingElementsFrom(InvoiceRepository repository) {\n    Collection pastDueInvoices = repository.selectWhereDueDateIsBefore(currentDate);\n\n    Set delinquentInvoices = new HashSet();\n    Iterator it = pastDueInvoices.iterator();\n    while (it.hasNext()) {\n      Invoice anInvoice = (Invoice) it.next();\n      if (this.isSatisfiedBy(anInvoice))\n        delinquentInvoices.add(anInvoice);\n    }\n    return delinquentInvoices;\n  }\n}\n</code></pre> <pre>109a83bf6f2dd42d3e1542204cca560b0bc09983595c8f341c1ea3d722e0d38dcc535bcb00993f46dfe01c010d32b159b62a45f99d5960c7bc7c867dab5bd708</pre><pre>d10a543e8e55bbc17830f8f5a4c98bda231408922b3b188cb5d04072f85422ed3a3f5eb35b08967127591c513049af942037134a40838e5365b708f893a92886</pre> <p>\u6b64\u505a\u6cd5\u6703\u5c07\u66f4\u591a\u7684 invoice \u8f09\u5165\u8a18\u61b6\u9ad4\u4e2d\uff0c\u7136\u5f8c\u518d\u9032\u884c\u904e\u6ffe\uff0c\u76f8\u8f03\u65bc\u524d\u4e00\u7248\u7684\u7a0b\u5f0f\u6548\u80fd\u6703\u6bd4\u8f03\u4e0d\u597d\u4e00\u9ede\u3002\u7528\u300c\u6548\u7387\u300d\u4ea4\u63db\u300c\u66f4\u597d\u7684\u8cac\u4efb\u5206\u96e2\u300d\u9700\u8981\u6839\u64da\u60c5\u5883\u8a55\u4f30\u53d6\u6368\u3002</p>"},{"location":"domain-driven-design/09-making-implicit-concepts-explicit.html#creation","title":"Creation","text":""},{"location":"domain-driven-design/09-making-implicit-concepts-explicit.html#chemical-warehouse-packer","title":"\u7bc4\u4f8b: Chemical Warehouse Packer","text":"<p>\u64b0\u5beb\u8edf\u9ad4\u5c0b\u627e\u6709\u6548\u4e14\u5b89\u5168\u7684\u5132\u5b58\u5316\u5b78\u7269\u54c1\u7684\u65b9\u5f0f\u3002</p> <p></p> <p>\u6bcf\u7a2e\u5316\u5b78\u7269\u54c1\u90fd\u6709\u5bb9\u5668\u898f\u683c:</p> Chemical Container Specification TNT (2,4,6-\u4e09\u785d\u57fa\u7532\u82ef) \u9632\u7206\u5bb9\u5668 (Armored container) Sand (\u6c99\u5b50) Biological Sample (\u751f\u7269\u6a23\u672c) \u4e0d\u80fd\u8207\u6613\u7206\u7528\u54c1\u6df7\u88dd Ammonia (\u963f\u6469\u5c3c\u4e9e, \u6c28\u6c34) \u901a\u98a8\u5bb9\u6613 <p>\u6211\u5011\u5c07\u4ed6\u64b0\u5beb\u6210 Container Specification\uff0c\u6211\u5011\u53ef\u4ee5\u64b0\u5beb\u4e00\u500b\u5c07\u5316\u5b78\u7528\u54c1\u6df7\u88dd\u5728\u5bb9\u5668\u7684\u65b9\u6cd5\uff0c\u4e26\u6aa2\u9a57\u662f\u5426\u6eff\u8db3\u7d04\u675f\u689d\u4ef6:</p> Container Features Contents Specification Satisfied? Armored (\u9632\u7206) 20 lbs. TNT500 lbs. sand \u2713 50 lbs biological sameple \u2713 ammonia \u2717 <p>\u5be6\u4f5c\u793a\u610f\u7a0b\u5f0f\u78bc:</p> <pre><code>public class ContainerSpecification {\n  private ContainerFeature requiredFeature;\n\n  public ContainerSpecification(ContainerFeature reuired) {\n    requiredFeature = required;\n  }\n\n  boolean isSatisfiedBy(Container aContainer) {\n    return aContainer.getFeatures().contains(requiredFeature);\n  }\n}\n\npublic class Container {\n\n  private Collection&lt;ContainerFeature&gt; features;\n\n  boolean isSafelyPacked() {\n    Iterator it = content.iterator();\n    while (it.hasNext()) {\n      Drum drum = (Drum) it.next();\n      if (!drum.containerSpecfication().isSatisfiedBy(this))\n        return false;\n    }\n    return true;\n  }\n}\n\ntnt.setContainerSpecification(new ContainerSpecification(ARMORED));\n</code></pre> <p>\u76e3\u63a7\u6240\u6709\u5316\u5b78\u7528\u54c1\u662f\u5426\u5b89\u5168\u5132\u5b58:</p> <pre><code>Iterator it = containers.iterator();\nwhile (it.hasNext()) {\n  Container container = (Container) it.next();\n  if (!container.isSafelyPacked())\n    unsafeContainers.add(container);\n}\n</code></pre> <p>\u4e0d\u904e\u9700\u6c42\u6c92\u6709\u8981\u64b0\u5beb\u76e3\u63a7\u7a0b\u5f0f\u3002\u6211\u5011\u9700\u8981\u64b0\u5beb\u7684\u662f pack (\u5305\u88dd) \u7a0b\u5f0f\uff0c\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u9700\u8981\u6309 Specification \u5c0d drums \u9032\u884c\u5305\u88dd\u3002</p> <pre><code>public interface WarehousePacker {\n  public void pack(\n    Collection&lt;Container&gt; containersToFill,\n    Collection&lt;Drum&gt; drumsToPack\n  ) throws NoAnswerFoundException;\n\n    /* ASSERTION: At end of pack(), the ContainerSpecification\n    of each Drum shall be satisfied by its Container.\n    If no complete solution can be found, an exception shall\n    be thrown. */\n}\n</code></pre>"},{"location":"domain-driven-design/09-making-implicit-concepts-explicit.html#a-working-prototype-of-the-warehouse-packer","title":"\u7bc4\u4f8b: A Working Prototype of the Warehouse Packer","text":"<pre><code>public class Container {\n  private double capacity;\n  private Set&lt;Drum&gt; contents; //Drums\n\n  public boolean hasSpaceFor(Drum aDrum) {\n    return remainingSpace() &gt;= aDrum.getSize();\n  }\n\n  public double remainingSpace() {\n    double totalContentSize = 0.0;\n    Iterator it = contents.iterator();\n    while (it.hasNext()) {\n      Drum aDrum = (Drum) it.next();\n      totalContentSize = totalContentSize + aDrum.getSize();\n    }\n    return capacity \u2013 totalContentSize;\n  }\n\n  public boolean canAccommodate(Drum aDrum) {\n     return hasSpaceFor(aDrum) &amp;&amp;\n       aDrum.getContainerSpecification().isSatisfiedBy(this);\n  }\n}\n\npublic class PrototypePacker implements WarehousePacker {\n\n  public void pack(Collection containers, Collection drums)\n                               throws NoAnswerFoundException {\n\n    /* This method fulfills the ASSERTION as written. However,\n       when an exception is thrown, Containers' contents may\n       have changed. Rollback must be handled at a higher\n       level. */\n\n    Iterator it = drums.iterator();\n    while (it.hasNext()) {\n      Drum drum = (Drum) it.next();\n      Container container =\n        findContainerFor(containers, drum);\n      container.add(drum);\n    }\n  }\n  public Container findContainerFor(\n               Collection containers, Drum drum)\n               throws NoAnswerFoundException {\n    Iterator it = containers.iterator();\n    while (it.hasNext()) {\n      Container container = (Container) it.next();\n      if (container.canAccommodate(drum))\n        return container;\n    }\n    throw new NoAnswerFoundException();\n  }\n}\n</code></pre> <p>\u7a0b\u5f0f\u78bc\u6709\u4e0d\u8db3\u53ef\u4ee5\u6539\u9032\u4e4b\u8655\uff0c\u4e0d\u904e\u5b83\u53ea\u662f\u500b\u7bc4\u4f8b\u5c55\u793a creation \u7684 specification\u3002</p>"},{"location":"domain-driven-design/10-supple-design.html","title":"Ch 10: Supple Design","text":"<p>\u4e00\u4e9b\u6709\u52a9\u65bc\u9054\u5230 supple design \u7684 patterns\u3002</p> <p></p>"},{"location":"domain-driven-design/10-supple-design.html#intention-revealing-interfaces","title":"Intention-Revealing Interfaces","text":""},{"location":"domain-driven-design/10-supple-design.html#refactoring-a-paint-mixing-application","title":"\u7bc4\u4f8b: Refactoring: A Paint-Mixing (\u8abf\u6f06) Application","text":"<p>\u4e00\u500b\u6cb9\u6f06\u5546\u5e97\u7684\u7a0b\u5f0f\uff0c\u53ef\u4ee5\u5c55\u793a\u7d66\u5ba2\u6236\u6a19\u6e96\u8abf\u6f06\u5f8c\u7684\u7d50\u679c\u3002\u4ee5\u4e0b\u662f\u521d\u59cb\u8a2d\u8a08\uff0c\u4ed6\u6709\u4e00\u500b\u55ae\u4e00 domain  class\u3002</p> <p></p> <p>\u6211\u5011\u8981\u77e5\u9053 <code>paint(Point)</code> \u505a\u4ec0\u9ebc\u7684\u552f\u4e00\u65b9\u6cd5\u5c31\u662f\u53bb\u8b80\u4ed6\u5be6\u4f5c\u7a0b\u5f0f\u78bc:</p> <pre><code>public void paint(Paint paint) {\n  v = v + paint.getV(); //After mixing, volume is summed\n  // Omitted many lines of complicated color mixing logic\n  // ending with the assignment of new r, b, and y values.\n}\n</code></pre> <p>\u7a0b\u5f0f\u78bc\u770b\u8d77\u4f86\u50cf\u662f\uff0c\u5169\u500b <code>Paint</code> \u6df7\u5408\u5f8c\uff0c\u9ad4\u7a4d (volume) \u589e\u52a0\u4e86\uff0c\u984f\u8272\u6df7\u5408\u4e86\u3002\u53e6\u4e00\u500b\u89d2\u5ea6\uff0c\u66ff\u9019\u500b method \u64b0\u5beb\u6e2c\u8a66\u3002</p> <pre><code>public void testPaint() {\n   // Create a pure yellow paint with volume=100\n   Paint yellow = new Paint(100.0, 0, 50, 0);\n   // Create a pure blue paint with volume=100\n   Paint blue = new Paint(100.0, 0, 0, 50);\n\n   // Mix the blue into the yellow\n   yellow.paint(blue);\n\n   // Result should be volume of 200.0 of green paint\n   assertEquals(200.0, yellow.getV(), 0.01);\n   assertEquals(25, yellow.getB());\n   assertEquals(25, yellow.getY());\n   assertEquals(0, yellow.getR());\n}\n</code></pre> <p>\u4f46\u662f\uff0c\u9019\u500b\u6e2c\u8a66\u7a0b\u5f0f\u78bc\u4e26\u6c92\u6709\u544a\u8a34\u6211\u5011 <code>paint</code> \u505a\u4e86\u4ec0\u9ebc\u3002\u8b93\u6211\u5011\u91cd\u65b0\u7de8\u5beb\u6e2c\u8a66\uff0c\u4f7f\u5f97\u4ed6\u662f\u4ee5 client \u7684\u89d2\u5ea6\u4f86\u770b\u5f85\u3002</p> <pre><code>public void testPaint() {\n   // Start with a pure yellow paint with volume=100\n   Paint ourPaint = new Paint(100.0, 0, 50, 0);\n   // Take a pure blue paint with volume=100\n   Paint blue = new Paint(100.0, 0, 0, 50);\n\n   // Mix the blue into the yellow\n   ourPaint.mixIn(blue);\n\n   // Result should be volume of 200.0 of green paint\n   assertEquals(200.0, ourPaint.getVolume(), 0.01);\n   assertEquals(25, ourPaint.getBlue());\n   assertEquals(25, ourPaint.getYellow());\n   assertEquals(0, ourPaint.getRed());\n}\n</code></pre> <p></p>"},{"location":"domain-driven-design/10-supple-design.html#side-effect-free-functions","title":"Side-Effect-Free Functions","text":""},{"location":"domain-driven-design/10-supple-design.html#refactoring-the-paint-mixing-application-again","title":"\u7bc4\u4f8b: Refactoring the Paint-Mixing Application Again","text":"<pre><code>public void mixIn(Paint other) {\n  volume = volume.plus(other.getVolume());\n  // Many lines of complicated color-mixing logic\n  // ending with the assignment of new red, blue,\n  // and yellow values.\n}\n</code></pre> <p>Color \u662f\u5f88\u91cd\u8981\u7684\u6982\u5ff5\uff0c\u628a\u5b83\u62bd\u51fa\u8b8a\u6210\u4e00\u500b\u660e\u78ba\u7684\u7269\u4ef6\u3002</p> <p></p> <p>\u6cb9\u6f06\u7684\u8abf\u8272\uff0c\u8207 RGB \u8abf\u8272\u662f\u4e0d\u540c\u7684\uff0c\u9700\u8981\u53cd\u6620\u5728\u540d\u7a31\u4e0a\uff0c\u5c07\u5176\u547d\u540d\u6210 <code>Pigment Color</code> (\u984f\u6599\u984f\u8272)\u3002Color \u5c0d\u61c9\u7684\u64cd\u4f5c\u4e5f\u4e00\u4f75\u79fb\u51fa\u3002<code>Pigment Color</code> \u662f Value Object\uff0c\u662f immutable object\uff0c\u63d0\u4f9bSide-Effect-Free Functions\u3002</p> <pre><code>public class PigmentColor {\n  public PigmentColor mixedWith(PigmentColor other,\n                                double ratio) {\n    // Many lines of complicated color-mixing logic\n    // ending with the creation of a new PigmentColor object\n    // with appropriate new red, blue, and yellow values.\n  }\n}\n\npublic class Paint {\n  public void mixIn(Paint other) {\n     volume = volume + other.getVolume();\n     double ratio = other.getVolume() / volume;\n     pigmentColor = pigmentColor.mixedWith(other.pigmentColor(), ratio);\n  }\n}\n</code></pre> <p></p>"},{"location":"domain-driven-design/10-supple-design.html#assertions","title":"Assertions","text":""},{"location":"domain-driven-design/10-supple-design.html#back-to-paint-mixing","title":"\u7bc4\u4f8b: Back to Paint Mixing","text":"<p>\u5728\u524d\u9762\u7684\u7bc4\u4f8b\u4e2d\uff0c<code>p1.maxIn(p2)</code> \u64cd\u4f5c\u5f8c\uff0c<code>p2</code> \u7684\u72c0\u614b\u8b8a\u5316\u4e26\u6c92\u6709\u8aaa\u660e\u3002\u5c0d\u65bc\u73fe\u5be6\u7684\u7406\u89e3\uff0c\u6df7\u5408\u52d5\u4f5c\u61c9\u7576\u662f\u4e00\u500b\u6cb9\u6f06(<code>p2</code>)\u52a0\u5230\u53e6\u4e00\u500b\u6cb9\u6f06(<code>p1</code>)\u4e2d\u3002\u56e0\u6b64\uff0c<code>p1</code> \u7684\u9ad4\u7a4d\u61c9\u52a0\u4e0a <code>p2</code> \u7684\u9ad4\u7a4d\uff0c\u4e26\u4e14 <code>p2</code> \u7684\u9ad4\u7a4d\u61c9\u6b78\u96f6\u3002\u4f46\u662f\u76ee\u524d\u5be6\u4f5c\u662f\uff0c<code>p1</code> \u7684\u9ad4\u7a4d\u6703\u52a0\u4e0a <code>p2</code> \u7684\u9ad4\u7a4d\uff0c\u800c <code>p2</code> \u7684\u9ad4\u7a4d\u4fdd\u6301\u4e0d\u8b8a\u3002\u7136\u800c\uff0c\u4fee\u6539\u53c3\u6578\u7684\u4f5c\u6cd5\u6703\u6709\u526f\u4f5c\u7528 (side-effect)\uff0c\u6703\u589e\u52a0\u7a0b\u5f0f\u4e0d\u597d\u7684\u98a8\u96aa\u3002</p> <p>\u96d6\u7136\u4fee\u6539\u53c3\u6578(<code>p2</code>)\u7684\u4f5c\u6cd5\u6703\u6709\u526f\u4f5c\u7528\uff0c\u4e0d\u597d\uff0c\u4f46\u662f\u537b\u662f\u7b26\u5408\u76f4\u89ba\u3002\u6211\u5011\u53ef\u4ee5\u5ba3\u544a\u4e00\u500b\u56fa\u5b9a\u898f\u5247(invariant) <sup>1</sup>:</p> <pre><code>Total volume of paint is unchanged by mixing.\n</code></pre> <p>\u7d93\u904e\u8abf\u67e5\uff0c\u539f\u672c\u90a3\u500b\u5be6\u4f5c\uff0c\u662f\u70ba\u4e86\u5370\u51fa\u6cb9\u6f06\u8abf\u8272\u524d\u8207\u8abf\u8272\u5f8c\u7684\u6e05\u55ae\uff0c\u9019\u6a23\u53ef\u4ee5\u5e6b\u52a9\u4f7f\u7528\u8005\u77e5\u9053\u984f\u8272\u662f\u600e\u9ebc\u6df7\u5408\u51fa\u4f86\u7684\u3002\u56e0\u6b64\uff0c\u8981\u6eff\u8db3\u6df7\u5408\u5f8c\u7e3d\u9ad4\u7a4d\u4e0d\u8b8a\u7684\u898f\u5247\uff0c\u5c31\u7121\u6cd5\u6eff\u8db3\u61c9\u7528\u7684\u9700\u6c42\u3002\u4f8b\u5b50\u4e2d\uff0c\u5c37\u5c2c\u7684\u72c0\u6cc1\u6e90\u65bc\u6982\u5ff5\u907a\u5931(missing concepts)\uff0c\u9700\u8981\u65b0\u7684\u6a21\u578b\u4f86\u8868\u9054\u3002</p> <p></p> <pre><code>public void testMixingVolume {\n  PigmentColor yellow = new PigmentColor(0, 50, 0);\n  PigmentColor blue = new PigmentColor(0, 0, 50);\n\n  StockPaint paint1 = new StockPaint(1.0, yellow);\n  StockPaint paint2 = new StockPaint(1.5, blue);\n  MixedPaint mix = new MixedPaint();\n\n  mix.mixIn(paint1);\n  mix.mixIn(paint2);\n  assertEquals(2.5, mix.getVolume(), 0.01);\n}\n</code></pre>"},{"location":"domain-driven-design/10-supple-design.html#conceptual-contour","title":"Conceptual Contour (\u6982\u5ff5\u8f2a\u5ed3)","text":""},{"location":"domain-driven-design/10-supple-design.html#the-contours-of-accruals","title":"\u7bc4\u4f8b: The contours of accruals","text":""},{"location":"domain-driven-design/10-supple-design.html#standalone-classes","title":"Standalone classes","text":"<p>\u6d88\u9664\u4f9d\u8cf4\uff0c\u6e1b\u5c11\u7406\u89e3\u7269\u4ef6\u9700\u8981\u82b1\u8cbb\u7684\u529b\u6c23\u3002</p> <ol> <li> <p>\u7b2c\u516d\u7ae0\u63d0\u5230\uff0cinvariant \u662f\u5728 Aggregate \u5167\u90e8\u7269\u4ef6\u5fc5\u9808\u9075\u5b88\u7684\u898f\u5247\u3002\u00a0\u21a9</p> </li> </ol>"},{"location":"feature-toggles/main.html","title":"Feature Toggles","text":""},{"location":"feature-toggles/main.html#_1","title":"\u80cc\u666f","text":"<p>\u4f7f\u7528 Toggle \u958b\u95dc\u63a7\u5236\u529f\u80fd\u7684\u555f\u7528\u8207\u5426\u3002</p> Before: \u4f7f\u7528\u820a\u6f14\u7b97\u6cd5After: \u4f7f\u7528 Toggle \u5207\u63db\u65b0\u820a\u6f14\u7b97\u6cd5 <pre><code>function reticulateSplines() {\n    // current implementation lives here\n}\n</code></pre> <pre><code>function reticulateSplines() {\n    var useNewAlgorithm = false;\n    // useNewAlgorithm = true; // UNCOMMENT IF YOU ARE WORKING ON THE NEW SR ALGORITHM\n\n    if (useNewAlgorithm) {\n        return enhancedSplineReticulation();\n    } else {\n        return oldFashionedSplineReticulation();\n    }\n}\n\nfunction oldFashionedSplineReticulation() {\n    // current implementation lives here\n}\n\nfunction enhancedSplineReticulation() {\n    // TODO: implement better SR algorithm\n}\n</code></pre> <p>\u66f4\u6539 <code>useNewAlgorithm</code> \u5e03\u6797\u503c\u5207\u63db\u65b0\u820a\u6f14\u7b97\u6cd5\u3002</p>"},{"location":"feature-toggles/main.html#toggle-router","title":"Toggle Router","text":"<pre><code>function reticulateSplines() {\n    if (featureIsEnabled(\"use-new-SR-algorithm\")) {\n        return enhancedSplineReticulation();\n    } else {\n        return oldFashionedSplineReticulation();\n    }\n}\n</code></pre> <ul> <li><code>featureIsEnabled</code> \u5be6\u4f5c\u5224\u65b7 toggle \u662f\u5426\u6253\u958b\u6216\u95dc\u9589\u7684\u529f\u80fd\uff0c\u7a31\u4f5c Toggle Router\u3002</li> <li> <p>In-memory toggle \u7684\u5be6\u4f5c\u7bc4\u4f8b:</p> <pre><code>function createToggleRouter(featureConfig) {\n    return {\n        setFeature(featureName, isEnabled) {\n            featureConfig[featureName] = isEnabled;\n        },\n        featureIsEnabled(featureName) {\n            return featureConfig[featureName];\n        }\n    };\n}\n</code></pre> <ul> <li>\u67e5\u8868 <code>featureConfig</code> \u8a62\u554f toggle <code>featureConfig</code> \u662f\u5426\u6253\u958b</li> </ul> </li> <li> <p>Testability: \u53ef\u662f\u6e2c\u8a66 toggle \u958b\u8207\u95dc\u7684\u5169\u7a2e\u884c\u70ba\u61c9\u7b26\u5408\u9810\u671f\u3002</p> <pre><code>describe('spline reticulation', function() {\n    let toggleRouter;\n    let simulationEngine;\n\n    beforeEach(function() {\n        toggleRouter = createToggleRouter();\n        simulationEngine = createSimulationEngine({toggleRouter: toggleRouter});\n    });\n\n    it('works correctly with old algorithm', function() {\n        // Given\n        toggleRouter.setFeature(\"use-new-SR-algorithm\", false);\n\n        // When\n        const result = simulationEngine.doSomethingWhichInvolvesSplineReticulation();\n\n        // Then\n        verifySplineReticulation(result);\n    });\n\n    it('works correctly with new algorithm', function() {\n        // Given\n        toggleRouter.setFeature(\"use-new-SR-algorithm\", true);\n\n        // When\n        const result = simulationEngine.doSomethingWhichInvolvesSplineReticulation();\n\n        // Then\n        verifySplineReticulation(result);\n    });\n});\n</code></pre> </li> </ul>"},{"location":"feature-toggles/main.html#toggle-configuration","title":"Toggle Configuration","text":"<p>Toggle Configuration \u8a2d\u5b9a toggle \u7684\u958b\u95dc\u72c0\u614b\u3002</p> <p>Toggle Context \u70ba\u64cd\u4f5c\u7684\u74b0\u5883\uff0c\u7528\u4f86\u63d0\u4f9b Toggle Configuration \u6c7a\u5b9a toggle \u7684\u958b\u95dc\u8207\u5426\u3002\u4f8b\u5982\uff0c\u6e2c\u8a66\u7684\u74b0\u5883\u8207\u7dda\u4e0a\u7684\u74b0\u5883\u3002</p>"},{"location":"feature-toggles/main.html#canary-releasing","title":"Canary(\u91d1\u7d72\u96c0) releasing","text":"\u91d1\u7d72\u96c0(canary) release \u8ddf\u91d1\u7d72\u96c0\u6709\u4ec0\u9ebc\u95dc\u4fc2\uff1f <p>\u7164\u7926\u5de5\u696d\u66fe\u7d93\u4f7f\u7528\u91d1\u7d72\u96c0\u9ce5\u4f86\u5075\u6e2c\u7164\u7926\u4e2d\u6709\u5bb3\u6c23\u9ad4\u7684\u5b58\u5728\uff0c\u5982\u4e00\u6c27\u5316\u78b3\u3002\u91d1\u7d72\u96c0\u5c0d\u65bc\u6709\u6bd2\u6c23\u9ad4\u7279\u5225\u654f\u611f\uff0c\u5982\u679c\u6709\u6bd2\u6c23\u9ad4\u6cc4\u6f0f\u5230\u7164\u7926\u4e2d\uff0c\u91d1\u7d72\u96c0\u6703\u512a\u5148\u611f\u53d7\u5230\u4e26\u6b7b\u4ea1\uff0c\u8b66\u793a\u7164\u7926\u5de5\u4eba\u53ca\u6642\u64a4\u96e2\u4ee5\u4fdd\u8b77\u751f\u547d\u5b89\u5168\u3002 \u5728 canary release \u4e2d\uff0c\u5c07\u6709\u5c0f\u90e8\u5206\u7684\u4f7f\u7528\u8005\u6536\u5230\u65b0\u7684 release\uff0c\u9019\u4e9b\u4f7f\u7528\u8005\u5c31\u662f\u91d1\u7d72\u96c0\uff0c\u5718\u968a\u9700\u8981\u89c0\u5bdf\u9019\u4e9b\u4f7f\u7528\u8005\u7684\u56de\u994b\u4f86\u5224\u65b7\u8edf\u9ad4\u662f\u5426\u6709\u554f\u984c\uff0c\u5c31\u50cf\u91d1\u7d72\u96c0\u5728\u7164\u7926\u4e2d\u4f5c\u70ba\u6c23\u9ad4\u63a2\u6e2c\u5668\u4e00\u6a23\uff0c\u63d0\u524d\u611f\u77e5\u53ef\u80fd\u7684\u98a8\u96aa\u3002</p> <p>\u6d41\u7a0b:</p> <ol> <li>\u52a0\u5f37 Toggle Router\uff0c\u8b93\u4f7f\u7528\u8005\u7684 toggle \u7684\u8a55\u4f30\u7d50\u679c\u59cb\u7d42\u4fdd\u6301\u4e00\u81f4\u3002<ul> <li>\u4f7f\u7528\u8005 A \u7684 Toggle Router \u662f on \u6642\uff0c\u4e4b\u5f8c\u7684\u7d50\u679c\u4e5f\u6703\u662f on\u3002\u53cd\u4e4b\uff0c\u7d50\u679c\u662f off\uff0c\u4e4b\u5f8c\u7684\u7bc0\u679c\u4e5f\u6703\u662f off\u3002</li> </ul> </li> <li>\u96a8\u6a5f\u6311\u9078\u4f7f\u7528\u8005\u4f5c\u70ba Canary\u3002<ul> <li>\u4f8b\u5982\uff0c1% \u7684\u4f7f\u7528\u8005\u4f5c\u70ba Canary\uff0c\u4f7f\u7528 toggle on \u7684\u529f\u80fd\uff0c\u5176\u4ed6 99% \u4fdd\u6301\u539f\u6a23\uff0c\u4f7f\u7528 toggle off \u7684\u529f\u80fd\u3002</li> </ul> </li> <li>\u5718\u968a\u8a55\u4f30 Canary \u65cf\u7fa4\uff0c\u4f7f\u7528\u65b0\u529f\u80fd\u662f\u5426\u9020\u6210\u8ca0\u9762\u7684\u5f71\u97ff\u3002</li> <li>\u6c92\u6709\u554f\u984c\u4e4b\u5f8c\uff0c\u5c07 toggle on \u7684\u529f\u80fd\u63a8\u9001\u7d66\u6240\u6709\u7684\u4f7f\u7528\u8005\u3002</li> <li>\u79fb\u9664\u8a72 toggle</li> </ol>"},{"location":"feature-toggles/main.html#ab-testing","title":"A/B testing","text":"<p>\u8b93\u6578\u64da\u4f86\u4f50\u8b49\u60f3\u6cd5\uff0c\u907f\u514d HiPPO \u73fe\u8c61\u3002</p> <ol> <li>\u5c07\u4f7f\u7528\u8005\u5206\u6210 A, B \u5169\u7fa4\u3002</li> <li>A \u7fa4\u4f7f\u7528\u529f\u80fd X, B \u7fa4\u4f7f\u7528\u529f\u80fd Y\uff0c\u900f\u904e toggle \u63a7\u5236 X, Y \u529f\u80fd\u7684\u5207\u63db\u3002</li> <li>\u641c\u96c6\u6578\u64da\uff0c\u8a55\u4f30 X, Y \u529f\u80fd\u7684\u4f7f\u7528\u7d50\u679c\u3002</li> </ol>"},{"location":"feature-toggles/main.html#toggle","title":"Toggle \u7684\u7a2e\u985e","text":"<p>Toggle \u6280\u8853\u7684\u4f7f\u7528\uff0c\u8003\u616e\u5169\u500b\u9762\u5411:</p> <ol> <li>longevity: toggle \u7684\u751f\u547d\u9031\u671f</li> <li>dynamism: \u9700\u8981\u591a\u52d5\u614b\u7684\u5207\u63db</li> </ol>"},{"location":"feature-toggles/main.html#release-toggles","title":"Release Toggles","text":"<p>\u958b\u767c\u4e2d\u7684\u529f\u80fd\uff0c\u7dda\u4e0a\u74b0\u5883\u5c07 toggle \u8a2d\u5b9a\u6210 off\uff0c\u7b49\u5230\u958b\u767c\u5b8c\u7562\u5f8c\u518d\u5c07 toggle \u8a2d\u5b9a\u6210 on\u3002</p> <p>Toggle \u7684\u751f\u547d\u9031\u671f\u901a\u5e38\u662f\u4e00\u500b\u529f\u80fd\u958b\u767c\u7684\u6642\u9593\u3002\u5728\u958b\u767c\u7684\u904e\u7a0b\uff0c\u7121\u958b\u95dc toggle \u7684\u9700\u6c42\u3002</p>"},{"location":"feature-toggles/main.html#experiment-toggles","title":"Experiment Toggles","text":"<p>Toggle \u6703\u6253\u958b\u6578\u5c0f\u6642\u6216\u6578\u9031\u7684\u6642\u9593\uff0c\u7528\u4f86\u641c\u96c6\u6578\u64da\u3002</p> <p>\u56e0\u70ba\u6bcf\u6b21\u7cfb\u7d71\u8b8a\u66f4\u90fd\u53ef\u80fd\u6703\u8b93\u641c\u96c6\u7684\u6578\u64da\u5931\u6548\uff0c\u6240\u4ee5\u641c\u96c6\u7684\u6642\u9593\u4e0d\u6703\u592a\u9577\u3002</p>"},{"location":"feature-toggles/main.html#ops-toggles","title":"Ops Toggles","text":"<p>\u65b0\u529f\u80fd\u4e0a\u7dda\uff0c\u5718\u968a\u4e0d\u78ba\u5b9a\u529f\u80fd\u6703\u9020\u6210\u7684\u5f71\u97ff\uff0c\u60f3\u8981\u900f\u904e\u4e00\u500b\u958b\u95dc\u53ef\u4ee5\u8b93\u6211\u5011\u6e1b\u7de9\u65b0\u529f\u80fd\u7684\u5f71\u97ff\uff0c\u6216\u8005\u505c\u7528\u65b0\u529f\u80fd\u3002</p> <p>\u7576\u5718\u968a\u5c0d\u65b0\u529f\u80fd\u4fe1\u5fc3\u8db3\u5920\u6642\uff0cToggle \u5c31\u53ef\u4ee5\u79fb\u9664\u3002</p> <p>\u5c11\u6578\u7684\u72c0\u6cc1\uff0cToggle \u6703\u4fdd\u7559\u8f03\u9577\u7684\u6642\u9593\uff0c\u4e3b\u8981\u4f5c\u7528\u662f\u8b93\u5718\u968a\u53ef\u4ee5\u5728\u7cfb\u7d71\u9ad8\u8ca0\u8f09\u7684\u60c5\u6cc1\u4e0b\uff0c\u53ef\u4ee5\u505c\u7528\u9700\u8981\u6602\u8cb4\u7684\u904b\u7b97\u529f\u80fd\uff0c\u6e1b\u8f15\u8ca0\u8f09\u72c0\u6cc1\u3002</p>"},{"location":"feature-toggles/main.html#permission-toggles","title":"Permission Toggles","text":"<ul> <li>\u53ea\u5141\u8a31\u4ed8\u8cbb\u4f7f\u7528\u8005\u4f7f\u7528 permium \u529f\u80fd\u3002</li> <li>\u53ea\u5141\u8a31\u7279\u5b9a\u4f7f\u7528\u8005\u5b58\u53d6 alpha \u6216 beta \u7684\u529f\u80fd\u3002<ul> <li>per-request \u6c7a\u5b9a toggle \u6253\u958b\u6216\u95dc\u9589\u3002</li> </ul> </li> </ul>"},{"location":"feature-toggles/main.html#toggle_1","title":"\u7ba1\u7406\u4e0d\u540c\u7a2e\u985e\u7684 Toggle","text":""},{"location":"feature-toggles/main.html#vs-toggle","title":"\u7ba1\u7406\u52d5\u614b v.s. \u975c\u614b\u7684 Toggle","text":"<ul> <li>\u8981\u8d8a\u52d5\u614b\uff0c\u7a0b\u5f0f\u7684\u958b\u767c\u6210\u672c\u8d8a\u9ad8\u3002<ul> <li>\u975c\u614b: \u4f7f\u7528\u8b8a\u6578\uff0c\u6216 map \u8a2d\u5b9a toggle \u7684\u958b\u95dc\u8207\u5426\u3002\u7576\u6709\u8b8a\u52d5\u9700\u8981\uff0c\u6539\u7a0b\u5f0f\u78bc\uff0c\u7136\u5f8c\u91cd\u65b0\u7de8\u8b6f\u3001\u90e8\u7f72\u3002</li> <li>\u52d5\u614b: \u6839\u64da\u4e0d\u540c\u4f7f\u7528\u8005\u3001\u4e0d\u540c\u8acb\u6c42\u6c7a\u5b9a toggle \u7684\u958b\u95dc\u3002</li> </ul> </li> </ul>"},{"location":"feature-toggles/main.html#vs-toggle_1","title":"\u7ba1\u7406\u77ed\u671f v.s. \u9577\u671f\u7684 Toggle","text":"<ul> <li>\u77ed\u671f\u7684 toggle\uff0c\u5728\u4e0d\u4e45\u7684\u5c07\u4f86\u5c31\u6703\u79fb\u9664<ul> <li>\u4e0d\u60f3\u82b1\u8cbb\u904e\u591a\u7684\u6210\u672c\u5728\u77ed\u671f\u7684\u7a0b\u5f0f\u78bc\u4e0a\uff0c\u53ef\u512a\u5148\u8003\u616e\u7c21\u55ae\u7684\u4f7f\u7528 if-else \u5be6\u4f5c</li> </ul> </li> <li>\u9577\u671f\u7684 toggle<ul> <li>\u6703\u5728\u7a0b\u5f0f\u78bc\u4e2d\u5b58\u6d3b\u6bd4\u8f03\u4e45\u7684\u6642\u9593\uff0c\u6211\u5011\u5e0c\u671b\u80fd\u6709\u6548\u7684\u7ba1\u7406\uff0c\u4e0d\u8981\u8b93 toggle point \u6563\u843d\u5728\u5404\u500b\u5730\u65b9\u3002</li> </ul> </li> </ul>"},{"location":"feature-toggles/main.html#_2","title":"\u5be6\u4f5c","text":"<p>\u6211\u5011\u5be6\u4f5c\u4e00\u500b\u65b0\u7684\u529f\u80fd\uff0c\u5728 email \u4e2d\u63d0\u4f9b\u4e00\u500b\u65b9\u4fbf\u4f7f\u7528\u8005\u53d6\u6d88\u8a02\u55ae\u7684\u9023\u7d50\u3002\u4e26\u4e14\uff0c\u53ef\u4ee5\u900f\u904e feature toggle \u6253\u958b\u6216\u95dc\u9589\u6b64\u529f\u80fd\u3002</p> Version 1<pre><code>const features = fetchFeatureTogglesFromSomewhere();\n\nfunction generateInvoiceEmail() {\n    const baseEmail = buildEmailForInvoice(this.invoice);\n    if (features.isEnabled(\"next-gen-ecomm\")) {\n        return addOrderCancellationContentToEmail(baseEmail);\n    } else {\n        return baseEmail;\n    }\n}\n</code></pre> <pre>18a8b0ac8fc167d1d9066a4bbf89148c69977cbadc23f87457d277fb875ba941c9b27da6f38089d39ed76d479210353881f5f40ab2d88b6af55f70aa7662e68b</pre><pre>c492565e1916be8ee13b4af2211c3f50c95210805b214f6919ee5a153a0b4e22135c8861fc60a2d39257b63965b333310710e1b309dafd73ee267c7fce693bf6</pre> <p>\u6f5b\u5728\u8b70\u984c</p> <ul> <li>\u6c7a\u5b9a\u662f\u5426\u958b\u555f\u5728 email \u4e2d\u589e\u52a0\u9023\u7d50\u7684\u529f\u80fd\uff0c\u7531\u4e00\u500b\u795e\u5947\u7684\u5b57\u4e32(magic string) \"next-gen-ecomm\" \u6c7a\u5b9a\u3002</li> <li>\u7522\u751f email \u5167\u5bb9\u7684 function\uff0c\u76f8\u4f9d\u5b57\u4e32 \"next-gen-ecomm\"\uff0c\u4e26\u9700\u8981\u77e5\u9053\u4ed6\u8207\u53d6\u6d88\u8a02\u55ae\u7684\u9023\u7d50\u6709\u95dc\u4fc2\u3002</li> <li>\u7121\u6cd5\u505a\u5230\uff0c\u53ea\u60f3\u958b\u555f \"next-gen-ecomm\" toggle \u7684\u90e8\u5206\u529f\u80fd\uff0c\u4f46\u662f\u4e0d\u60f3\u8981\u958b\u555f\u53d6\u6d88\u8a02\u55ae\u9023\u7d50\u7684\u529f\u80fd\u3002</li> <li>\u7121\u6cd5\u53ea\u958b\u555f\u53d6\u6d88\u8a02\u55ae\u9023\u7d50\u7684\u529f\u80fd\u7d66\u90e8\u5206\u4f7f\u7528\u8005\u3002</li> </ul> Version 2 (De-coupling decision points from decision logic)<pre><code>const features = fetchFeatureTogglesFromSomewhere();\nconst featureDecisions = createFeatureDecisions(features);\nfunction generateInvoiceEmail() {\n    const baseEmail = buildEmailForInvoice(this.invoice);\n    if (featureDecisions.includeOrderCancellationInEmail()) {\n        return addOrderCancellationContentToEmail(baseEmail);\n    } else {\n        return baseEmail;\n    }\n}\n\nfunction createFeatureDecisions(features) {\n    return {\n        includeOrderCancellationInEmail() {\n            return features.isEnabled(\"next-gen-ecomm\");\n        }\n        // ... additional decision functions also live here ...\n    };\n}\n</code></pre> <pre>8f447ce2d7138a35cf75a6bb1b00e37016e0bf51692e25e69d463de76eb23d636179bc20e911f632a99cb4099c2fb8a27b518a12221e14479de1b4ee7b4b66e0</pre><pre>aa89c0567a07fc9503ea8921a42bd06c61f4c95a20b5842b47524843f6b4504f280377fafb2a8c169f5d1bf30dab83f19fee105dd94e60438d910d275c76de62</pre> <p>\u6f5b\u5728\u8b70\u984c</p> <ul> <li>\u7a0b\u5f0f\u78bc\u76f4\u63a5\u76f8\u4f9d feature flagging system\uff0c\u5c07\u4f7f\u5f97\u6e2c\u8a66\u56f0\u96e3\u3002</li> <li>feature flagging system \u6703\u5728\u7a0b\u5f0f\u78bc\u5404\u8655\u6d41\u884c\uff0c\u6703\u8d8a\u4f86\u8d8a\u591a\u7a0b\u5f0f\u78bc\u8ddf\u4ed6\u6709\u76f8\u4f9d\u6027\u3002\u9019\u5c07\u4f7f\u5f97\u66ff\u63db feature flagging system \u96e3\u5ea6\u589e\u52a0\u3002</li> </ul> Version 3 (Inversion of Decision)<pre><code>const features = fetchFeatureTogglesFromSomewhere();\nconst featureDecisions = createFeatureDecisions(features);\nconst factory = createFeatureAwareFactoryBasedOn(featureDecisions)\nconst emailler = factory.invoiceEmailler()\n\nfunction createInvoiceEmailler(config) {\n   return {\n        generateInvoiceEmail() {\n            const baseEmail = buildEmailForInvoice(this.invoice);\n            if (config.includeOrderCancellationInEmail) {\n                return addOrderCancellationContentToEmail();\n            } else {\n                return baseEmail;\n            }\n       },\n       // ... other invoice emailer methods ...\n   };\n}\n\nfunction createFeatureAwareFactoryBasedOn(featureDecisions) {\n    return {\n        invoiceEmailler() {\n            return createInvoiceEmailler({\n                includeOrderCancellationInEmail: featureDecisions.includeOrderCancellationInEmail()\n            });\n        },\n        // ... other factory methods ...\n    };\n}\n</code></pre> Version 3 (\u6e2c\u8a66)<pre><code>describe( 'invoice emailling', function() {\n    it( 'includes order cancellation content when configured to do so', function() {\n        // Given\n        const emailler = createInvoiceEmailler({includeOrderCancellationInEmail: true});\n\n        // When\n        const email = emailler.generateInvoiceEmail();\n\n        // Then\n        verifyEmailContainsOrderCancellationContent(email);\n    };\n\n    it( 'does not includes order cancellation content when configured to not do so', function() {\n        // Given\n        const emailler = createInvoiceEmailler({includeOrderCancellationInEmail: false});\n\n        // When\n        const email = emailler.generateInvoiceEmail();\n\n        // Then\n        verifyEmailDoesNotContainOrderCancellationContent(email);\n    };\n});\n</code></pre> <p>\u6f5b\u5728\u8b70\u984c</p> <p>\u4f7f\u7528 if-else \u5224\u65b7\uff0c\u4e0d\u9069\u5408\u7528\u5728</p> <ul> <li>toggle \u6578\u91cf\u5f88\u591a \u6216</li> <li>long-live toggle</li> </ul> Version 4 (Strategy)<pre><code>const features = fetchFeatureTogglesFromSomewhere();\nconst featureDecisions = createFeatureDecisions(features);\nconst factory = createFeatureAwareFactoryBasedOn(featureDecisions)\nconst emailler = factory.invoiceEmailler()\n\nfunction createInvoiceEmailler(additionalContentEnhancer) {\n    return {\n        generateInvoiceEmail() {\n            const baseEmail = buildEmailForInvoice(this.invoice);\n            return additionalContentEnhancer(baseEmail);\n        },\n        // ... other invoice emailer methods ...\n    };\n\n}\n\nfunction identityFn(x) { return x; }\n\nfunction createFeatureAwareFactoryBasedOn(featureDecisions) {\n    return {\n        invoiceEmailler() {\n            if (featureDecisions.includeOrderCancellationInEmail()) {\n                return createInvoiceEmailler(addOrderCancellationContentToEmail);\n            } else {\n                return createInvoiceEmailler(identityFn);\n            }\n        },\n        // ... other factory methods ...\n    };\n}\n</code></pre>"},{"location":"feature-toggles/main.html#_3","title":"\u53c3\u8003","text":"<ul> <li>Feature Toggles (aka Feature Flags)</li> </ul>"},{"location":"java/effective-java/001.html","title":"Item 1: Consider static factory methods instead of constructors","text":""},{"location":"java/effective-java/001.html#_1","title":"\u512a\u9ede","text":"<p>\u504f\u597d static factory method \u7684\u512a\u9ede\uff1a</p> <ol> <li> <p>\u53ef\u4ee5\u63d0\u4f9b\u6709\u610f\u7fa9\u7684\u540d\u7a31\uff0c\u5e6b\u52a9\u95b1\u8b80\u7406\u89e3\u7684\u540d\u7a31</p> <ul> <li><code>BigInteger.probablePrime</code> \u6bd4 <code>BigInteger(int, int, Random)</code> \u66f4\u5bb9\u6613\u7406\u89e3\u3002</li> <li>constructor \u4e4b\u9593\u53ea\u80fd\u5920\u900f\u904e\u53c3\u6578\u578b\u5225\u4e0d\u540c\u4f86\u52a0\u4ee5\u5340\u9694\uff0c\u958b\u767c\u4eba\u54e1\u9700\u8981\u77e5\u9053\u9019\u4e9b\u4e0d\u540c constructor \u5c0d\u61c9\u7684\u5be6\u4f5c\u3002\u4f46\u662f\uff0c\u4ed6\u5011\u4e5f\u53ef\u80fd\u6703\u8a18\u932f\u800c\u8aa4\u7528\u3002\u4f8b\u5982\uff0c\u6211\u5011\u6709\u8fa6\u6cd5\u5340\u5206 <code>BigInteger(int[])</code>, <code>BigInteger(int[], int)</code>, <code>BigInteger(int, int[])</code> \u4ed6\u5011\u7684\u4e0d\u540c\u55ce\uff1f</li> </ul> </li> <li> <p>\u4e0d\u5fc5\u6bcf\u6b21\u90fd\u5efa\u7acb\u65b0\u7269\u4ef6</p> <ul> <li>\u5957\u7528 Flyweight pattern, Singleton pattern</li> <li>\u53ef\u4ee5\u907f\u514d\u5efa\u7acb\u4e0d\u5fc5\u8981\u91cd\u8907\u7684\u7269\u4ef6</li> <li>Instance-controlled class</li> </ul> </li> <li> <p>\u53ef\u4ee5\u56de\u50b3 Subclass</p> <ul> <li>interface-based frameworks</li> <li>conceptual weight: \u958b\u767c\u4eba\u54e1\u9700\u8981\u638c\u63e1\u591a\u5c11\u6982\u5ff5\u624d\u80fd\u5920\u4f7f\u7528 API</li> </ul> <p>Info</p> <p>Java 8 \u4ee5\u524d\uff0cinterface \u4e0d\u80fd\u6709 static method\u3002\u5728\u5be6\u4f5c\u4e0a\uff0c\u9700\u8981 static factory methods \u7684 class \u6703\u547d\u540d\u6210 Type + s\uff0c\u4e26\u5c07 constructor \u5ba3\u544a\u6210 private\uff0c\u4f8b\u5982 <code>Collections</code>, <code>Arrays</code>\u3002</p> </li> <li> <p>\u53ef\u4ee5\u4f9d\u64da\u60c5\u6cc1\u56de\u50b3\u4e0d\u540c\u7684 Subclass</p> <ul> <li>\u5141\u8a31\u4e0d\u540c\u7684 release \u66f4\u63db return \u7684 subclass\u3002</li> <li> <p><code>EnumSet</code> \u7684\u5be6\u4f5c\uff0c\u6839\u64da enum \u6578\u91cf\u7684\u4e0d\u540c\uff0c\u56de\u50b3\u4e0d\u540c\u7684 subclass\u3002\u56de\u50b3\u7684 subclass \u8207\u689d\u4ef6\u662f\u53ef\u4ee5\u6539\u8b8a\u800c\u4e0d\u5f71\u97ff\u547c\u53eb\u7aef\u7684\u3002</p> <pre><code>// \u793a\u610f\u7a0b\u5f0f\u78bc\nclass EnumSet {\n   static &lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; noneOf(Class&lt;E&gt; elementType) {\n        if (elementType.getEnumCount() &lt;= 64)\n            return new RegularEnumSet(..)\n        else\n            return new JumboEnumSet(..)\n   }\n}\n</code></pre> <ul> <li>\u689d\u4ef6 (<code>&lt;= 64</code>) \u8207 subclass \u7684\u5be6\u4f5c\u662f\u53ef\u4ee5\u6539\u8b8a\u7684\uff0c\u800c\u4e0d\u5f71\u97ff\u547c\u53eb\u7aef\u7684\u7a0b\u5f0f\u78bc\u3002</li> </ul> </li> </ul> </li> <li> <p>\u5728\u64b0\u5beb\u7a0b\u5f0f\u78bc\u6642\uff0c\u985e\u5225\u4e0d\u5fc5\u5b58\u5728</p> <ul> <li>\u5229\u65bc service provider frameworks<ul> <li>\u6846\u67b6\u958b\u767c\u5546\u4e0d\u5fc5\u63d0\u524d\u77e5\u9053\u6240\u6709 interface \u53ef\u80fd\u7684\u5be6\u4f5c</li> <li>\u8b93 interface \u5be6\u4f5c\u5ef6\u9072\u5230 development time \u6c7a\u5b9a</li> <li>\u4f8b\u5982: JDBC API \u7684 Connection interface\uff0c\u958b\u767c\u4eba\u54e1\u53ef\u4ee5\u5728\u958b\u767c\u6642\u5728\u6c7a\u5b9a\u5177\u9ad4\u7684 Connection \u5be6\u4f5c\uff0c\u50cf\u662f\u900f\u904e property \u8a2d\u5b9a Connection \u662f MySql <code>spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</code></li> </ul> </li> <li>Bridge pattern</li> <li>\u53ef\u4ee5\u914d\u5408 Dependency injection frameworks \u4f7f\u7528</li> <li><code>ServiceLoader</code></li> </ul> </li> </ol>"},{"location":"java/effective-java/001.html#_2","title":"\u9650\u5236","text":"<p>\u504f\u597d static factory method \u7684\u9650\u5236\uff1a</p> <ol> <li> <p>\u62cb\u68c4\u7e7c\u627f:</p> <ul> <li>constructor \u88ab\u5ba3\u544a\u6210 <code>private</code> / <code>protected</code>\uff0c\u4f7f\u5f97 subclass \u7121\u6cd5\u521d\u59cb\u5316 superclass\uff0c\u9020\u6210\u7121\u6cd5\u7e7c\u627f\u3002</li> <li>\u7121\u6cd5\u7e7c\u627f\u610f\u5473\u8457\u653e\u68c4 polymorphism \u7684\u7279\u6027\u3002</li> </ul> <p>Question</p> <p>\u5982\u679c\u540c\u6642\u8b93 class \u4fdd\u6709 static factory methods \u4e26\u4e14\u628a constructor \u5ba3\u544a\u6210 <code>public</code> \u5462?</p> </li> <li> <p>\u589e\u52a0 debug \u96e3\u5ea6:</p> <ul> <li>\u56e0\u70ba\u5efa\u7acb\u7269\u4ef6\u7684\u52d5\u4f5c\u96b1\u85cf\u5728 static factory methods \u88e1\uff0c\u6240\u4ee5 debug \u6642\u7121\u6cd5\u76f4\u63a5\u770b\u5230\u5efa\u7acb\u7269\u4ef6\u7684\u5730\u65b9\uff0c\u4ee5\u53ca\u600e\u9ebc\u88ab\u5efa\u7acb\u7684\u3002</li> <li>\u4ee5\u4e0b\u5e7e\u7a2e\u547d\u540d\u898f\u5247\uff0c\u53ef\u4ee5\u5e6b\u52a9 static factory methods \u7684\u7406\u89e3: (\u6b64\u70ba\u5217\u8209\u800c\u975e\u7aae\u8209)<ul> <li><code>from</code><ul> <li>type-conversion method: \u5f9e \u4e00\u500b type \u7684\u7269\u4ef6\u8f49\u63db\u6210\u53e6\u4e00\u500b type \u7684\u7269\u4ef6</li> <li>\u7bc4\u4f8b:<ul> <li><code>Date.from(instant)</code></li> </ul> </li> </ul> </li> <li><code>of</code><ul> <li>aggregation method: \u5f9e \u591a\u500b \u53c3\u6578\u7684\u7269\u4ef6\u5408\u4f75\u6210\u4e00\u500b type \u7684\u7269\u4ef6</li> <li>\u7bc4\u4f8b:<ul> <li><code>EnumSet.of(JACK, QUEEN, KING)</code></li> <li><code>LocalDate.of(2024, 7, 4)</code></li> </ul> </li> </ul> </li> <li><code>valueOf</code><ul> <li>\u6bd4 <code>from</code> \u8207 <code>of</code> \u66f4\u56c9\u5506\u4e00\u9ede\u7684\u7248\u672c</li> <li>\u7bc4\u4f8b:<ul> <li><code>Integer.valueOf(\"100\")</code> </li> <li><code>Integer.valueOf(\"100\", 2)</code></li> </ul> </li> </ul> </li> <li><code>instance</code> / <code>getInstance</code><ul> <li>\u5f9e 0 \u81f3 \u591a\u500b \u53c3\u6578\u5efa\u7acb\u7269\u4ef6</li> <li>\u96d6\u7136\u8aaa\u662f <code>getInstance</code>\uff0c\u4f46\u662f\u4e0d\u4fdd\u8b49\u56de\u50b3\u7684\u662f\u540c\u4e00\u500b\u7269\u4ef6</li> <li>\u7bc4\u4f8b:<ul> <li><code>Calendar.getInstance()</code> </li> <li><code>Calendar.getInstance(TimeZone.getDefault())</code> </li> </ul> </li> </ul> </li> <li><code>create</code> / <code>newInstance</code><ul> <li>\u5f9e 0 \u81f3 \u591a\u500b \u53c3\u6578\u5efa\u7acb\u7269\u4ef6</li> <li>\u6bcf\u6b21\u90fd\u6703\u5efa\u7acb\u65b0\u7684\u7269\u4ef6</li> <li>\u7bc4\u4f8b:<ul> <li><code>Array.newInstance(Integer.class, 10)</code></li> </ul> </li> </ul> </li> <li><code>getType</code><ul> <li>\u56de\u50b3\u7684\u7269\u4ef6\u662f <code>Type</code> \u7684 instance</li> <li>\u96d6\u7136\u70ba get\uff0c\u4f46\u662f\u4e0d\u4fdd\u8b49\u56de\u50b3\u7684\u662f\u540c\u4e00\u500b\u7269\u4ef6</li> <li>\u7bc4\u4f8b:<ul> <li><code>Files.getFileStore(path)</code></li> </ul> </li> </ul> </li> <li><code>newType</code><ul> <li>\u56de\u50b3\u7684\u7269\u4ef6\u662f <code>Type</code> \u7684 instance</li> <li>\u6bcf\u6b21\u90fd\u6703\u5efa\u7acb\u65b0\u7684\u7269\u4ef6</li> <li>\u7bc4\u4f8b:<ul> <li><code>BufferedReader br = Buffer.newBufferedReader(path)</code></li> </ul> </li> </ul> </li> <li><code>type</code><ul> <li><code>getType</code> \u8207 <code>newType</code> \u7684\u7c21\u5316\u7248</li> <li>\u7bc4\u4f8b:<ul> <li><code>Collections.singletonList(\"apple\")</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ol>"},{"location":"java/effective-java/002.html","title":"Item 2: Consider a builder when faced with many constructor parameters","text":"<p>static factory method \u8207 constructor \u7684\u7f3a\u9ede\u662f\uff0c\u7576\u6709\u592a\u591a\u53c3\u6578\u6642\uff0c\u6703\u8b93\u7a0b\u5f0f\u78bc\u96e3\u4ee5\u95b1\u8b80\u3002\u9019\u6642\u5019\uff0c\u53ef\u4ee5\u8003\u616e\u4f7f\u7528 builder\u3002</p>"},{"location":"java/effective-java/002.html#anti-pattern-telescoping-constructor-pattern","title":"(anti-pattern) telescoping constructor pattern","text":"<pre><code>public class NutritionFacts {\n    private final int servingSize;  // (mL)            required\n    private final int servings;     // (per container) required\n    private final int calories;     // (per serving)   optional\n    private final int fat;          // (g/serving)     optional\n    private final int sodium;       // (mg/serving)    optional\n    private final int carbohydrate; // (g/serving)     optional\n\n    public NutritionFacts(int servingSize, int servings) {\n        this(servingSize, servings, 0);\n    }\n\n    public NutritionFacts(int servingSize, int servings,\n            int calories) {\n        this(servingSize, servings, calories, 0);\n    }\n\n    public NutritionFacts(int servingSize, int servings,\n            int calories, int fat) {\n        this(servingSize, servings, calories, fat, 0);\n    }\n\n    public NutritionFacts(int servingSize, int servings,\n            int calories, int fat, int sodium) {\n        this(servingSize, servings, calories, fat, sodium, 0);\n    }\n\n\n    public NutritionFacts(int servingSize, int servings,\n           int calories, int fat, int sodium, int carbohydrate) {\n        this.servingSize  = servingSize;\n        this.servings     = servings;\n        this.calories     = calories;\n        this.fat          = fat;\n        this.sodium       = sodium;\n        this.carbohydrate = carbohydrate;\n    }\n}\n</code></pre> <p>\u7bc4\u4f8b\u4e2d\u7684 constructor\uff0c\u6bd4\u8f03\u5c11\u53c3\u6578\u7684 constructor \u6703\u547c\u53eb\u6bd4\u8f03\u591a\u53c3\u6578\u7684 constructor \uff0c\u6700\u7d42\u90fd\u547c\u53eb\u6700\u591a\u53c3\u6578\u7684 constructor\u3002</p> <p>\u9019\u7a2e\u5beb\u6cd5\uff0c\u5728 optional field \u8d8a\u591a\u6642\uff0c\u6703\u8b8a\u5f97\u8d8a\u8907\u96dc\u8d8a\u96e3\u4ee5\u7ba1\u7406\uff0c\u7a0b\u5f0f\u78bc\u53ef\u80fd\u6703\u8d8a\u96e3\u95b1\u8b80\u3002</p>"},{"location":"java/effective-java/002.html#javabeans-pattern","title":"JavaBeans pattern","text":"<p>JavaBean \u6d88\u9664\u4e86 telescoping constructor pattern \u7684\u554f\u984c\u3002</p> <pre><code>public class NutritionFacts {\n    // Parameters initialized to default values (if any)\n    private int servingSize  = -1; // Required; no default value\n    private int servings     = -1; // Required; no default value\n    private int calories     = 0;\n    private int fat          = 0;\n    private int sodium       = 0;\n    private int carbohydrate = 0;\n\n    public NutritionFacts() { }\n\n    // Setters\n    public void setServingSize(int val)  { servingSize = val; }\n    public void setServings(int val)    { servings = val; }\n    public void setCalories(int val)    { calories = val; }\n    public void setFat(int val)         { fat = val; }\n    public void setSodium(int val)      { sodium = val; }\n    public void setCarbohydrate(int val) { carbohydrate = val; }\n}\n</code></pre> <p>\u5141\u8a31\u4e00\u500b\u6c92\u6709\u53c3\u6578\u7684 constructor\uff0c\u4e26\u4e14\u900f\u904e setter \u8a2d\u5b9a field values\u3002</p> <pre><code>NutritionFacts cocaCola = new NutritionFacts();\ncocaCola.setServingSize(240);\ncocaCola.setServings(8);\ncocaCola.setCalories(100);\ncocaCola.setSodium(35);\ncocaCola.setCarbohydrate(27);\n</code></pre> <p>JavaBeans pattern \u7684\u7f3a\u9ede:</p> <ul> <li>\u9700\u8981\u591a\u884c\u7a0b\u5f0f\u78bc\uff0c\u4e14\u7269\u4ef6\u5728\u5efa\u7acb\u5f8c\u53ef\u80fd\u8655\u65bc\u4e0d\u4e00\u81f4\u7684\u72c0\u614b\u3002</li> <li>\u5728\u72c0\u614b\u4e0d\u4e00\u81f4\u7684\u72c0\u614b\u4e0b\u64cd\u4f5c\u7269\u4ef6\u53ef\u80fd\u7522\u751f bug\uff0c\u4e14\u96e3\u4ee5 debug\u3002</li> <li>\u4e0d\u4fdd\u8b49\u7269\u4ef6\u7684\u4e0d\u53ef\u8b8a\u6027(immutable)\u3002</li> <li>\u4e0d\u4fdd\u8b49\u7269\u4ef6\u7684 thread safety\u3002</li> </ul>"},{"location":"java/effective-java/002.html#builder-pattern","title":"Builder pattern","text":"<pre><code>public class NutritionFacts {\n    private final int servingSize;\n    private final int servings;\n    private final int calories;\n    private final int fat;\n    private final int sodium;\n    private final int carbohydrate;\n\n    public static class Builder {\n        // Required parameters\n        private final int servingSize;\n        private final int servings;\n\n        // Optional parameters - initialized to default values\n        private int calories      = 0;\n        private int fat           = 0;\n        private int sodium        = 0;\n        private int carbohydrate  = 0;\n\n        public Builder(int servingSize, int servings) {\n            this.servingSize = servingSize;\n            this.servings    = servings;\n        }\n\n        public Builder calories(int val) {\n            calories = val;      \n            return this; \n        }\n        public Builder fat(int val) {\n            fat = val;\n            return this;\n        }\n        public Builder sodium(int val) {\n            sodium = val;\n            return this;\n        }\n        public Builder carbohydrate(int val) {\n            carbohydrate = val;\n            return this;\n        }\n\n        public NutritionFacts build() {\n            return new NutritionFacts(this);\n        }\n    }\n\n    private NutritionFacts(Builder builder) {\n        servingSize  = builder.servingSize;\n        servings     = builder.servings;\n        calories     = builder.calories;\n        fat          = builder.fat;\n        sodium       = builder.sodium;\n        carbohydrate = builder.carbohydrate;\n    }\n}\n</code></pre> <pre><code>NutritionFacts cocaCola = new NutritionFacts.Builder(240, 8)\n        .calories(100).sodium(35).carbohydrate(27).build();\n</code></pre> <p>\u9019\u7a2e Builder \u547c\u53eb method \u56de\u50b3\u81ea\u8eab\u7269\u4ef6\uff0c\u8b93 client \u7aef\u53ef\u4ee5\u4e00\u76f4\u63a5\u8457\u5f80\u4e0b\u547c\u53eb\u7684\u5beb\u6cd5\u7a31\u4f5c fluent API\u3002</p> <p>\u4f7f\u7528 Lobmok Builder (link) \u7c21\u5316\u5be6\u4f5c\u3002</p> <p>\u63d0\u4f9b\u4e86\u4e00\u7a2e\u985e\u4f3c\u65bc Python, Scala \u6216 kotlin \u7684 named optional parameter \u7684\u5beb\u6cd5\u3002</p> <p>validation:</p> <ul> <li>builder constructor, setter \u9032\u884c\u5404\u5225\u53c3\u6578\u7684\u6aa2\u67e5</li> <li>class constructor \u9032\u884c\u6574\u9ad4\u7269\u4ef6\u7684\u6aa2\u67e5</li> <li>\u672a\u901a\u904e\u6aa2\u67e5\u6642\uff0c\u62cb\u51fa <code>IllegalArgumentException</code></li> </ul> <p>\u901a\u5e38\uff0cconstructor \u53c3\u6578\u7684\u6578\u91cf\u8d85\u904e\u56db\u500b\u4ee5\u4e0a\u6bd4\u8f03\u9069\u7528\u3002\u4e26\u4e14\uff0c\u591a\u6578\u53c3\u6578\u662f\u9078\u586b\u7684\u60c5\u6cc1\u3002</p>"},{"location":"java/effective-java/003.html","title":"Item 3: Enforce the singleton property with a private constructor or an enum type","text":"<p>\u5169\u7a2e\u5e38\u898b\u5be6\u4f5c Singleton \u7684\u65b9\u6cd5\uff1a</p> <p>\u65b9\u6cd5\u4e00: \u5c07 constructor \u8a2d\u70ba private\uff0c\u4e26\u4e14\u6709\u4e00\u500b public static final field \u4f86\u5b58\u653e\u552f\u4e00\u7684 instance\u3002</p> <pre><code>// Singleton with public final field\npublic class Elvis {\n    public static final Elvis INSTANCE = new Elvis();\n    private Elvis() { ... }\n\n    public void leaveTheBuilding() { ... }\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c: \u5c07 constructor \u8a2d\u70ba private\uff0c\u4e26\u4e14\u6709\u4e00\u500b public static \u65b9\u6cd5\u4f86\u56de\u50b3\u552f\u4e00\u7684 instance\u3002</p> <pre><code>// Singleton with static factory\npublic class Elvis {\n    private static final Elvis INSTANCE = new Elvis();\n    private Elvis() { ... }\n    public static Elvis getInstance() { return INSTANCE; }\n\n    public void leaveTheBuilding() { ... }\n}\n</code></pre> <p>\u53e6\u4e00\u7a2e\u5be6\u4f5c Singleton \u7684\u65b9\u6cd5\u662f single-element enum\u3002</p> <pre><code>public enum Elvis {\n    INSTANCE;\n\n    public void leaveTheBuilding() { ... }\n}\n</code></pre>"},{"location":"java/effective-java/004.html","title":"Item 4: Enforce noninstantiability with a private constructor","text":"<pre><code>// Noninstantiable utility class\npublic class UtilityClass {\n    // Suppress default constructor for noninstantiability\n    private UtilityClass() {\n        throw new AssertionError();\n    }\n    ... // Remainder omitted\n}\n</code></pre> <p>\u5982\u679c class \u4e0d\u5141\u8a31\u6709 instance\uff0c\u5c31\u5c07 constructor \u8a2d\u70ba private\uff0c\u9019\u6a23\u5c31\u7121\u6cd5\u88ab\u5be6\u4f8b\u5316\u3002\u800c\u4e14\uff0c class \u4e5f\u7121\u6cd5\u88ab\u7e7c\u627f\u3002</p> <p>\u4e0d\u5141\u8a31\u6709 instance \u7684\u985e\u5225\u7684\u7bc4\u4f8b\u6709 <code>Math</code>, <code>Arrays</code>, <code>Collections</code> \u7b49\u7b49\u3002</p>"},{"location":"java/effective-java/005.html","title":"Item 5: Prefer dependency injection to hardwiring resources","text":"<p>\u5be6\u4f5c\u62fc\u5b57\u6aa2\u67e5\u7269\u4ef6\uff0c\u4ee5\u4e0b\u5169\u7a2e\u5be6\u4f5c\u65b9\u6cd5\u6709\u53ef\u4ee5\u66f4\u597d\u7684\u7a7a\u9593\uff1a</p> <p>1: Utility class</p> <pre><code>// Inappropriate use of static utility - inflexible &amp; untestable!\npublic class SpellChecker {\n    private static final Lexicon dictionary = ...;\n\n    private SpellChecker() {} // Noninstantiable\n\n    public static boolean isValid(String word) { ... }\n    public static List&lt;String&gt; suggestions(String typo) { ... }\n}\n</code></pre> <p>2: Singleton</p> <pre><code>// Inappropriate use of singleton - inflexible &amp; untestable!\npublic class SpellChecker {\n    private final Lexicon dictionary = ...;\n\n    private SpellChecker(...) {}\n    public static SpellChecker INSTANCE = new SpellChecker(...);\n\n    public boolean isValid(String word) { ... }\n    public List&lt;String&gt; suggestions(String typo) { ... }\n}\n</code></pre> <p>\u8b93\u7269\u4ef6\u8b8a\u6210\u4e0d\u53ef\u7e7c\u627f\u6703\u589e\u52a0\u6e2c\u8a66\u7684\u96e3\u5ea6</p> <p>\u4f7f\u7528 dependency injection \u6bd4\u8f03\u597d:</p> <pre><code>// Dependency injection provides flexibility and testability\npublic class SpellChecker {\n    private final Lexicon dictionary;\n\n    public SpellChecker(Lexicon dictionary) {\n        this.dictionary = Objects.requireNonNull(dictionary);\n    }\n\n    public boolean isValid(String word) { ... }\n    public List&lt;String&gt; suggestions(String typo) { ... }\n}\n</code></pre> <p>\u5e38\u898b\u7684 Dependency injection framework: Dagger, Guice, Spring</p> <p>\u53e6\u4e00\u500b\u66ff\u4ee3\u65b9\u6cd5\u662f\u4f7f\u7528 Factory Method\u3002</p> <p>\u7e3d\u7684\u4f86\u8aaa\uff0c\u4e0d\u8981\u4f7f\u7528 singleton \u6216 static utility class \u4f86\u5be6\u4f5c\u6709 resource dependency \u7684\u7269\u4ef6\uff0c\u9019\u6a23\u6703\u8b93\u7269\u4ef6\u8b8a\u5f97\u4e0d\u9748\u6d3b\uff0c\u96e3\u4ee5\u6e2c\u8a66\u3002</p>"},{"location":"java/effective-java/006.html","title":"Item 6: Avoid creating unnecessary objects","text":"<p>immutable object \u901a\u5e38\u53ef\u4ee5 reuse\uff0c\u4e0d\u5fc5\u91cd\u65b0\u7522\u751f\u4e00\u500b\u65b0\u7684\u7269\u4ef6\u3002</p> <pre><code>String s = new String(\"bikini\");  // \u5225\u9019\u9ebc\u505a !!\n</code></pre> <p>\u61c9\u8a72\u9019\u9ebc\u505a</p> <pre><code>String s = \"bikini\";\n</code></pre> <p>\u9019\u6a23\u53ef\u4ee5\u78ba\u4fdd <code>s</code> \u6703\u6307\u5411\u540c\u4e00\u500b\u7269\u4ef6\uff0c\u800c\u4e0d\u662f\u91cd\u65b0\u7522\u751f\u4e00\u500b\u65b0\u7684\u7269\u4ef6\u3002\u53ea\u8981\u4f7f\u7528 constructor \u5c31\u6703\u7522\u751f\u65b0\u7684\u7269\u4ef6\u3002</p> <p>\u901a\u5e38 static factory methods \u53ef\u4ee5\u5be6\u4f5c\u907f\u514d\u91cd\u8907\u7522\u751f\u7269\u4ef6\u7684\u6548\u679c\u3002</p> <p><code>Boolean.valueOf(String)</code> \u512a\u65bc <code>Boolean(String)</code>\uff0c\u56e0\u70ba <code>valueOf</code> \u53ef\u4ee5\u91cd\u8907\u4f7f\u7528\u7269\u4ef6\u3002</p>"},{"location":"java/effective-java/006.html#pattern","title":"\u7bc4\u4f8b: \u91cd\u5fa9\u4f7f\u7528 <code>Pattern</code> \u7269\u4ef6","text":"\u53ef\u4ee5\u6539\u9032\u7684\u5beb\u6cd5<pre><code>static boolean isRomanNumeral(String s) {\n    return s.matches(\"^(?=.)M*(C[MD]|D?C{0,3})\"\n            + \"(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$\");\n}\n</code></pre> <p>\u554f\u984c:</p> <ol> <li><code>String.matches</code> \u6703\u5efa\u7acb\u4e00\u500b\u65b0\u7684 <code>Pattern</code> \u7269\u4ef6\uff0c\u4f7f\u7528\u5b8c\u5f8c\u5c31\u6703\u88ab Garbage Collection \u56de\u6536\u3002</li> <li>\u5efa\u7acb <code>Pattern</code> \u7269\u4ef6\u9700\u8981\u5c07 regular expression \u7de8\u8b6f\u6210 finite state machine\uff0c\u9019\u662f\u4e00\u500b\u6602\u8cb4\u7684\u904b\u7b97\u3002</li> </ol> <p>\u6539\u9032:</p> \u6539\u9032\u5f8c\u7684\u5beb\u6cd5<pre><code>// Reusing expensive object for improved performance\npublic class RomanNumerals {\n    private static final Pattern ROMAN = Pattern.compile(\n            \"^(?=.)M*(C[MD]|D?C{0,3})\"\n            + \"(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$\");\n\n    static boolean isRomanNumeral(String s) {\n        return ROMAN.matcher(s).matches();\n    }\n}\n</code></pre> <p>\u539f\u66f8\u4f5c\u8005\u63d0\u4f9b\u7684\u57f7\u884c\u6642\u9593\u63d0\u5347\u7684\u53c3\u8003\u6578\u64da</p> <p>On my machine, the original version takes 1.1 \u00b5s on an 8-character input string, while the improved version takes 0.17 \u00b5s, which is 6.5 times faster.</p>"},{"location":"java/effective-java/006.html#autoboxing","title":"\u7bc4\u4f8b: autoboxing","text":"<pre><code>// Hideously slow! Can you spot the object creation?\nprivate static long sum() {\n    Long sum = 0L;\n    for (long i = 0; i &lt;= Integer.MAX_VALUE; i++)\n        sum += i;\n\n    return sum;\n}\n</code></pre> <p>\u56e0\u70ba <code>sum</code> \u5ba3\u544a\u6210 <code>Long</code>\uff0c\u6240\u4ee5\u6bcf\u6b21 <code>sum += i</code> \u90fd\u6703\u7522\u751f\u4e00\u500b\u65b0\u7684 <code>Long</code> \u7269\u4ef6\u3002\u7a0b\u5f0f\u8dd1\u5b8c\u5171\u6703\u7522\u751f 2<sup>31</sup> \u500b <code>Long</code> \u7269\u4ef6\u3002\u5c07 <code>Long</code> \u6539\u6210 <code>long</code> \u5c31\u53ef\u4ee5\u907f\u514d\u9019\u500b\u554f\u984c\u3002</p> <p>\u4f5c\u8005\u7684\u6578\u64da</p> <p>Changing the declaration of <code>sum</code> from <code>Long</code> to <code>long</code> reduces the runtime from 6.3 seconds to 0.59 seconds on my machine.</p> <p>Prefer primitives to boxed primitives, and watch out for unintentional autoboxing.</p>"},{"location":"java/effective-java/007.html","title":"Item 7: Eliminate obsolete object references","text":"<pre><code>// Can you spot the \"memory leak\"?\npublic class Stack {\n    private Object[] elements;\n    private int size = 0;\n    private static final int DEFAULT_INITIAL_CAPACITY = 16;\n\n    public Stack() {\n        elements = new Object[DEFAULT_INITIAL_CAPACITY];\n    }\n\n    public void push(Object e) {\n        ensureCapacity();\n        elements[size++] = e;\n    }\n\n    public Object pop() {\n        if (size == 0)\n            throw new EmptyStackException();\n        return elements[--size];\n    }\n\n    /**\n     * Ensure space for at least one more element, roughly\n     * doubling the capacity each time the array needs to grow.\n     */\n    private void ensureCapacity() {\n        if (elements.length == size)\n            elements = Arrays.copyOf(elements, 2 * size + 1);\n    }\n}\n</code></pre> <p>stack <code>size</code> = 5</p> <pre>5fbd600db2e2a0786b0dedd049594e7cb846bea054912a4e921f5ebf2f6ac2d33ef4372cf161f46a9a75577afb938a3709f9b1e546adbc58b1ba0c8125256684</pre><pre>34d2eee2a463696878acc06e8806ba73eaaece0708bbc11905ccecdadbb95238f3a6effb5326116fdc35da45ab9c972bc13f9e8d9adf597880474a278a10c288</pre> <p><code>pop()</code>\u5f8c\uff0c\u547c\u53eb\u7aef\u7684\u5230 <code>obj 5</code>\uff0c\u4e26\u4e14 stack <code>size</code> = 4</p> <pre>9365379f1b65359e50cb755bd01f164da83570f8b9e27097ec4c3ad3c61ed52da9d5fdf8ef9d23296ea6f79494335e5773e3ec5e1ed3a930d2a297391ff31d78</pre><pre>73ab28c0b0b2ae55a1ba5b185fa930c160129e4511e3a4ca45686faad5a66131e050b79ce4845e25c3d5b808449c10601e490446a5b4a6e4bb4b051cb168d594</pre> <p>\u96d6\u7136 <code>obj 5</code> \u88ab pop \u51fa\u4f86\u4e86\uff0c\u56e0\u70ba stack \u7684 reference \u4ecd\u7136\u6307\u5411 <code>obj 5</code>\uff0c\u5373\u4f7f stack \u5916\u90e8\u6c92\u6709\u4efb\u4f55\u5730\u65b9\u53c3\u8003\u5230 <code>obj 5</code>\uff0c<code>obj 5</code> \u4e5f\u4e0d\u6703\u88ab GC \u56de\u6536\u3002\u9019\u7a2e\u60c5\u6cc1\u5c31\u9020\u6210 memory leak\u3002</p> <p>\u50cf\u9019\u7a2e object \u6307\u5411\u4e00\u500b\u6c92\u6709\u5728\u7dad\u8b77\u7684 reference\uff0c\u7a31\u70ba obsolete object reference\u3002</p> <p>\u89e3\u6c7a\u65b9\u5f0f\u5c31\u662f\u5c07 obsolete object reference \u8a2d\u70ba <code>null</code>\u3002</p> <pre>9243783c302090962c5a1054ad7455b3006c02f9a572836860fc6de7f76acc3ac13b7126bfda9a4cad51c94f4a78ecc59b6c90d26288cef2619133e856060612</pre><pre>d11f838455c9734ffc7864014e702e40ae95015867b32cb04e824bb49ecb1169b78ebf9c29f4e885c1f9328c9c720e6f5eb667dfbb21f6c64f90989067d1fb7c</pre> <p>\u4fee\u6b63\u7684\u7a0b\u5f0f\u78bc\u5982\u4e0b:</p> <pre><code>public Object pop() {\n    if (size == 0)\n        throw new EmptyStackException();\n    Object result = elements[--size];\n    elements[size] = null; // Eliminate obsolete reference\n    return result;\n}\n</code></pre> <p>Nulling out object references should be the exception rather than the norm. (\u5c07\u7269\u4ef6\u53c3\u8003\u8a2d\u70ba null \u61c9\u8a72\u662f\u4f8b\u5916\uff0c\u800c\u4e0d\u662f\u5e38\u614b\u3002)</p> <p>\u53e6\u4e00\u7a2e\u6703\u9020\u6210 memory leak \u7684\u662f\u5feb\u53d6\u3002</p> <ul> <li>\u53ef\u4ee5\u4f7f\u7528 <code>WeakHashMap</code> \u4f86\u5be6\u4f5c\u5feb\u53d6\uff0c\u7576\u5feb\u53d6\u7684 key \u4e0d\u518d\u88ab\u4f7f\u7528\u6642\uff0c<code>WeakHashMap</code> \u6703\u81ea\u52d5\u79fb\u9664\u9019\u500b key-value pair\u3002</li> <li>\u5b9a\u671f\u6e05\u7a7a\u5feb\u53d6\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>ScheduledThreadPoolExecutor</code> \u4f86\u5b9a\u671f\u6e05\u7a7a\u5feb\u53d6\u3002</li> <li>\u6216\u8005\u5728\u65b0\u589e\u65b0\u8cc7\u6599\u5230\u5feb\u53d6\u6642\u9806\u4fbf\u9032\u884c\u6e05\u7406\u3002<code>LinkedHashMap</code> \u985e\u5225\u63d0\u4f9b\u4e86\u4e00\u500b\u65b9\u6cd5 <code>removeEldestEntry</code>\uff0c\u4f86\u5e6b\u52a9\u5be6\u73fe\u3002</li> <li>\u5c0d\u65bc\u66f4\u8907\u96dc\u7684\u5feb\u53d6\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u76f4\u63a5\u4f7f\u7528 <code>java.lang.ref</code>\u3002</li> </ul> <p>\u7b2c\u4e09\u7a2e\u9020\u6210 memory leak \u7684\u60c5\u6cc1\u662f listener \u548c callback\u3002</p>"},{"location":"java/effective-java/008.html","title":"Item 8: Avoid finalizers and cleaners","text":""},{"location":"java/effective-java/008.html#finalizers","title":"\u4ec0\u9ebc\u662f Finalizers","text":"<p>finalizer \u662f Java \u63d0\u4f9b\u7684\u4e00\u7a2e resource \u56de\u6536\u6a5f\u5236\uff0c\u4f5c\u7528\u65bc GC (Garbage Collection) \u5728\u56de\u6536\u7269\u4ef6\u524d\uff0c\u6703\u547c\u53eb\u7269\u4ef6\u7684 <code>finalize</code> \u65b9\u6cd5\u4f86\u91cb\u653e resource\u3002</p> <p></p> <p>\u82e5\u7269\u4ef6\u6709 resource \u9700\u8981\u91cb\u653e\uff0c\u5c31\u5c07\u91cb\u653e\u7684\u7a0b\u5f0f\u78bc\u5beb\u5728 <code>protected void finalize()</code>\u3002</p> <pre><code>public class ClassWithFinalizer {\n    @Override\n    protected void finalize() {\n        // release resource\n    }\n}\n</code></pre> <p>Finalizer \u6709 Security, Reliability, Performance \u98a8\u96aa\uff0c\u4e0d\u5efa\u8b70\u4f7f\u7528\uff0c\u4e26\u88ab\u68c4\u7528\u3002\u5728 Java 9 \u88ab\u6a19\u8a18\u70ba deprecated \u4e14\u70ba removal\u3002</p>"},{"location":"java/effective-java/008.html#finalizer","title":"Finalizer \u7684\u66ff\u4ee3\u65b9\u6848","text":"<p>\u4e0d\u4f7f\u7528 finalizer \u53ef\u4ee5\u4f7f\u7528 <code>try-finally</code> \u66ff\u4ee3\u3002</p> <pre><code>FileInputStream  input  = null;\nFileOutputStream output = null;\ntry {\n  input = new FileInputStream(file1);\n  output = new FileOutputStream(file2);\n\n  // ... copy bytes from input to output ...\n\n} finally {\n  if (output != null) {\n    try {\n      output.close();\n    } catch (Exception e) {\n      // ignore exception\n    }\n  }\n  if (input != null) {\n    try {\n      input.close();\n    } catch (Exception e) {\n      // ignore exception\n    }\n  }\n}\n</code></pre> <p>\u7a0b\u5f0f\u78bc\u4e2d\uff0c\u5728 <code>try</code> \u5340\u584a\u4e2d\u5efa\u7acb resource\uff0c\u4e26\u5728 <code>finally</code> \u5340\u584a\u4e2d\u91cb\u653e resource\u3002\u56e0\u70ba <code>try</code> \u5340\u584a\u4e2d\u4e0d\u6b62\u4e00\u500b resource\uff0c\u6240\u4ee5\u5728 <code>finally</code> \u5340\u584a\u4e2d\u8981\u5206\u5225\u91cb\u653e\u3002\u70ba\u4e86\u907f\u514d\u91cb\u653e resource \u6642\u767c\u751f\u4f8b\u5916\u5f71\u97ff\u5176\u4ed6 resource \u7684\u91cb\u653e\uff0c\u6240\u4ee5\u5728\u91cb\u653e resource \u6642\u8981\u7528 <code>try-catch</code> \u5305\u4f4f\uff0c\u5ffd\u7565\u4f8b\u5916\u3002</p> <p>\u9019\u6a23\u7684\u5beb\u6cd5\u771f\u7684\u662f\u53c8\u81ed\u53c8\u9577\u3002</p>"},{"location":"java/effective-java/008.html#try-with-resources","title":"try-with-resources","text":"<p>Java 7 \u65b0\u589e\u7684 try-with-resources \u53ef\u4ee5\u7528\u4f86\u91cb\u653e resource\uff0c\u6539\u9032\u4e0a\u9762\u6240\u63d0\u5230\u7684 <code>try-finally</code> \u7684\u5beb\u6cd5\u3002\u7b49\u50f9\u5beb\u6cd5\u5982\u4e0b:</p> <pre><code>try (FileInputStream input = new FileInputStream(file1);\n     FileOutputStream output = new FileOutputStream(file2)) {\n    // ... copy bytes from input to output ...\n}\n</code></pre>"},{"location":"java/effective-java/008.html#cleaners","title":"Cleaners","text":"<p>try-with-resource \u4e0d\u9069\u7528\u5728\u751f\u547d\u9031\u671f\u9577\u7684 resource\uff0cJava 9 \u65b0\u589e\u4e86 Cleaner \u7528\u4f86\u91cb\u653e\u9577\u751f\u547d\u9031\u671f\u7684 resource\u3002</p> <p>Cleaner \u5141\u8a31\u8a3b\u518a release action \u7684\u52d5\u4f5c\uff0c\u7576\u7269\u4ef6 unreachable \u6642\uff0cCleaner \u6703\u57f7\u884c release action\u3002</p> <pre><code>public class CleaningExample implements AutoCloseable {\n    private static final Cleaner cleaner = Cleaner.create();\n\n    static class State implements Runnable {\n\n        State(...) {\n            // \u6e96\u5099\u6e05\u7406\u52d5\u4f5c\u6240\u9700\u8981\u7684\u8cc7\u6599\u3002\n        }\n\n        public void run() {\n            // \u57f7\u884c\u6e05\u7406\u52d5\u4f5c\uff0c\u6700\u591a\u57f7\u884c\u4e00\u6b21\u3002\n        }\n    }\n\n    private final State state;\n    private final Cleaner.Cleanable cleanable;\n\n    public CleaningExample() {\n        this.state = new State(...);\n        this.cleanable = cleaner.register(this, state);\n    }\n\n    public void close() {\n        cleanable.clean();\n    }\n}\n</code></pre> <ul> <li><code>State</code> \u7a31\u4f5c clean action\uff0c\u5be6\u4f5c <code>Runnable</code> \u4ecb\u9762\uff0c\u8ca0\u8cac\u57f7\u884c\u91cb\u653e resource \u7684\u52d5\u4f5c\u3002</li> <li><code>CleaningExample</code> \u5be6\u4f5c <code>AutoCloseable</code> \u4ecb\u9762\uff0c\u8ca0\u8cac\u8a3b\u518a clean action\u3002\u7576\u7269\u4ef6\u8b8a\u5f97 unreachable \u6642\uff0cclean action \u6703\u88ab\u57f7\u884c\u3002<ul> <li>\u6ce8\u610f\uff0cclean action \u4e0d\u8981\u56de\u53bb\u53c3\u8003 <code>AutoCloseable</code> \u7269\u4ef6\uff0c\u5426\u5247\u6703\u8b93 unreachable \u72c0\u614b\u6c38\u9060\u7121\u6cd5\u9054\u5230\u3002</li> </ul> </li> <li>\u5411 cleaner \u8a3b\u518a clean action \u5f8c\u56de\u50b3 <code>Cleanable</code> \u7269\u4ef6\uff0c\u7528\u4f86\u57f7\u884c clean action\u3002<ul> <li>\u6700\u6709\u6548\u7387\u7684\u505a\u6cd5\u662f\u5728 resource \u4e0d\u9700\u8981\u6642\uff0c\u547c\u53eb <code>clean()</code> \u4f86\u57f7\u884c clean action\u3002(\u7b2c 23-25 \u884c)</li> </ul> </li> <li>clean action \u5728 cleaner \u7684 thread \u4e2d\u57f7\u884c\uff0c\u6240\u6709 clean action \u62cb\u51fa\u7684\u4f8b\u5916\u90fd\u6703\u88ab\u5ffd\u7565\u3002\u6240\u4ee5 clean action \u7684\u4f8b\u5916\u4e0d\u6703\u5f71\u97ff\u5176\u4ed6\u7684 clean action\u3002</li> <li><code>AutoClosable</code> \u8a3b\u518a\u7684\u6240\u6709 clean action \u90fd\u57f7\u884c\u5b8c\u7562\uff0cGC \u624d\u6703\u56de\u6536\u7269\u4ef6\u3002</li> <li>Clean action \u53ef\u4ee5\u7528 lambda \u4f86\u5be6\u4f5c\uff0c\u4f46\u6703\u5f88\u5bb9\u6613\u4e0d\u5c0f\u5fc3\u53c3\u8003\u5230 <code>AutoCloseable</code> \u7269\u4ef6\u3002\u6240\u4ee5\u6309\u7bc4\u4f8b\u5be6\u4f5c\u6210 nested static class \u53ef\u4ee5\u907f\u514d\u9019\u7a2e\u932f\u8aa4\u3002</li> </ul> <p>\u5982\u679c\u4f9d\u8cf4 cleaner \u81ea\u52d5\u57f7\u884c clean action\uff0c\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e0d\u80fd\u4fdd\u8b49\u5728 <code>System.exit</code> (\u5305\u542b\u7a0b\u5f0f\u6b63\u5e38\u7d50\u675f) \u662f\u5426\u6703\u88ab\u57f7\u884c\u3002\u56e0\u6b64\uff0c\u6709\u53ef\u80fd\u7a0b\u5f0f\u7d50\u675f\u4e86\uff0c\u4f46\u662f clean action \u4e26\u6c92\u6709\u57f7\u884c\u3002</p> <p>\u53e6\u5916\uff0ccleaner \u53d7 GC \u6392\u7a0b\uff0c\u4e5f\u6703\u6709 Reliability \u8207 Performance \u7684\u554f\u984c\u3002</p> <p>\u7c21\u55ae\u4f86\u8aaa\uff0c\u61c9\u907f\u514d\u4f7f\u7528 finalizer \u8207 cleaner\u3002</p>"},{"location":"java/effective-java/008.html#_1","title":"\u984d\u5916\u53c3\u8003","text":"<ul> <li>JEP 421: Deprecate Finalization for Removal</li> </ul>"},{"location":"java/effective-java/009.html","title":"Item 9: Prefer try-with-resources to try-finally","text":"<p>\u4f7f\u7528 <code>try-finally</code> \u53ef\u4ee5\u78ba\u4fdd\u8cc7\u6e90\u53ef\u4ee5\u6b63\u5e38\u88ab\u95dc\u9589\uff0c\u4f46\u5982\u540c Item 8 \u6240\u8ff0\uff0c\u9019\u6a23\u7684\u5beb\u6cd5\u6703\u8b93\u7a0b\u5f0f\u78bc\u8b8a\u5f97\u5197\u9577\u4e14\u96e3\u4ee5\u95b1\u8b80\uff0c\u800c\u4e14\u8f03\u8907\u96dc\u7684\u72c0\u6cc1\u53ef\u80fd\u6703\u9020\u6210\u4f8b\u5916\u8986\u84cb\u96e3\u4ee5\u9664\u932f\u3002</p> <p>Java 7 \u5f15\u5165\u4e86 try-with-resources \u4f86\u89e3\u6c7a\u9019\u500b\u554f\u984c\uff0c\u9019\u500b\u8a9e\u6cd5\u53ef\u4ee5\u8b93\u7a0b\u5f0f\u78bc\u66f4\u7c21\u6f54\u4e14\u6613\u8b80\u3002\u985e\u5225\u9700\u5be6\u4f5c <code>AutoCloseable</code> \u4ecb\u9762\uff0c\u4e26\u5be6\u4f5c <code>close</code> \u65b9\u6cd5\uff0c\u9019\u6a23\u5c31\u53ef\u4ee5\u5728 try-with-resources \u4e2d\u4f7f\u7528\u3002</p>"},{"location":"java/effective-java/009.html#try-with-resources","title":"\u4f7f\u7528 try-with-resources","text":"<pre><code>public class Main {\n    public static class SimpleAutoCloseable implements AutoCloseable { // (1)!\n        public void doIo(){\n            System.err.println(\"SimpleAutoCloseable.doIo()\");\n        }\n\n        @Override\n        public void close() {\n            System.err.println(\"SimpleAutoCloseable.close()\");\n        }\n    }\n\n    public static void main(String[] args) {\n        try (SimpleAutoCloseable sac = new SimpleAutoCloseable()) { // (2)!\n            sac.doIo();\n        }\n    }\n}\n</code></pre> <ol> <li><code>SimpleAutoCloseable</code> \u5be6\u4f5c <code>AutoCloseable</code> \u4ecb\u9762\uff0c\u4e26\u5be6\u4f5c <code>close</code> \u65b9\u6cd5\u3002</li> <li>\u5728 <code>try</code> \u62ec\u865f\u4e2d\u5ba3\u544a <code>SimpleAutoCloseable</code> \u7269\u4ef6\uff0c\u5728 try \u5340\u584a\u7d50\u675f\u6642\uff0c\u7121\u8ad6\u6709\u7121\u767c\u751f\u4f8b\u5916\uff0c\u90fd\u6703\u81ea\u52d5\u547c\u53eb <code>close</code> \u65b9\u6cd5\u3002</li> </ol> <p>\u7a0b\u5f0f\u7684\u57f7\u884c\u7d50\u679c</p> <pre><code>SimpleAutoCloseable.doIo()\nSimpleAutoCloseable.close()\n</code></pre>"},{"location":"java/effective-java/009.html#try-with-multiple-resources","title":"try with multiple resources","text":"<pre><code>try (FileInputStream input = new FileInputStream(file1);\n     FileOutputStream output = new FileOutputStream(file2)) {\n}\n</code></pre>"},{"location":"java/effective-java/009.html#try-close","title":"<code>try</code> \u5340\u584a\u767c\u751f\u4f8b\u5916: <code>close</code> \u65b9\u6cd5\u4f9d\u7136\u6703\u88ab\u547c\u53eb","text":"<pre><code>public class Main {\n    public static class SimpleAutoCloseable implements AutoCloseable {\n        public void doIo(){\n            System.err.println(\"SimpleAutoCloseable.doIo()\");\n            throw new RuntimeException(\"Exception in doIo()\");  // (1)!\n        }\n\n        @Override\n        public void close() {\n            System.err.println(\"SimpleAutoCloseable.close()\");\n        }\n    }\n\n    public static void main(String[] args) {\n        try (SimpleAutoCloseable sac = new SimpleAutoCloseable()) {\n            sac.doIo();\n        }\n    }\n}\n</code></pre> <ol> <li>\u6545\u610f\u5728 <code>doIo</code> \u65b9\u6cd5\u4e2d\u62cb\u51fa\u4f8b\u5916\uff0c\u9019\u6703\u9020\u6210 <code>try</code> \u5340\u584a\u5728\u547c\u53eb\u6642\u767c\u751f\u4f8b\u5916\u3002</li> </ol> <p>\u7a0b\u5f0f\u7684\u57f7\u884c\u7d50\u679c:</p> <pre><code>SimpleAutoCloseable.doIo()\nSimpleAutoCloseable.close()\nException in thread \"main\" java.lang.RuntimeException: Exception in doIo()\n    at ...\n</code></pre> <p>\u5982\u679c\u8981\u6355\u6349 <code>doIo</code> \u65b9\u6cd5\u7684\u4f8b\u5916\uff0c\u53ef\u4ee5\u5728 <code>try</code> \u589e\u52a0 <code>catch</code> \u5340\u584a\u3002</p> <pre><code>try (...) {\n    // ...\n} catch (Exception e) {\n    // handle exception\n}\n</code></pre>"},{"location":"java/effective-java/009.html#finally","title":"<code>finally</code> \u5340\u584a\u767c\u751f\u4f8b\u5916","text":"<pre><code>public class Main {\n    public static class SimpleAutoCloseable implements AutoCloseable {\n        public void doIo(){\n            System.err.println(\"SimpleAutoCloseable.doIo()\");\n        }\n\n        @Override\n        public void close() {\n            System.err.println(\"SimpleAutoCloseable.close()\");\n            throw new RuntimeException(\"Exception in close()\"); // (1)!\n        }\n    }\n\n    public static void main(String[] args) {\n        try (SimpleAutoCloseable sac = new SimpleAutoCloseable()) {\n            sac.doIo();\n        }\n    }\n}\n</code></pre> <ol> <li>\u6545\u610f\u5728 <code>close</code> \u65b9\u6cd5\u4e2d\u62cb\u51fa\u4f8b\u5916\uff0c\u6703\u9020\u6210 <code>try</code> \u5340\u584a\u7d50\u675f\u5f8c\u57f7\u884c\u7684 <code>close</code> \u65b9\u6cd5\u767c\u751f\u4f8b\u5916\u3002</li> </ol> <p>\u57f7\u884c\u7d50\u679c:</p> <pre><code>SimpleAutoCloseable.doIo()\nSimpleAutoCloseable.close()\nException in thread \"main\" java.lang.RuntimeException: Exception in close()\n    at ... \n</code></pre> <p>\u5982\u679c\u8981\u6355\u6349 <code>doIo</code> \u65b9\u6cd5\u7684\u4f8b\u5916\uff0c\u53ef\u4ee5\u5728 <code>try</code> \u589e\u52a0 <code>catch</code> \u5340\u584a\u3002</p> <pre><code>try (...) {\n    // ...\n} catch (Exception e) {\n    // handle exception\n}\n</code></pre>"},{"location":"java/effective-java/009.html#try-finally-close-suppress","title":"<code>try</code> \u5340\u584a\u8207 <code>finally</code> \u5340\u584a\u90fd\u767c\u751f\u4f8b\u5916: <code>close</code> \u65b9\u6cd5\u7684\u4f8b\u5916\u6703\u88ab Suppress","text":"<pre><code>public class Main {\n    public static class SimpleAutoCloseable implements AutoCloseable {\n        public void doIo() {\n            System.err.println(\"SimpleAutoCloseable.doIo()\");\n            throw new RuntimeException(\"Exception in doIo()\");  // (1)!\n        }\n\n        @Override\n        public void close() {\n            System.err.println(\"SimpleAutoCloseable.close()\");\n            throw new RuntimeException(\"Exception in close()\");  // (2)!\n        }\n    }\n\n    public static void main(String[] args) {\n        try (SimpleAutoCloseable sac = new SimpleAutoCloseable()) {\n            sac.doIo();\n        }\n    }\n}\n</code></pre> <ol> <li>\u6545\u610f\u5728 <code>doIo</code> \u65b9\u6cd5\u4e2d\u62cb\u51fa\u4f8b\u5916\uff0c\u9019\u6703\u9020\u6210 <code>try</code> \u5340\u584a\u5728\u547c\u53eb\u6642\u767c\u751f\u4f8b\u5916\u3002</li> <li>\u6545\u610f\u5728 <code>close</code> \u65b9\u6cd5\u4e2d\u62cb\u51fa\u4f8b\u5916\uff0c\u6703\u9020\u6210 <code>try</code> \u5340\u584a\u7d50\u675f\u5f8c\u57f7\u884c\u7684 <code>close</code> \u65b9\u6cd5\u767c\u751f\u4f8b\u5916\u3002</li> </ol> <p>\u57f7\u884c\u7d50\u679c:</p> <pre><code>SimpleAutoCloseable.doIo()\nSimpleAutoCloseable.close()\nException in thread \"main\" java.lang.RuntimeException: Exception in doIo()\n    at ...\n    Suppressed: java.lang.RuntimeException: Exception in close()\n        at ...\n</code></pre> <p>try-finally \u7684\u4f8b\u5916\u8986\u84cb\u884c\u70ba</p> <p>\u503c\u5f97\u95dc\u6ce8\u7684\u662f\uff0ctry-with-resource \u767c\u751f\u591a\u500b\u4f8b\u5916\u7684\u884c\u70ba\uff0c\u8207 try-catch-finally \u7684\u591a\u500b\u4f8b\u5916\u884c\u70ba\u4e0d\u540c\u3002(Java 21)</p> <pre><code>try {\n    throw new RuntimeException(\"Exception in try block\");\n} finally {\n    throw new RuntimeException(\"Exception in finally block\");\n}\n</code></pre> <p>\u57f7\u884c\u7d50\u679c</p> <pre><code>Exception in thread \"main\" java.lang.RuntimeException: Exception in finally block\n    at ...\n</code></pre> <p>\u9019\u7a2e\u60c5\u6cc1\uff0c<code>try</code> \u7684\u4f8b\u5916\u8a0a\u606f\u907a\u5931\u4e86\uff0c\u9019\u6703\u9020\u6210\u9664\u932f\u4e0a\u7684\u56f0\u96e3\u3002\u800c try-with-resource \u7684\u4f8b\u5916\u884c\u70ba\uff0c\u6703\u5c07 <code>try</code> \u7684\u4f8b\u5916\u8a0a\u606f\u4fdd\u7559\u4e0b\u4f86\uff0c\u4e26\u5c07 <code>finally</code> \u7684\u4f8b\u5916\u8a0a\u606f\u4ee5 suppressed \u7684\u65b9\u5f0f\u9644\u52a0\u5728\u5f8c\u9762\u3002</p>"},{"location":"java/effective-java/010.html","title":"Item 10: Obey the general contract when overriding equals","text":"<p><code>Object.equals</code> \u8a2d\u8a08\u4f86\u8b93 subclass \u53ef\u4ee5 override \u81ea\u5b9a\u7fa9\u7269\u4ef6\u7684\u6bd4\u8f03\u908f\u8f2f\u3002</p> <p>\u5982\u679c\u6c92\u6709 override\uff0c\u9810\u8a2d\u884c\u70ba\u662f\u6bd4\u8f03\u5169\u500b\u7269\u4ef6\u7684 reference \u662f\u5426\u76f8\u540c\u3002</p>"},{"location":"java/effective-java/010.html#_1","title":"\u9810\u8a2d\u884c\u70ba\u9069\u7528\u65bc","text":"<ul> <li>\u6bcf\u500b\u7269\u4ef6\u672c\u8cea\u4e0a\u90fd\u662f\u7368\u4e00\u7121\u4e8c\u7684</li> <li>class \u6c92\u6709\u9700\u8981\u63d0\u4f9b\u6aa2\u67e5\u5169\u500b\u7269\u4ef6\u662f\u5426\u76f8\u540c\u7684\u9700\u6c42</li> <li>super class \u5df2\u7d93\u5be6\u4f5c <code>equals</code>\uff0c\u4e14\u5224\u65b7\u689d\u4ef6\u9069\u7528\u65bc subclass</li> <li>class \u662f private \u6216 package-private\uff0c\u6211\u5011\u78ba\u4fe1 class \u4e0d\u6703\u88ab\u5176\u4ed6\u5730\u65b9\u4f7f\u7528</li> </ul>"},{"location":"java/effective-java/010.html#override-equals","title":"\u9700\u8981 override <code>equals</code> \u7684\u60c5\u6cc1","text":"<p>value class \u9700\u8981\u81ea\u5b9a\u7fa9 <code>equals</code>\u3002</p> <ul> <li>\u5982\u679c\u6709\u5be6\u4f5c instance controller \u5247\u53ef\u4ee5\u4e0d\u7528 override <code>equals</code> (Item 1)</li> <li>Enum type \u4e5f\u53ef\u4ee5\u4e0d\u7528 override <code>equals</code></li> </ul>"},{"location":"java/effective-java/010.html#equals","title":"<code>equals</code> \u7684\u7d04\u5b9a","text":"<p><code>equals</code> \u662f\u7528\u4f86\u6aa2\u67e5 equivalence relation\u3002\u4e26\u9700\u8981\u6709\u4ee5\u4e0b\u7279\u6027: (<code>x</code>, <code>y</code>, <code>z</code> \u7686\u4e0d\u70ba <code>null</code>)</p> <ul> <li>Reflexive (\u81ea\u53cd\u6027): <code>x.equals(x)</code> \u5fc5\u9808\u662f <code>true</code></li> <li>Symmetric (\u5c0d\u7a31\u6027): \u82e5 <code>x.equals(y)</code> \u662f <code>true</code> \u5247 <code>y.equals(x)</code> \u4e5f\u5fc5\u9808\u662f <code>true</code></li> <li>Transitive (\u50b3\u905e\u6027): \u82e5 <code>x.equals(y)</code> \u8207 <code>y.equals(z)</code> \u90fd\u662f <code>true</code>\uff0c\u5247 <code>x.equals(z)</code> \u4e5f\u5fc5\u9808\u662f <code>true</code></li> <li>Consistent (\u4e00\u81f4\u6027): \u5728\u6c92\u6709\u8cc7\u6599\u6539\u8b8a\u7684\u60c5\u6cc1\u4e0b\uff0c<code>x.equals(y)</code> \u7684\u4efb\u610f\u6b21\u547c\u53eb\u7d50\u679c\u5fc5\u9808\u662f\u76f8\u540c\u7684\u3002</li> <li><code>x.equals(null)</code> \u5fc5\u9808\u662f <code>false</code></li> </ul> <p>\u82e5\u9055\u53cd\u9019\u4e9b\u898f\u5247\uff0c\u7a0b\u5f0f\u5c07\u6703\u8b8a\u5f97\u4e0d\u7a69\u5b9a\uff0c\u4e14\u589e\u52a0\u9664\u932f\u7684\u96e3\u5ea6\u3002</p>"},{"location":"java/effective-java/010.html#reflexivity","title":"\u9055\u53cd Reflexivity \u7684\u7bc4\u4f8b","text":"<pre><code>public class Main {\n    public static class ClassViolateReflective {\n        @Override\n        public boolean equals(Object obj) {\n            return false; // (1)!\n        }\n    }\n\n    public static void main(String[] args) {\n        Collection&lt;ClassViolateReflective&gt; set = new ArrayList&lt;&gt;();\n        ClassViolateReflective objectViolateReflective = new ClassViolateReflective();\n        set.add(objectViolateReflective); // (2)!\n        System.out.println(set.contains(objectViolateReflective)); // (3)!\n    }\n}\n</code></pre> <ol> <li>\u7121\u5dee\u5225\u56de\u50b3 <code>false</code> \u88fd\u9020\u9055\u53cd Reflexive \u7684\u6548\u679c</li> <li>\u5c07\u7269\u4ef6\u52a0\u5165\u96c6\u5408\u4e2d</li> <li>\u5224\u65b7\u65b9\u624d\u52a0\u5165\u7684\u7269\u4ef6\u662f\u5426\u5b58\u5728\u65bc\u96c6\u5408\u4e2d</li> </ol> <p>\u8f38\u51fa\u7d50\u679c:</p> <pre><code>false  &lt;!-- (1)! --&gt;\n</code></pre> <ol> <li>\u671f\u671b\u70ba <code>true</code>\uff0c\u4f46\u56e0\u70ba\u9055\u53cd Reflexive \u800c\u70ba <code>false</code>\u3002</li> </ol>"},{"location":"java/effective-java/010.html#symmetry","title":"\u9055\u53cd Symmetry \u7684\u7bc4\u4f8b","text":"<pre><code>public class Main {\n    public static class CaseInsensitiveString {\n        private final String value;\n\n        public CaseInsensitiveString(String value) {\n            this.value = value;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (obj instanceof CaseInsensitiveString castedObj) {\n                return value.equalsIgnoreCase(castedObj.value);\n            }\n            if (obj instanceof String castedObj) {\n                return value.equalsIgnoreCase(castedObj);\n            }\n            return false;\n        }\n    }\n\n    public static void main(String[] args) {\n        CaseInsensitiveString cis = new CaseInsensitiveString(\"Polish\");\n        String s = \"polish\";\n        System.out.println(cis.equals(s));\n        System.out.println(s.equals(cis));\n    }\n}\n</code></pre> <p>\u8f38\u51fa\u7d50\u679c</p> <pre><code>true\nfalse &lt;!-- (1)! --&gt;\n</code></pre> <ol> <li>\u671f\u671b\u70ba <code>true</code>\uff0c\u4f46\u56e0\u70ba\u9055\u53cd Symmetric \u800c\u70ba <code>false</code>\u3002</li> </ol> <p>\u5982\u679c\u7a0b\u5f0f\u9055\u53cd Symmetric\uff0c\u6211\u5011\u53ef\u4ee5\u77e5\u9053\u4ee5\u4e0b\u7684\u7a0b\u5f0f\u6703\u8f38\u51fa\u4ec0\u9ebc\u55ce?</p> <pre><code>List&lt;CaseInsensitiveString&gt; list = ...\nlist.add(cis);\nSystem.out.println(list.contains(s));\n</code></pre>"},{"location":"java/effective-java/010.html#transitivity","title":"\u9055\u53cd Transitivity \u7684\u7bc4\u4f8b","text":"<pre><code>public class Point {\n    private final int x;\n\n    private final int y;\n\n    public Point(int x, int y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (obj instanceof Point point) {\n            return point.x == x &amp;&amp; point.y == y;\n        }\n        return false;\n    }\n}\n\npublic class ColorPoint extends Point {\n    private final Color color;\n\n    public ColorPoint(int x, int y, Color color) {\n        super(x, y);\n        this.color = color;\n    }\n}\n\npublic static void main(String[] args) {\n    Point point = new Point(3, 6);\n    ColorPoint colorPoint = new ColorPoint(3, 6, Color.RED);\n\n    System.out.println(point.equals(colorPoint));\n    System.out.println(colorPoint.equals(point));\n}\n</code></pre> <p>\u7a0b\u5f0f\u7684\u57f7\u884c\u7d50\u679c\u70ba:</p> <pre><code>true\ntrue\n</code></pre> <p>\u5982\u679c <code>ColorPoint</code> \u5ffd\u7565 <code>color</code> \u7684\u6bd4\u8f03\uff0c\u90a3\u9ebc <code>ColorPoint</code> \u8207 <code>Point</code> \u4e26\u6c92\u6709\u9055\u53cd <code>equals</code> \u7684\u7d04\u5b9a\uff0c\u4f46\u662f\u9019\u7a2e\u5be6\u4f5c\u53ef\u80fd\u7121\u6cd5\u63a5\u53d7\u3002</p> <p>\u4f46\u662f\u5982\u679c\u6211\u5011\u4e0d\u5ffd\u7565 <code>color</code>\uff0c\u90a3\u9ebc\u4ee5\u4e0b\u5be6\u4f5c\u5c07\u9055\u53cd Symmetry\u3002</p> <pre><code>public class ColorPoint extends Point {\n    // ...\n\n    @Override\n    public boolean equals(Object obj) {\n        if(obj instanceof ColorPoint cp)\n            return cp.color == color &amp;&amp; super.equals(obj); // (1)!\n        return false; // (2)!\n    }\n}\n</code></pre> <ol> <li>override <code>equals</code> \u589e\u52a0 <code>color</code> \u7684\u6bd4\u8f03\u3002</li> <li><code>ColorPoint</code> \u8207\u4e0d\u540c type \u7684\u7269\u4ef6\u7121\u6cd5\u6bd4\u8f03\uff0c\u56de\u50b3 <code>false</code>\u3002</li> </ol> <p>\u7a0b\u5f0f\u57f7\u884c\u7d50\u679c\u5982\u4e0b:</p> <pre><code>true\nfalse\n</code></pre> <p>\u5982\u524d\u6240\u8ff0\uff0c\u5be6\u4f5c\u7834\u58de\u4e86 Symmetry\u3002</p> <p>\u7a0b\u5f0f\u78bc\u53ef\u80fd\u53ef\u4ee5\u5728\u5ea7\u6905\u4e0b\u4fee\u6b63:</p> <pre><code>public class ColorPoint extends Point {\n    // ...\n\n    @Override\n    public boolean equals(Object obj) {\n        if (!(obj instanceof Point)) {\n            return false; // (1)!\n        }\n\n        if (obj instanceof ColorPoint cp) {\n            return cp.color == color &amp;&amp; super.equals(obj);\n        }\n        return obj.equals(this); // (2)!\n    }\n}\n</code></pre> <ol> <li>early return\uff0c\u5982\u679c\u7269\u4ef6\u4e0d\u662f <code>Point</code> \u5247\u56de\u50b3 <code>false</code></li> <li>\u5982\u679c\u7269\u4ef6\u662f <code>Point</code>\uff0c\u5247\u547c\u53eb <code>Point.equals</code> \u4f86\u6bd4\u8f03\u3002</li> </ol> <p>\u7a0b\u5f0f\u57f7\u884c\u7d50\u679c\u6eff\u8db3\u4e86 Symmetry\u3002</p> <pre><code>true\ntrue\n</code></pre> <p>\u4e0d\u904e\u7a0b\u5f0f\u4e5f\u56e0\u6b64\u9055\u53cd\u4e86 Transitivity\u3002</p> <pre><code>public static void main(String[] args) {\n    Point point = new Point(3, 6);\n    ColorPoint redPoint = new ColorPoint(3, 6, Color.RED);\n    ColorPoint bluePoint = new ColorPoint(3, 6, Color.BLUE);\n\n    System.out.println(point.equals(redPoint));\n    System.out.println(point.equals(bluePoint));\n    System.out.println(redPoint.equals(bluePoint));\n}\n</code></pre> <p>\u57f7\u884c\u7d50\u679c\u70ba:</p> <pre><code>true\ntrue\nfalse &lt;!-- (1)! --&gt;\n</code></pre> <ol> <li>\u6eff\u8db3 Transitivity \u7684\u60c5\u6cc1\u61c9\u70ba <code>ture</code>\uff0c\u4e0d\u904e\u56e0\u70ba <code>redPoint</code> \u8207 <code>bluePoint</code> \u4e0d\u76f8\u7b49\uff0c\u6240\u4ee5\u56de\u50b3 <code>false</code>\u3002</li> </ol> <p>A fundamental problem of equivalence relations in object-oriented languages</p> <p>There is no way to extend an instantiable class and add a value component while preserving the equals contract, unless you\u2019re willing to forgo the benefits of object-oriented abstraction.</p> <p>\u7269\u4ef6\u5c0e\u5411\u7684\u7e7c\u627f\u67b6\u69cb\uff0c\u5c0d\u65bc <code>equals</code> \u8a2d\u8a08\u8981\u6eff\u8db3 Transitivity \u7279\u6027\uff0c\u6709\u672c\u8cea\u4e0a\u7684\u56f0\u96e3\u3002</p> <p>\u70ba\u907f\u514d Transitivity \u7684\u554f\u984c\u9020\u6210\u7a0b\u5f0f\u7684\u56f0\u96e3\uff0c\u5982\u679c\u80fd\u7684\u8a71  Favor composition over inheritance\u3002</p> <pre><code>public class ColorPoint {\n    private final Point point;\n\n    private final Color color;\n\n    public ColorPoint(Point point, Color color) {\n        this.point = point;\n        this.color = color;\n    }\n\n    public Point asPoint() { // (1)!\n        return point;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (obj instanceof ColorPoint cp) { // (2)!\n            return cp.point.equals(point) &amp;&amp; cp.color == color;\n        }\n        return false; // (3)!\n    }\n}\n</code></pre> <ol> <li>\u63d0\u4f9b <code>asPoint</code> \u65b9\u6cd5\uff0c\u8b93\u4f7f\u7528\u8005\u53ef\u4ee5\u53d6\u5f97 <code>Point</code> \u7269\u4ef6\u3002</li> <li>\u53ea\u6bd4\u8f03 <code>ColorPoint</code> \u985e\u5225\u7684 <code>point</code> \u8207 <code>color</code>\u3002</li> <li>\u5982\u679c\u7269\u4ef6\u4e0d\u662f <code>ColorPoint</code> \u5247\u56de\u50b3 <code>false</code>\u3002</li> </ol>"},{"location":"java/effective-java/010.html#consistent","title":"\u9055\u53cd Consistent \u7684\u7bc4\u4f8b","text":"<p><code>equals</code> \u7684\u5be6\u4f5c\u76f8\u4f9d\u4e0d\u7a69\u5b9a\u7684\u5c6c\u6027\uff0c\u5c31\u5bb9\u6613\u9055\u53cd Consistent\u3002\u4f8b\u5982\uff0c<code>java.net.URL</code> \u7684 <code>equals</code> \u5be6\u4f5c\u76f8\u4f9d\u65bc Host \u5c0d\u61c9\u7684 IP \u4f4d\u5740\uff0c\u4f46\u662f IP \u7684\u4f4d\u5740\u6839\u64da\u7db2\u8def\u7684\u72c0\u6cc1\u53ef\u80fd\u4e0d\u540c\uff0c\u6240\u4ee5\u7121\u6cd5\u4fdd\u8b49 <code>equals</code> \u7684\u7d50\u679c\u6c38\u9060\u90fd\u6703\u662f\u76f8\u7b49\u7684\u3002\u9019\u6a23\u7684\u5be6\u4f5c\u662f\u932f\u8aa4\uff0c\u56e0\u70ba\u5411\u4e0b\u76f8\u5bb9\u7684\u9700\u8981\uff0c\u6240\u4ee5\u7121\u6cd5\u4fee\u6b63\u9019\u500b\u932f\u8aa4\u3002</p> <p><code>equals</code> \u7684\u5be6\u4f5c\u5fc5\u9808\u50c5\u80fd\u76f8\u4f9d\u65bc\u8a18\u61b6\u9ad4\u4e2d\u7269\u4ef6\u7684\u8a08\u7b97\u5f97\u51fa\uff0c\u4e0d\u5f97\u76f8\u4f9d\u65bc\u5916\u90e8\u8cc7\u6e90\u3002</p>"},{"location":"java/effective-java/010.html#non-nullity","title":"non-nullity \u7684\u91cd\u9ede","text":"<p>\u7121\u8ad6 <code>o.equals(null)</code> \u56de\u50b3\u4ec0\u9ebc\uff0c\u90fd\u4e0d\u61c9\u8a72\u62cb\u51fa <code>NullPointerException</code>\u3002</p> <p>\u5f88\u591a\u7a0b\u5f0f\u6703\u5beb\u6210\u9019\u6a23:</p> <pre><code>@Override\npublic boolean equals(Object o) {\n    if (o == null) {\n        return false;\n    }\n    // ...\n}\n</code></pre> <p>\u9019\u6a23\u660e\u78ba\u6aa2\u67e5\u50b3\u5165\u7269\u4ef6\u5fc5\u9808\u4e0d\u662f <code>null</code> \u7684\u505a\u6cd5\u662f\u4e0d\u9700\u8981\u7684\uff0c\u53ea\u9700\u8981\u4f7f\u7528 <code>instanceof</code> \u4f86\u6aa2\u67e5\u5373\u53ef\u3002</p> <pre><code>@Override\npublic boolean equals(Object o) {\n    if (!(o instanceof SpecificType)) {\n        return false;\n    }\n    // ...\n}\n</code></pre> <p>\u7576 <code>instanceof</code> \u7684\u7b2c\u4e00\u500b\u904b\u7b97\u5143(operand) \u662f <code>null</code> \u6642\uff0c\u8a08\u7b97\u7684\u7d50\u679c\u70ba <code>false</code>\u3002\u56e0\u6b64\uff0c\u4e0d\u9700\u8981\u660e\u78ba\u7684\u6aa2\u67e5\u7269\u4ef6\u662f\u5426\u70ba <code>null</code>\uff0c\u4f7f\u7528 <code>instanceof</code> \u5224\u65b7\u7269\u4ef6\u578b\u5225\u5373\u53ef\u3002</p>"},{"location":"java/effective-java/010.html#_2","title":"\u5176\u4ed6\u91cd\u9ede","text":"<ol> <li>\u4f7f\u7528 <code>==</code> \u4f86\u6bd4\u8f03\u5169\u500b\u7269\u4ef6\u662f\u76f8\u540c\u7684 instance\u3002</li> <li>\u4f7f\u7528 <code>instanceof</code> \u6aa2\u67e5\u7269\u4ef6\u7684\u578b\u5225\u3002</li> <li> <p>\u8f49\u578b\u524d\u4f7f\u7528 <code>instanceof</code> \u4f86\u6aa2\u67e5\u578b\u5225\u3002</p> <ul> <li>JEP 394: Pattern Matching for instanceof (Java 16)</li> </ul> <pre><code>if (obj instance String) { // (1)!\n    String s = (String) obj; // (2)!\n    // ...\n}\n</code></pre> <ol> <li>\u6e2c\u8a66 <code>obj</code> \u662f\u5426\u70ba <code>String</code> \u578b\u5225</li> <li>\u8f49\u578b <code>obj</code> \u70ba <code>String</code>\uff0c\u4e26\u5ba3\u544a\u8b8a\u6578\u5132\u5b58\uff0c\u7a0d\u5f8c\u4f7f\u7528\u3002</li> </ol> <p>Pattern Matching for instanceof \u53ef\u4ee5\u7c21\u5316\u9019\u6a23\u7684\u5beb\u6cd5:</p> <pre><code>if (obj instance String s) {\n    // ...\n}\n</code></pre> </li> <li> <p>\u6bd4\u5c0d\u6bcf\u4e00\u500b\u91cd\u8981\u7684\u6b04\u4f4d\u3002</p> <ul> <li>\u975e <code>float</code>, <code>double</code> \u4f7f\u7528 <code>==</code> \u4f86\u6bd4\u8f03\u3002</li> <li><code>float</code>, <code>double</code> \u4f7f\u7528 <code>Float.compare</code>, <code>Double.compare</code> \u4f86\u6bd4\u8f03\u3002</li> <li>\u7269\u4ef6\u53c3\u8003\u5230\u7684\u7269\u4ef6\uff0c\u4f7f\u7528 <code>equals</code> \u4f86\u6bd4\u8f03\u3002</li> <li>array \u4f7f\u7528 <code>Arrays.equals</code> \u4f86\u6bd4\u8f03\u3002</li> <li>\u70ba\u907f\u514d <code>NullPointerException</code> \u4f7f\u7528 <code>Objects.equals</code> \u4f86\u6bd4\u8f03\u3002</li> <li>\u70ba\u4e86\u9054\u5230\u6bd4\u8f03\u597d\u7684\u6548\u7387\uff0c\u7a0b\u5f0f\u61c9\u7576\u5148\u6bd4\u8f03\u6700\u6709\u53ef\u80fd\u4e0d\u76f8\u7b49\u7684\u6b04\u4f4d\u3001\u6bd4\u8f03\u6210\u672c\u8f03\u4f4e\u7684\u6b04\u4f4d\u3002</li> <li>\u4e0d\u61c9\u7576\u6bd4\u8f03\u4e0d\u5c6c\u65bc\u7a0b\u5f0f\u908f\u8f2f\u7684\u72c0\u614b\uff0c\u4f8b\u5982\u7528\u4f86\u8655\u7406\u540c\u6b65\u554f\u984c\u7684 lock \u6b04\u4f4d\u5c31\u4e0d\u61c9\u7576\u62ff\u4f86\u6bd4\u8f03\u3002</li> <li>\u7a0b\u5f0f\u53ef\u4ee5\u4e0d\u7528\u6bd4\u8f03\u53ef\u4ee5\u7531\u5176\u4ed6\u6b04\u4f4d\u63a8\u5c0e\u51fa\u4f86\u7684\u6b04\u4f4d(derived fields)<ul> <li>\u4f46\u662f\uff0c\u5728\u4e0d\u76f8\u7b49\u7684\u60c5\u6cc1\uff0c\u9032\u884c\u63a8\u5c0e\u51fa\u4f86\u7684\u6b04\u4f4d\u6bd4\u8f03\uff0c\u6709\u6a5f\u6703\u6e1b\u5c11\u6bd4\u8f03\u7684\u6642\u9593</li> </ul> </li> </ul> </li> <li> <p>\u5728\u5be6\u4f5c <code>equals</code> \u6642\uff0c\u61c9\u6aa2\u8996\u662f\u5426 symmetric, transitive, consistent</p> </li> <li>override <code>equals</code> \u6642\uff0c\u4e5f\u8981 override <code>hashCode</code><ul> <li>\u8f14\u52a9\u5de5\u5177: Immutables, AutoValue framework, Lombok</li> </ul> </li> <li>\u5225\u592a\u81ea\u4f5c\u8070\u660e<ul> <li>\u7c21\u55ae\u7684\u6b04\u4f4d\u6bd4\u8f03\uff0c\u5bb9\u6613\u8b93\u7a0b\u5f0f\u7dad\u8b77\u8005\u4e86\u89e3\u7a0b\u5f0f\u7684\u884c\u70ba\u3002</li> </ul> </li> <li>\u4e0d\u8981\u628a <code>equals</code> \u7684\u53c3\u6578\u578b\u614b\u6539\u6210\u975e <code>Object</code><ul> <li>\u9019\u6a23\u5beb\u4e26\u6c92\u6709 override <code>Object.equals</code> \u7684\u6548\u679c</li> </ul> </li> </ol>"},{"location":"java/effective-java/011.html","title":"Item 11: Always override hashCode when you override equals","text":"<p>\u898f\u7bc4: Override <code>equals</code> \u5c31\u5fc5\u9808 override <code>hashCode</code>\u3002</p> <p>\u9055\u53cd: <code>Collection</code> \u50cf\u662f <code>HashMap</code>, <code>HashSet</code>\uff0c\u5c31\u7121\u6cd5\u6b63\u78ba\u904b\u4f5c\u3002</p> <p><code>hashCode</code> \u9700\u8981\u5be6\u4f5c\u7684\u898f\u7bc4:</p> <ul> <li>\u5728 <code>equals</code> \u4e2d\u4f7f\u7528\u5230\u7684\u8cc7\u8a0a\u6c92\u6709\u4fee\u6539\u7684\u60c5\u6cc1\u4e0b\uff0c<code>hashCode</code> \u91cd\u8907\u7684\u547c\u53eb\u5fc5\u9808\u56de\u50b3\u76f8\u540c\u7684\u503c\u3002</li> <li>\u4e0d\u540c\u6b21\u7684\u61c9\u7528\u7a0b\u5f0f\u57f7\u884c\u8a08\u7b97\u7684 <code>hashCode</code> \u53ef\u4ee5\u4e0d\u5fc5\u76f8\u540c\u3002</li> <li>\u5982\u679c <code>equals</code> \u6bd4\u8f03\u5169\u500b\u7269\u4ef6\u76f8\u7b49\uff0c\u90a3\u9ebc\u5169\u500b\u7269\u4ef6\u7684 <code>hashCode</code> \u5fc5\u9808\u76f8\u540c\u3002</li> <li><code>equals</code> \u6bd4\u8f03\u4e0d\u76f8\u7b49\u7684\u5169\u500b\u7269\u4ef6\uff0c\u4ed6\u5011\u7684 <code>hashCode</code> \u4e0d\u5fc5\u4e0d\u76f8\u540c\u3002\u4f46\u662f\uff0c\u7522\u751f\u4e0d\u540c\u7684 <code>hashCode</code> \u53ef\u80fd\u6709\u52a9\u65bc\u52a0\u5feb\u7a0b\u5f0f\u7684\u57f7\u884c\u901f\u5ea6\u3002</li> </ul>"},{"location":"java/effective-java/011.html#hashcode-hashmap","title":"\u672a\u6b63\u78ba\u5be6\u4f5c <code>hashCode</code> \u6703\u5c0e\u81f4 <code>HashMap</code> \u7121\u6cd5\u6b63\u78ba\u904b\u4f5c","text":"<pre><code>public class Main {\n    static class PhoneNumber {\n        private final int areaCode, prefix, lineNum;\n\n        public PhoneNumber(int areaCode, int prefix, int lineNum) {\n            this.areaCode = areaCode;\n            this.prefix = prefix;\n            this.lineNum = lineNum;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (!(obj instanceof PhoneNumber pn)) {return false;}\n            return pn.lineNum == lineNum &amp;&amp; pn.prefix == prefix &amp;&amp; pn.areaCode == areaCode;\n        }\n    }\n\n    public static void main(String[] args) {\n        Map&lt;PhoneNumber, String&gt; m = new HashMap&lt;&gt;();\n        m.put(new PhoneNumber(707, 867, 5309), \"Jenny\");\n        System.out.println(m.get(new PhoneNumber(707, 867, 5309)));\n    }\n}\n</code></pre> <p>\u57f7\u884c\u7d50\u679c:</p> <pre><code>null &lt;!-- (1)! --&gt;\n</code></pre> <ol> <li>\u671f\u671b\u7d50\u679c\u61c9\u70ba \"Jenny\"</li> </ol> <p>\u56e0\u70ba <code>PhoneNumber</code> \u6c92\u6709\u6b63\u78ba\u5be6\u4f5c <code>hashCode</code> \u4f7f\u5f97\u5169\u500b <code>PhoneNumber</code> \u7269\u4ef6\u7684 <code>hashCode</code> \u4e0d\u540c\uff0c\u5c0e\u81f4 <code>HashMap</code> \u5c07\u5169\u500b\u7269\u4ef6\u8996\u70ba\u4e0d\u540c\u7684\u7269\u4ef6\u3002</p> <p>\u6700\u7c21\u55ae\uff0c\u4e5f\u662f\u6700\u4e0d\u597d\u7684\u505a\u6cd5\u5c31\u662f\u8b93 <code>hashCode</code> \u56de\u50b3\u56fa\u5b9a\u7684\u503c\u3002</p> <pre><code>public class Main {\n    static class PhoneNumber {\n        private final int areaCode, prefix, lineNum;\n\n        public PhoneNumber(int areaCode, int prefix, int lineNum) {\n            this.areaCode = areaCode;\n            this.prefix = prefix;\n            this.lineNum = lineNum;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (!(obj instanceof PhoneNumber pn)) {return false;}\n            return pn.lineNum == lineNum &amp;&amp; pn.prefix == prefix &amp;&amp; pn.areaCode == areaCode;\n        }\n\n        @Override\n        public int hashCode() {\n            return 42;\n        }\n    }\n\n    public static void main(String[] args) {\n        Map&lt;PhoneNumber, String&gt; m = new HashMap&lt;&gt;();\n        m.put(new PhoneNumber(707, 867, 5309), \"Jenny\");\n        System.out.println(m.get(new PhoneNumber(707, 867, 5309)));\n    }\n}\n</code></pre> <p>\u57f7\u884c\u7d50\u679c:</p> <pre><code>Jenny\n</code></pre> <p>\u6bd4\u8f03\u597d\u7684\u5be6\u4f5c\u65b9\u6cd5:</p> <pre><code>@Override\npublic int hashCode() {\n    int result = Integer.hashCode(areaCode);\n    result = 31 * result + Integer.hashCode(prefix);\n    result = 31 * result + Integer.hashCode(lineNum);\n    return result;\n}\n</code></pre> <p>\u6216\u8005</p> <pre><code>@Override\npublic int hashCode() {\n    return Objects.hash(areaCode, prefix, lineNum);\n}\n</code></pre> <p>\u5c0d\u65bc immutable \u7269\u4ef6\uff0c\u8003\u91cf\u57f7\u884c\u6642\u9593\uff0c\u53ef\u4ee5\u4f7f\u7528 cache\u3002</p>"},{"location":"java/effective-java/011.html#_1","title":"\u5176\u4ed6\u91cd\u9ede","text":"<ul> <li>\u4e0d\u8981\u70ba\u4e86\u6e1b\u5c11 <code>hashCode</code> \u7684\u57f7\u884c\u6642\u9593\uff0c\u800c\u5c07\u91cd\u8981\u6b04\u4f4d\u6392\u9664\u5728 hash \u7684\u8a08\u7b97\u3002\u9019\u6703\u8b93\u96dc\u6e4a\u7684\u6a5f\u5236\u5d29\u58de\u3002<ul> <li>\u88dc\u5145: \u96dc\u6e4a\u51fd\u6578\u8a2d\u8a08\u4e0d\u826f\u5c0e\u81f4 \\(O(n^2)\\) \u6642\u9593\u8907\u96dc\u5ea6</li> </ul> </li> <li>\u4e0d\u8981\u898f\u7bc4 <code>hashCode</code> \u8a72\u5982\u4f55\u8a08\u7b97\uff0c\u9019\u6709\u52a9\u65bc\u906d\u9047 hash \u904b\u7b97\u6709\u7f3a\u9677\u6642\uff0c\u6709\u66ff\u63db\u6f14\u7b97\u6cd5\u7684\u5f48\u6027\u3002</li> </ul>"},{"location":"java/effective-java/012.html","title":"Item 12: Always override <code>toString</code>","text":"<p>Programmer \u6642\u5e38\u6703\u5c07\u7269\u4ef6\u7684\u8a0a\u606f\u5370\u51fa\u4f86\uff0c\u4ee5\u5e6b\u52a9\u8a3a\u65b7\u7a0b\u5f0f\u7684\u884c\u70ba\u3002\u5be6\u4f5c\u8f38\u51fa\u6709\u610f\u7fa9\u6709\u52a9\u65bc Programmer \u95b1\u8b80\u7684\u8a0a\u606f\u6709\u52a9\u65bc\u8a3a\u65b7\u554f\u984c\u3002</p> <p>\u5728\u81ea\u52d5\u5316\u6e2c\u8a66\uff0c\u932f\u8aa4\u8a0a\u606f\u50cf</p> <pre><code>Assertion failure: expected {abc, 123}, but was {abc, 123}.\n</code></pre> <p>\u5c0d\u9664\u932f\u7684\u5e6b\u52a9\u6709\u9650\u3002</p>"},{"location":"java/effective-java/012.html#_1","title":"\u5176\u4ed6\u88dc\u5145","text":"<ul> <li>\u8f38\u51fa\u7269\u4ef6\u7684\u6240\u6709\u91cd\u8981\u8cc7\u8a0a</li> <li>\u8a0a\u606f\u91cf\u592a\u591a\u7684 field\uff0c\u63d0\u4f9b summary \u5373\u53ef</li> </ul>"},{"location":"java/effective-java/013.html","title":"Item 13: Override <code>clone</code> judiciously (\u660e\u667a\u5730)","text":""},{"location":"java/effective-java/013.html#cloneable-clone","title":"\u4f7f\u7528 <code>Cloneable</code> \u5be6\u4f5c <code>clone</code> \u65b9\u6cd5\u7684\u7bc4\u4f8b","text":"<p>\u4ee5\u4e0b\u662f\u4f7f\u7528 <code>Cloneable</code> \u671f\u671b\u6703\u5be6\u4f5c\u51fa\u4f86\u7684\u7a0b\u5f0f\u78bc\u6a23\u8c8c:</p> <pre><code>public class Main {\n    public static class Person implements Cloneable { // (1)!\n        private final String name;\n\n        public Person(String name) {\n            this.name = name;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if(obj instanceof Person p)\n                return name.equals(p.name);\n            return super.equals(obj);\n        }\n\n        @Override\n        public Person clone() { // (2)!\n            try {\n                return (Person) super.clone();\n            } catch (CloneNotSupportedException e) {\n                throw new AssertionError();\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        Person original = new Person(\"Teddy\");\n        Person clone = original.clone();\n        System.out.println(original == clone); // false\n        System.out.println(original.getClass() == clone.getClass()); // true\n        System.out.println(original.equals(clone)); // true\n\n    }\n}\n</code></pre> <ol> <li>\u5be6\u4f5c <code>Cloneable</code> \u4ecb\u9762\uff0c\u4e26\u4e14\u8986\u5beb <code>clone</code> \u65b9\u6cd5\u3002</li> <li>covariant return types: Java \u5141\u8a31 override \u65b9\u6cd5\u7684 return type \u662f\u539f\u65b9\u6cd5\u7684\u5b50\u985e\u5225\u3002<code>Object.clone</code> \u7684 return type \u662f <code>Object</code>\uff0c\u800c <code>Person.clone</code> \u7684 return type \u662f <code>Person</code>\u3002</li> </ol> <p>\u5148\u8aaa\u7d50\u8ad6\uff0c\u61c9\u907f\u514d\u4f7f\u7528 <code>Cloneable</code> \u5be6\u4f5c <code>clone</code>\u3002\u4ee5\u4e0b\u8aaa\u660e\u539f\u56e0\u3002</p>"},{"location":"java/effective-java/013.html#cloneable","title":"<code>Cloneable</code> \u7684\u554f\u984c","text":""},{"location":"java/effective-java/013.html#cloneable-clone-cloneableclone","title":"<code>Cloneable</code> \u6c92\u6709\u5ba3\u544a <code>clone</code> \u65b9\u6cd5\uff0c\u7121\u6cd5\u76f4\u63a5\u547c\u53eb <code>Cloneable.clone</code>","text":"<p>\u9019\u662f <code>Cloneable</code> \u8a2d\u8a08\u4e0a\u6700\u5927\u7684\u7f3a\u9677\uff0c\u56e0\u70ba\u4ed6\u6c92\u6709\u5ba3\u544a <code>clone</code> method\uff0c\u800c <code>Object.clone</code> \u88ab\u5ba3\u544a\u6210 <code>protected</code>\u3002\u4e5f\u5c31\u662f\u8aaa\uff0c\u547c\u53eb\u7aef\u7121\u6cd5\u56e0\u70ba\u7269\u4ef6\u662f <code>Cloneable</code> \u5c31\u76f4\u63a5\u547c\u53eb <code>clone</code> \u65b9\u6cd5\u3002</p> <pre><code>Cloneable person = new Person(\"Teddy\");\nPerson clone = person.clone(); // \u274c \u8a9e\u6cd5\u932f\u8aa4\uff0c\u56e0\u70ba Cloneable \u6c92\u6709\u5ba3\u544a clone \u65b9\u6cd5\n</code></pre> <p>\u4e5f\u8a31\u6709\u4eba\u53ef\u4ee5\u53cd\u99c1\u8aaa\uff0c\u6211\u5011\u53ef\u4ee5\u900f\u904e reflection \u4f86\u547c\u53eb <code>clone</code> \u65b9\u6cd5:</p> <pre><code>public class Main {\n    public static class Person implements Cloneable {\n        private final String name;\n\n        public Person(String name) {\n            this.name = name;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if(obj instanceof Person p)\n                return name.equals(p.name);\n            return super.equals(obj);\n        }\n\n        @Override\n        public Person clone() {\n            try {\n                return (Person) super.clone();\n            } catch (CloneNotSupportedException e) {\n                throw new AssertionError();\n            }\n        }\n    }\n\n    public static void main(String[] args)\n            throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n        Cloneable original = new Person(\"Teddy\");  // (1)!\n        Person clone = (Person) original.getClass().getMethod(\"clone\").invoke(original);  // (2)!\n\n        System.out.println(original == clone); // false\n        System.out.println(original.getClass() == clone.getClass()); // true\n        System.out.println(original.equals(clone)); // true\n    }\n}\n</code></pre> <ol> <li>\u6211\u5011\u53ea\u95dc\u6ce8\u5728\u7269\u4ef6\u7684 clone \u529f\u80fd\uff0c\u9019\u88e1\u5c07 <code>Person</code> \u5ba3\u544a\u6210 <code>Cloneable</code>\u3002</li> <li>\u4f7f\u7528 reflection \u7684\u65b9\u5f0f\u547c\u53eb <code>clone</code> \u65b9\u6cd5\uff0c\u4f46\u4e0d\u662f\u63a8\u85a6\u7684\u505a\u6cd5\u3002</li> </ol> <p>\u4e0d\u904e <code>Cloneable</code> \u6c92\u6709\u5f37\u8feb\u5be6\u4f5c\u4ecb\u9762\u7684\u985e\u5225\u5fc5\u9808\u5be6\u4f5c <code>clone</code>\u3002\u7576\u6211\u5011\u628a <code>clone</code> (lines 16-23) \u5be6\u4f5c\u522a\u9664\uff0c\u5728\u8dd1\u4e00\u6b21\u7a0b\u5f0f\uff0c\u5c07\u5728\u7b2c 29 \u884c\u7684\u5730\u65b9\uff0c\u56e0\u70ba\u627e\u4e0d\u5230 <code>clone</code> \u65b9\u6cd5\u800c\u62cb\u51fa\u4f8b\u5916 <code>java.lang.NoSuchMethodException</code>\u3002</p> <p><code>Cloneable</code> \u6c92\u6709\u5ba3\u544a\u4efb\u4f55 method\uff0c\u90a3\u4ed6\u5230\u5e95\u505a\u4e86\u4ec0\u9ebc?</p> <p><code>Cloneable</code> \u5f71\u97ff <code>Object.clone</code> \u7684\u884c\u70ba\u3002\u7576\u4e00\u500b\u7269\u4ef6\u5be6\u4f5c <code>Cloneable</code> \u4ecb\u9762\uff0c\u9f4a\u5176 <code>Object.clone</code> \u6703\u5c07\u56de\u50b3\u6b04\u4f4d\u9010\u4e00\u8907\u88fd\u7684\u7269\u4ef6\u526f\u672c\u3002\u5982\u679c\u7269\u4ef6\u6c92\u6709\u5be6\u4f5c <code>Cloneable</code> \u4ecb\u9762\u5c31\u547c\u53eb <code>Object.clone</code> \u5c31\u6703\u62cb\u51fa <code>CloneNotSupportedException</code>\u3002</p> <p>\u9019\u7a2e\u8a2d\u8a08\u4e0d\u662f\u5178\u578b\u7684 interface \u505a\u6cd5\uff0c\u800c\u4e14\u4e0d\u61c9\u6a21\u4eff\u3002</p>"},{"location":"java/effective-java/013.html#cloneableclone-superclone-clone","title":"<code>Cloneable.clone</code> \u6c92\u6709\u547c\u53eb <code>super.clone</code> \u5be6\u4f5c\uff0c\u5c07\u6703\u9020\u6210\u5b50\u985e\u5225 <code>clone</code> \u02cb\u8f49\u578b\u7684\u554f\u984b","text":"<pre><code>public static class Animal implements Cloneable {\n    @Override\n    public Animal clone() {\n        return new Animal(); // (1)!\n    }\n}\n\npublic static class Person extends Animal {\n    @Override\n    public Person clone() {\n        return (Person) super.clone(); // (2)!\n    }\n}\n</code></pre> <ol> <li><code>Animal</code> \u7684 <code>clone</code> \u65b9\u6cd5\u6c92\u6709\u547c\u53eb <code>super.clone</code>\uff0c\u800c\u662f\u900f\u904e\u547c\u53eb constructor \u5efa\u7acb <code>Animal</code> \u7269\u4ef6\u3002\u56e0\u70ba <code>Cloneable.clone</code> \u4e26\u6c92\u6709\u898f\u7bc4\uff0c\u9019\u88e1\u7684\u5be6\u4f5c\u65b9\u6cd5\u6c92\u6709\u4efb\u4f55\u7de8\u8b6f\u7684\u932f\u8aa4\u3002</li> <li>\u56e0\u70ba <code>Animal</code> \u7684 <code>clone</code> \u65b9\u6cd5\u6c92\u6709\u547c\u53eb <code>super.clone</code> \u800c\u662f\u900f\u904e constructor \u5efa\u7acb\u7269\u4ef6\uff0c\u56de\u50b3\u7684\u7269\u4ef6\u578b\u614b\u70ba <code>Animal</code>\uff0c\u5c0e\u81f4\u9019\u88e1\u547c\u53eb <code>super.clone</code> \u6703\u7121\u6cd5\u5c07 <code>Animal</code> \u8f49\u578b\u6210 <code>Person</code> \u7269\u4ef6\uff0c\u800c\u62cb\u51fa <code>java.lang.ClassCastException</code> \u4f8b\u5916\u3002</li> </ol>"},{"location":"java/effective-java/013.html#objectclone-shallow-copy-mutable-field-final","title":"\u9810\u8a2d <code>Object.clone</code> \u7684\u5be6\u4f5c\u662f shallow copy\uff0c\u7576 mutable field \u88ab\u5ba3\u544a\u6210 <code>final</code> \u5c31\u7834\u529f\u4e86","text":"<pre><code>public class Main {\n    public static class Stack implements Cloneable {\n        private Object[] elements;\n        private int size = 0;\n        private static final int DEFAULT_INITIAL_CAPACITY = 16;\n\n        public Stack() {\n            this.elements = new Object[DEFAULT_INITIAL_CAPACITY];\n        }\n\n        public void push(Object e) {\n            ensureCapacity();\n            elements[size++] = e;\n        }\n\n        public Object pop() {\n            if (size == 0)\n                throw new EmptyStackException();\n            Object result = elements[--size];\n            elements[size] = null; // Eliminate obsolete reference\n            return result;\n        }\n\n        // Ensure space for at least one more element.\n        private void ensureCapacity() {\n            if (elements.length == size)\n                elements = Arrays.copyOf(elements, 2 * size + 1);\n        }\n\n        @Override\n        public Stack clone() {\n            try {\n                return (Stack) super.clone();\n            } catch (CloneNotSupportedException e) {\n                throw new AssertionError();\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        Stack stack = new Stack();\n        stack.push(\"a\");\n        stack.push(\"b\");\n        stack.push(\"c\");\n\n        Stack cloned = stack.clone();\n\n        System.out.println(\"stack pop: \" + stack.pop());\n        System.out.println(\"cloned pop: \" + cloned.pop());\n    }\n}\n</code></pre> <p>\u8f38\u51fa\u7d50\u679c:</p> <pre><code>stack pop: c\ncloned pop: null &lt;!-- (1)! --&gt;\n</code></pre> <ol> <li>\u671f\u671b\u7d50\u679c\u662f c\uff0c\u4f46\u5be6\u969b\u662f <code>null</code></li> </ol> <p><code>stack.clone</code> \u5f8c\u7684\u8a18\u61b6\u793a\u610f:</p> <p></p> <p>\u9019\u662f shallow copy \u7684\u7d50\u679c\uff0c<code>cloned</code> \u7269\u4ef6\u7684 <code>elements</code> \u6307\u5411\u7684\u662f <code>stack</code> \u7269\u4ef6\u7684 <code>elements</code>\u3002 \u7576 <code>stack</code> \u7269\u4ef6\u7684 <code>elements</code> \u88ab\u4fee\u6539\u6642\uff0c<code>cloned</code> \u7269\u4ef6\u7684 <code>elements</code> \u4e5f\u6703\u88ab\u4fee\u6539\u3002\u6240\u4ee5 <code>stack.pop</code> \u5f8c\uff0c<code>elements</code> \u4e2d\u7684\u5143\u7d20\u88ab\u8a2d\u5b9a\u6210 <code>null</code> \u5c0e\u81f4\u4e4b\u5f8c <code>cloned.pop</code> \u51fa\u7684\u5167\u5bb9\u5c31\u4e0d\u6703\u662f\u6b63\u78ba\u7684\u3002</p> <p></p> <p>\u7576 client \u7aef\u9032\u4e00\u6b65\u64cd\u4f5c <code>clone.pop</code> \u7684\u7269\u4ef6\u6642\uff0c\u56e0\u70ba <code>null</code> \u5c31\u6703\u5f15\u8d77 <code>NullPointerException</code>\u3002</p> <p>\u6211\u5011\u9700\u8981 <code>clone</code> \u65b9\u6cd5\u5be6\u4f5c deep copy\uff0c\u9019\u6a23\u624d\u80fd\u907f\u514d\u9019\u500b\u554f\u984c\u3002</p> <pre><code>@Override\npublic Stack clone() {\n    try {\n        Stack clone = (Stack) super.clone();\n        clone.elements = clone.elements.clone();\n        return clone;\n    } catch (CloneNotSupportedException e) {\n        throw new AssertionError();\n    }\n}\n</code></pre> <p>\u6ce8\u610f\u5230\uff0c\u5982\u679c <code>elements</code> \u88ab\u5ba3\u544a\u6210 <code>final</code> \u5c31\u7834\u529f\u4e86\uff0c\u56e0\u70ba\u7121\u6cd5\u91cd\u65b0\u88ab assign value\u3002</p>"},{"location":"java/effective-java/013.html#clone","title":"\u6709\u4e9b\u72c0\u6cc1\u9700\u8981\u905e\u8ff4\u7684 clone","text":"<p>\u50c5\u50c5 deep clone \u5230 <code>buckets</code> \u9084\u4e0d\u5920\u3002</p> <p></p> <p><code>buckets</code> \u4e2d\u7684 <code>Entry</code> \u7269\u4ef6\u4e5f\u9700\u8981 deep clone\u3002</p> <p></p> <p>\u76f4\u5230\u6bcf\u4e00\u500b <code>Entry</code> \u7269\u4ef6\u90fd\u88ab clone\u3002</p> <p>\u5be6\u4f5c\u7684\u90e8\u5206\u5c31\u4e0d\u5728\u9019\u88e1\u7ad9\u7bc7\u5e45\u4e86\uff0c\u53ef\u4ee5\u53c3\u8003 <code>Hashtable.Entry</code> \u7684\u7a0b\u5f0f\u78bc\u3002</p>"},{"location":"java/effective-java/013.html#deep-copy-clone","title":"deep copy \u8207 <code>clone</code> \u7684\u8a2d\u8a08\u51fa\u767c\u9ede\u4e0d\u540c","text":"<p>A class implements the <code>Cloneable</code> interface to indicate to the Object. <code>clone()</code> method that it is legal for that method to make a field-for-field copy of instances of that class.</p> <p>field-for-field copy \u6307\u7684\u662f shallow copy\u3002</p> <p>\u5728\u5305\u542b\u6709 mutable field \u7684\u7269\u4ef6\u6642\uff0c\u7a0b\u5f0f\u6703\u9700\u8981</p> <ol> <li>\u547c\u53eb <code>super.clone()</code> \u4f86\u53d6\u5f97 shallow copy</li> <li>\u91cd\u65b0\u521d\u59cb\u5316 mutable field \u6216\u8005 \u4f9d\u7167\u539f\u7269\u4ef6\u7684\u72c0\u614b\u91cd\u65b0\u5efa\u7acb mutable field \u7684\u7269\u4ef6</li> </ol>"},{"location":"java/effective-java/013.html#clone-override","title":"\u7236\u985e\u5225 clone \u65b9\u6cd5\u547c\u53eb\u5b50\u985e\u5225 override \u7684\u65b9\u6cd5\u5c07\u5c0e\u81f4\u72c0\u614b\u4e0d\u4e00\u81f4","text":"<ul> <li> \u66f8\u4e2d\u8aaa\u6703\u6709\u9019\u500b\u554f\u984c\uff0c\u4f46\u662f\u627e\u4e0d\u5230\u5177\u9ad4\u4e26\u5408\u7406\u7684\u7bc4\u4f8b\u5448\u73fe\u771f\u7684\u6703\u6709\u9019\u500b\u554f\u984c\u3002</li> </ul> <p>Quote</p> <p>... If clone invokes a method that is overridden in a subclass, this method will execute before the subclass has had a chance to fix its state in the clone, quite possibly leading to corruption in the clone and the original. ...</p>"},{"location":"java/effective-java/013.html#clone_1","title":"\u4e0d\u4f7f\u7528 <code>clone</code> \u7684\u66ff\u4ee3\u65b9\u6848","text":"<p>\u4f7f\u7528 copy constructor \u6216\u8005 copy factory \u4f86\u53d6\u4ee3 <code>clone</code> \u65b9\u6cd5\u3002</p> Copy ConstructorCopy Factory <pre><code>public Yum(Yum yum) {...}\n</code></pre> <pre><code>public static Yum newInstance(Yum yum) {...}\n</code></pre> <p>\u597d\u8655:</p> <ul> <li>\u5728\u8a9e\u610f\u7684\u5be6\u4f5c\u4e0a\uff0c\u6bd4 clone \u66f4\u6e05\u695a\u3002</li> <li>\u4e0d\u6703\u6709\u9700\u8981\u9075\u5b88\u6587\u4ef6\u4e0a\u7684\u898f\u5b9a\uff0c\u4f46\u9055\u898f\u537b\u4e0d\u6703\u6709\u4efb\u4f55\u8a9e\u6cd5\u932f\u8aa4\u7684\u6a5f\u5236\u3002</li> <li>\u53ef\u4ee5\u907f\u514d <code>clone</code> \u5be6\u4f5c\u5728\u9047\u5230 final \u6b04\u4f4d\u6642\uff0c\u7121\u6cd5\u91cd\u65b0 assign value \u7684\u554f\u984c\u3002</li> <li>\u4e0d\u5fc5\u8655\u7406\u4e0d\u5fc5\u8981\u7684\u4f8b\u5916\uff0c\u50cf\u662f <code>CloneNotSupportedException</code>\u3002</li> <li>\u4e0d\u5fc5\u9032\u884c\u7269\u4ef6\u578b\u614b\u8f49\u578b\uff0c\u53ef\u4ee5\u907f\u514d\u932f\u8aa4\u8f49\u578b\u3002</li> </ul> <p>Method \u63a5\u53d7\u7684\u53c3\u6578\u578b\u5225\u76f8\u4f9d\u65bc\u62bd\u8c61\u985e\u5225\u800c\u975e\u5177\u9ad4\u985e\u5225\u3002\u4f8b\u5982 <code>List</code> \u800c\u975e <code>ArrayList</code>\u3002\u9019\u7a2e\u505a\u6cd5\u7a31\u4f5c conversion constructors \u6216 conversion factories\u3002</p>"},{"location":"java/effective-java/014.html","title":"Item 14: Consider implementing Comparable","text":"<p>\u5be6\u4f5c <code>Comparable</code> \u4ecb\u9762\u4f86\u8868\u9054\u7269\u4ef6\u7684 natural ordering\uff0c\u7528\u4f86\u5728\u6392\u5e8f\u6642\u6bd4\u8f03\u7269\u4ef6\u7684\u5927\u5c0f\u3002</p> <pre><code>public interface Comparable&lt;T&gt; {\n    int compareTo(T t);\n}\n</code></pre>"},{"location":"java/effective-java/014.html#_1","title":"\u5be6\u4f5c\u898f\u683c","text":"<ul> <li><code>x.compareTo(y)</code> \u56de\u50b3\u8ca0\u6578\uff0c\u8868\u793a <code>x &lt; y</code></li> <li><code>x.compareTo(y)</code> \u56de\u50b3\u96f6\uff0c\u8868\u793a <code>x = y</code></li> <li><code>x.compareTo(y)</code> \u56de\u50b3\u6b63\u6578\uff0c\u8868\u793a <code>x &gt; y</code></li> <li>\u62cb\u51fa\u4f8b\u5916 <code>ClassCastException</code> \u8868\u793a\u7121\u6cd5\u8207\u8a72\u7269\u4ef6\u6bd4\u8f03\u3002</li> </ul>"},{"location":"java/effective-java/014.html#compareto","title":"<code>compareTo</code> \u9700\u8981\u6eff\u8db3\u7684\u7279\u6027","text":"<ul> <li><code>x.compareTo(y) == -y.compareTo(x)</code></li> <li>Transitive: \u82e5 <code>x.compartTo(y) &gt; 0 &amp;&amp; y.compareTo(z) &gt; 0</code> \u5247 <code>x.compareTo(z) &gt; 0</code></li> <li>\u82e5 <code>x.compareTo(y) == 0</code> \u5247 <code>x.compareTo(z) == y.compareTo(z)</code></li> <li>\u5efa\u8b70\u4f46\u975e\u5fc5\u8981: <code>x.compareTo(y) == 0</code> \u6642\uff0c<code>x.equals(y) == true</code></li> </ul>"},{"location":"java/effective-java/014.html#_2","title":"\u7bc4\u4f8b: \u6309\u5b78\u751f\u6210\u7e3e\u6392\u5e8f","text":"<p>\u6392\u5e8f\u898f\u5247:</p> <ul> <li>\u6309\u5b78\u751f\u6210\u7e3e\u7531\u4f4e\u81f3\u9ad8\u6392\u5e8f</li> <li>\u6210\u7e3e\u76f8\u540c\u6642\uff0c\u6309\u7167\u59d3\u540d\u5b57\u6bcd\u9806\u5e8f\u6392\u5e8f</li> </ul> <pre><code>class Main {\n\n    public static class Student implements Comparable&lt;Student&gt; {\n        private String name;\n\n        private int grade;\n\n        public Student(String name, int grade) {\n            this.name = name;\n            this.grade = grade;\n        }\n\n        @Override\n        public int compareTo(Student o) {\n            int result = Integer.compare(grade, o.grade);\n            if (result == 0) {\n                result = name.compareTo(o.name);\n            }\n            return result;\n        }\n\n        @Override\n        public String toString() {\n            return String.format(\"Student{name='%s', grade=%d}\", name, grade);\n        }\n    }\n\n    public static void main(String[] args) {\n        List&lt;Student&gt; students = new ArrayList&lt;&gt;();\n        students.add(new Student(\"Charlie\", 85));\n        students.add(new Student(\"Bob\", 95));\n        students.add(new Student(\"Alice\", 85));\n        students.add(new Student(\"David\", 90));\n\n        Collections.sort(students);\n\n        System.out.println(students);\n    }\n}\n</code></pre> <p>\u8f38\u51fa\u7d50\u679c:</p> <pre><code>[Student{name='Alice', grade=85},\n Student{name='Charlie', grade=85},\n Student{name='David', grade=90},\n Student{name='Bob', grade=95}]\n</code></pre>"},{"location":"java/effective-java/014.html#comparator-compareto","title":"\u4f7f\u7528 <code>Comparator</code> \u5be6\u4f5c <code>compareTo</code>","text":"<p>\u9019\u7a2e\u505a\u6cd5\u53ef\u4ee5\u8b93 <code>compareTo</code> \u5be6\u4f5c\u66f4\u70ba\u7c21\u6f54\u6613\u8b80\uff0c\u4f46\u7a0d\u5fae\u72a7\u7272\u4e00\u9ede\u6548\u7387\u3002</p> <pre><code>import static java.util.Comparator.comparingInt;\n\npublic static class Student implements Comparable&lt;Student&gt; {\n        private final Comparator&lt;Student&gt; COMPARATOR = \n                comparingInt((Student s) -&gt; s.grade)\n                        .thenComparing(s -&gt; s.name);\n\n        private String name;\n\n        private int grade;\n\n        public Student(String name, int grade) {\n            this.name = name;\n            this.grade = grade;\n        }\n\n        @Override\n        public int compareTo(Student o) {\n            return COMPARATOR.compare(this, o);\n        }\n\n        @Override\n        public String toString() {\n            return String.format(\"Student{name='%s', grade=%d}\", name, grade);\n        }\n    }\n</code></pre>"},{"location":"java/effective-java/015.html","title":"Item 15: Minimize the accessibility of classes and members","text":"<p>\ud83d\udc4d make each class or member as inaccessible as possible.</p>"},{"location":"java/effective-java/015.html#top-level-non-nested-classes-and-interfaces","title":"Top-level (non-nested) classes and interfaces","text":"<p>\u4f7f\u7528\u5169\u500b\u5b58\u53d6\u4fee\u98fe\u8a5e: <code>public</code> \u548c package-private\u3002</p> <p>package-private \u662f\u6c92\u6709\u4efb\u4f55\u5b58\u53d6\u4fee\u98fe\u8a5e\uff0c\u5c31\u662f\u9019\u500b\u5b58\u53d6\u6b0a\u9650\u3002</p> <p>public class \u662f package API \u7684\u4e00\u90e8\u5206\uff0cpackage-private class \u662f package implementation \u7684\u4e00\u90e8\u5206\u3002</p>"},{"location":"java/effective-java/015.html#private-nested-classinterface","title":"\u91cd\u69cb\u6210 private \u7684 nested class/interface","text":"<p>\u7576 package-private class/interface \u50c5\u88ab\u552f\u4e00\u4f7f\u7528\uff0c\u8003\u616e\u5c07\u5b83\u8b8a\u6210 private \u7684 nested class/interface</p> \u91cd\u69cb\u524d\u91cd\u69cb\u5f8c <pre><code>class Processor { // package-private class\n    public void process() {\n        // do something\n    }\n}\n\npublic class DataHandler {\n    private Processor processor;\n\n    public DataHandler() {\n        this.processor = new Processor();\n    }\n\n    public void handleData() {\n        processor.process();\n    }\n}\n</code></pre> <pre><code>public class DataHandler {\n    private static class Processor { // private nested class\n        public void process() {\n            // do something\n        }\n    }\n\n    private Processor processor;\n\n    public DataHandler() {\n        this.processor = new Processor();\n    }\n\n    public void handleData() {\n        processor.process();\n    }\n}\n</code></pre> <p>\u4ec0\u9ebc\u60c5\u5883\u6703\u9700\u8981\u5c07 package-private interface \u8b8a\u6210 private nested interface?</p>"},{"location":"java/effective-java/015.html#members","title":"Members","text":"<p>members: fields, methods, nested classes, and nested interfaces</p> <ul> <li><code>private</code> member: \u53ea\u6709\u5ba3\u544a\u6b64 member \u7684 top-level class \u53ef\u4ee5\u5b58\u53d6</li> <li>package-private member: \u53ea\u6709\u5ba3\u544a\u6b64 member \u7684\u540c\u4e00\u500b package \u5e95\u4e0b\u7684 class \u53ef\u4ee5\u5b58\u53d6</li> <li><code>protected</code> member: \u53ea\u6709\u5ba3\u544a\u6b64 member \u7684 class \u53ca\u5176\u5b50\u985e\u5225\u53ef\u4ee5\u5b58\u53d6</li> <li><code>public</code> member: \u6240\u6709 member \u90fd\u53ef\u4ee5\u5b58\u53d6</li> </ul>"},{"location":"java/effective-java/015.html#instance-fields","title":"Instance fields","text":"<p>\u975e final \u6216\u53c3\u8003\u5230 mutable object \u7684 field \u4e0d\u61c9\u8a72\u662f <code>public</code>\u3002\u5373\u4f7f final \u6216 immutable object\uff0c\u4e0d\u4f7f\u7528 <code>public</code> \u4e5f\u6709\u52a9\u65bc\u5207\u5272\u5916\u90e8\u8207\u5167\u90e8\u8cc7\u6599\u7d50\u69cb\u7684\u76f8\u4f9d\u6027\u3002</p> <p>Classes with public mutable fields are not generally thread-safe</p> <p>static field \u901a\u5e38\u61c9\u8a72\u662f <code>private</code>\uff0c\u6216\u662f <code>publlic static final</code> \u66b4\u9732 constant value\u3002<code>public static final</code> field \u7684\u540d\u7a31\u5168\u5927\u5beb\uff0c\u4e26\u7528\u5e95\u7dda\u4f5c\u70ba\u6587\u5b57\u9593\u7684\u5340\u9694\u3002\u9700\u8981\u6ce8\u610f\uff0c<code>public static final</code> field \u5fc5\u9808\u8981\u53c3\u8003\u5230 primitive type \u6216 immutable object\u3002</p> <p>Nonzero-length array is always mutable</p> <pre><code>private record Thing(int value) {\n}\n\npublic static final Thing[] THINGS = { new Thing(1), new Thing(2), new Thing(3)};\npublic static void main(String[] args) {\n        System.out.println(Arrays.stream(THINGS).map(Object::toString).collect(Collectors.joining(\", \")));\n        THINGS[0] = new Thing(4); // (1)!\n        System.out.println(Arrays.stream(THINGS).map(Object::toString).collect(Collectors.joining(\", \")));\n}\n</code></pre> <ol> <li>\u5c07\u7b2c\u4e00\u500b\u5143\u7d20\u6539\u6210\u5176\u4ed6 instance</li> </ol> <p>\u8f38\u51fa</p> <pre><code>Thing[value=1], Thing[value=2], Thing[value=3]\nThing[value=4], Thing[value=2], Thing[value=3]\n</code></pre> <p>\u5efa\u8b70\u4fee\u6539</p> \u4f7f\u7528 unmodifiableList\u4f7f\u7528 clone <pre><code>private static final Thing[] THINGS = { ... }; // (1)!\npublic static final List&lt;Thing&gt; VALUES =\n    Collections.unmodifiableList(Arrays.asList(THINGS)); // (2)!\n</code></pre> <ol> <li>\u5ba3\u544a\u6210 <code>private</code></li> <li>\u4f7f\u7528 <code>Collections.unmodifiableList</code> \u4f86\u4fdd\u8b77 array</li> </ol> <pre><code>private static final Thing[] THINGS = { ... }; // (1)!\npublic static final Thing[] values() {\n    return THINGS.clone(); // (2)!\n}\n</code></pre> <ol> <li>\u5ba3\u544a\u6210 <code>private</code></li> <li>\u4f7f\u7528 <code>clone</code> \u4f86\u4fdd\u8b77 array</li> </ol>"},{"location":"java/effective-java/016.html","title":"Item 16: In public classes, use accessor methods, not public fields","text":"\u2715 Degenerate class \u2713 Encapsulation: accessor methods (getters) &amp; mutators (setters) <pre><code>class Point {\n    public double x;\n    public double y;\n}\n</code></pre> <p>\u526f\u4f5c\u7528:</p> <ul> <li>\u6539\u8b8a\u5167\u90e8\u8cc7\u6599\u5b58\u7d50\u69cb\uff0c\u5f71\u97ff\u66b4\u9732\u7d66\u5916\u90e8\u7684\u4ecb\u9762</li> <li>\u7121\u6cd5\u5728\u5b58\u53d6 field \u6642\u9032\u884c\u984d\u5916\u7684\u52d5\u4f5c\u3002\u4f8b\u5982\u8cc7\u6599\u9a57\u8b49\u3002</li> </ul> <pre><code>class Point {\n    private double x;\n    private double y;\n\n    public Point(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    public double getX() {\n        return x;\n    }\n\n    public double getY() {\n        return y;\n    }\n\n    public void setX(double x) {\n        this.x = x;\n    }\n\n    public void setY(double y) {\n        this.y = y;\n    }\n}\n</code></pre> <p>if a class is package-private or is a private nested class, there is nothing inherently wrong with exposing its data fields</p>"},{"location":"java/effective-java/055.html","title":"Item 55: Return optionals judiciously","text":"<p>Java 8 \u4ee5\u524d\uff0c\u7576 method \u7121\u6cd5\u53d6\u5f97\u7d50\u679c\uff0c\u6709\u5169\u7a2e\u505a\u6cd5:</p> <ol> <li>\u4e1f\u4f8b\u5916</li> <li>\u56de\u50b3 <code>null</code></li> </ol> <p>\u4e1f\u4f8b\u5916\u4e0d\u597d\uff0c\u56e0\u70ba (1) \u8981\u628a\u4f8b\u5916\u7559\u7d66\u4f8b\u5916\u72c0\u6cc1 (2) \u4f8b\u5916\u6210\u672c\u9ad8\u3002 \u56de\u50b3 <code>null</code> \u4e5f\u4e0d\u597d\uff0c\u547c\u53eb\u7aef\u9700\u8981\u6aa2\u67e5 <code>null</code> \u4ee5\u514d <code>NullPointerException</code>\uff0c\u4f46\u5c0d\u65bc\u547c\u53eb\u7aef\u662f\u5426\u6aa2\u67e5 <code>null</code> \u4e26\u7121\u5f37\u5236\uff0c\u7a0b\u5f0f\u4f9d\u7136\u53ef\u4ee5\u7de8\u8b6f\u901a\u904e\u3002</p> <p>Java 8 \u65b0\u589e <code>Optional&lt;T&gt;</code> \u6539\u5584\u6b64\u554f\u984c\u3002\u6c92\u6709\u7d50\u679c\uff0c\u7a31\u4f5c empty\u3002\u6709\u7d50\u679c\uff0c\u7a31\u4f5c present\u3002</p>"},{"location":"java/effective-java/055.html#collection","title":"\u7bc4\u4f8b: \u53d6\u5f97 Collection \u4e2d\u6700\u5927\u503c","text":"\u7121 Optional\u4f7f\u7528 Optional\u4f7f\u7528 <code>stream</code> \u6539\u5beb <pre><code>public static &lt;E extends Comparable&lt;E&gt;&gt; E max(Collection&lt;E&gt; collection) {\n    if (collection.isEmpty()) {\n        throw new IllegalArgumentException(\"Empty collection\");\n    }\n\n    E result = null;\n    for (E e : collection) {\n        if (result == null || e.compareTo(result) &gt; 0) {\n            result = Objects.requireNonNull(e);\n        }\n    }\n\n    return result;\n}\n</code></pre> <pre><code>public static &lt;E extends Comparable&lt;E&gt;&gt; Optional&lt;E&gt; max(Collection&lt;E&gt; collection) { // (1)!\n    if (collection.isEmpty()) {\n        return Optional.empty(); // (2)!\n    }\n\n    E result = null;\n    for (E e : collection) {\n        if (result == null || e.compareTo(result) &gt; 0) {\n            result = Objects.requireNonNull(e);\n        }\n    }\n\n    return Optional.of(result); // (3)!\n}\n</code></pre> <ol> <li>\u56de\u50b3 <code>Optional&lt;E&gt;</code> \u4ee5\u8868\u793a\u53ef\u80fd\u6c92\u6709\u7d50\u679c</li> <li>\u56de\u50b3 <code>Optional.empty()</code> \u4ee5\u8868\u793a\u6c92\u6709\u7d50\u679c</li> <li>\u56de\u50b3 <code>Optional.of(result)</code> \u4ee5\u8868\u793a\u6709\u7d50\u679c</li> </ol> <p><code>stream</code> \u7684\u8a2d\u8a08\u57fa\u672c\u4e0a\u8003\u616e <code>Optional</code> \u7684\u60c5\u6cc1\uff0c\u53ef\u4ee5\u6539\u5beb\u6210:</p> <pre><code>public static &lt;E extends Comparable&lt;E&gt;&gt; Optional&lt;E&gt; max(Collection&lt;E&gt; collection) {\n    return collection.stream().max(Comparator.naturalOrder());\n}\n</code></pre> <p>Never return a null value from an Optional-returning method</p>"},{"location":"java/effective-java/055.html#_1","title":"\u64cd\u4f5c\u56de\u50b3\u503c","text":"\u6aa2\u67e5\u662f\u5426\u6709\u7d50\u679c\u9810\u8a2d\u503c\u5674\u4f8b\u5916and more <pre><code>Optional&lt;String&gt; maxOpt = max(..);\nif (maxOpt.isPresent()) {\n    String max = maxOpt.get();\n    // do something\n}\n</code></pre> <pre><code>String maxValue = max(..)\n    .orElse(\"No value present\");\n</code></pre> <pre><code>String maxValue = max(..)\n    .orElseThrow(() -&gt; new NoSuchElementException(\"No value present\"));\n</code></pre> <p><code>orElseGet</code>, <code>orElseCompute</code>, <code>compute</code>, <code>filter</code>, <code>map</code>, <code>flatMap</code>, <code>or</code>, <code>ifPresentOrElse</code>, ...</p>"},{"location":"java/effective-java/055.html#map-orelse-ifpresent-get-else","title":"\u7bc4\u4f8b: \u4f7f\u7528 <code>map</code> + <code>orElse</code> \u53d6\u4ee3 <code>ifPresent</code> + <code>get</code> + <code>else</code>","text":"\u4f7f\u7528 <code>ifPresent</code> + <code>get</code> + <code>else</code>\u4f7f\u7528 <code>map</code> + <code>orElse</code> <pre><code>Optional&lt;User&gt; user = ...\nString name = user.isPresent() ? user.get().name() : \"Unknown\";\n</code></pre> <pre><code>Optional&lt;User&gt; user = ...\nString name = user.map(u -&gt; u.name()).orElse(\"Unknown\");\n</code></pre>"},{"location":"java/effective-java/055.html#stream-present","title":"\u7bc4\u4f8b: <code>stream</code> \u904e\u6ffe present \u7684\u503c","text":"\u4f7f\u7528 <code>filter</code> + <code>map</code>\u4f7f\u7528 `flatMap`` <pre><code>streamOfOptionals\n    .filter(Optional::isPresent)\n    .map(Optional::get)\n</code></pre> <pre><code>streamOfOptionals\n    .flatMap(Optional::stream)\n</code></pre>"},{"location":"java/effective-java/055.html#_2","title":"\u6700\u5f8c","text":"<ul> <li>\u5ba3\u544a\u56de\u50b3 <code>Optional&lt;T&gt;</code> \u8b93\u547c\u53eb\u7aef\u77e5\u9053\u53ef\u80fd\u6c92\u6709\u7d50\u679c</li> <li>\u4f7f\u7528 <code>OptionalInt</code>, <code>OptionalLong</code>, <code>OptionalDouble</code> \u4ee3\u66ff <code>Optional&lt;Integer&gt;</code>, <code>Optional&lt;Long&gt;</code>, <code>Optional&lt;Double&gt;</code></li> <li> <p><code>Optional</code> \u6703\u6709\u6548\u80fd\u7684\u8b70\u984c\uff0c\u5982\u679c\u5728\u6548\u80fd\u8981\u6c42\u8f03\u9ad8\u7684\u529f\u80fd\u906d\u9047\u6548\u80fd\u554f\u984c\uff0c\u9700\u8981\u8003\u616e\u4f7f\u7528\u56de\u50b3 <code>null</code> \u6216\u62cb\u4f8b\u5916\u3002\u4ee5\u4e0b\u7c21\u55ae\u6548\u80fd\u8a55\u4f30\u7d50\u679c:</p> \u672a\u4f7f\u7528 optional\u4f7f\u7528 <code>Optional</code> + <code>isPresent</code>\u4f7f\u7528 <code>Optional</code> + <code>ifPresent</code> <pre><code>private static final Random random = new Random();\n\npublic static String getRandomValue() {\n    if (random.nextBoolean()) {\n        return String.valueOf(random.nextInt());\n    } else {\n        return null;\n    }\n}\n\npublic static void main(String[] args) {\n    long start = System.currentTimeMillis();\n\n    int times = 1000000;\n    List&lt;String&gt; collections = new ArrayList&lt;&gt;(times);\n\n    IntStream.range(0, times).forEach(v -&gt; {\n        String val = getRandomValue();\n        if (val != null)\n            collections.add(val);\n    });\n\n    System.out.println(System.currentTimeMillis() - start + \" millis\");\n}\n</code></pre> <p>\u5e73\u5747\u843d\u5728\u5927\u7d04 42 millis</p> <pre><code>private static final Random random = new Random();\n\npublic static Optional&lt;String&gt; getRandomValue() {\n    if (random.nextBoolean()) {\n        return Optional.of(String.valueOf(random.nextInt()));\n    } else {\n        return Optional.empty();\n    }\n}\n\npublic static void main(String[] args) {\n    long start = System.currentTimeMillis();\n\n    int times = 1000000;\n    List&lt;String&gt; collections = new ArrayList&lt;&gt;(times);\n\n    IntStream.range(0, times).forEach(v -&gt; {\n        Optional&lt;String&gt; val = getRandomValue();\n        if (val.isPresent()) {\n            collections.add(val.get());\n        }\n    });\n\n    System.out.println(System.currentTimeMillis() - start + \" millis\");\n}\n</code></pre> <p>\u5e73\u5747\u843d\u5728\u5927\u7d04 50 millis</p> <pre><code>private static final Random random = new Random();\n\npublic static Optional&lt;String&gt; getRandomValue() {\n    if (random.nextBoolean()) {\n        return Optional.of(String.valueOf(random.nextInt()));\n    } else {\n        return Optional.empty();\n    }\n}\n\npublic static void main(String[] args) {\n    long start = System.currentTimeMillis();\n\n    int times = 1000000;\n    List&lt;String&gt; collections = new ArrayList&lt;&gt;(times);\n\n    IntStream.range(0, times).forEach(v -&gt; {\n        String val = getRandomValue();\n        val.ifPresent(collections::add);\n    });\n\n    System.out.println(System.currentTimeMillis() - start + \" millis\");\n}\n</code></pre> <p>\u5e73\u5747\u843d\u5728\u5927\u7d04 70~80 millis</p> </li> </ul>"},{"location":"kubernetes/apply.html","title":"Apply","text":""},{"location":"kubernetes/apply.html#kustomize","title":"kustomize","text":"<pre><code>$ kustomize build . | kubectl apply --dry-run=server -f -\n</code></pre>"},{"location":"kubernetes/pod-topology-spread-constraints.html","title":"Pod Topology Spread Constraints","text":""},{"location":"kubernetes/pod-topology-spread-constraints.html#skew","title":"Skew \u7684\u8a08\u7b97","text":"<p>skew = \u76ee\u524d topology \u4e2d\u7684 Pods \u6578\u91cf - topology \u4e2d\u6700\u5c11 Pods \u6578\u91cf</p> <p>\u53c3\u8003: Introducing PodTopologySpread</p>"},{"location":"kubernetes/pod-topology-spread-constraints.html#1-topology-key-zone","title":"\u7bc4\u4f8b 1: topology key: zone","text":"<p> skew = 3 - 0 = 3</p> <p> skew = 1 - 1 = 0</p> <p> skew = 4 - 2 = 2</p> <p> skew = 4 - 2 = 2</p> <p> skew = 3 - 3 = 0</p> <p> skew = 3 - 3 = 0</p>"},{"location":"kubernetes/pod-topology-spread-constraints.html#2-topology-key-node","title":"\u7bc4\u4f8b 2: topology key: node","text":"<p> skew = 1 - 0 = 1</p> <p> skew = 4 - 0 = 4</p> <p> skew = 3 - 0 = 3</p> <p> skew = 1 - 0 = 1</p>"},{"location":"kubernetes/pod-topology-spread-constraints.html#1-one-topology-spread-constraint","title":"\u7bc4\u4f8b 1: one topology spread constraint","text":"<p>Cluster \u6709 4 \u500b Node\uff0c3 \u500b Pod (label: <code>foo:bar</code>)\uff0c\u5206\u5225\u88ab\u90e8\u7f72\u5230 Node 1, Node 2, Node 3\u3002</p> <p></p> <p>\u65b0\u9032\u4f86\u7684 Pod \u76ee\u6a19\u8981\u5c31\u76ee\u524d\u7684\u72c0\u614b\uff0c\u5e73\u5747\u5206\u6563\u5728\u500b Zone\u3002\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u914d\u7f6e\u3002</p> <pre><code>kind: Pod\napiVersion: v1\nmetadata:\n  name: mypod\n  labels:\n    foo: bar\nspec:\n  topologySpreadConstraints:\n  - maxSkew: 1 # (1)!\n    topologyKey: zone # (2)!\n    whenUnsatisfiable: DoNotSchedule # (3)!\n    labelSelector:\n      matchLabels:\n        foo: bar # (4)!\n  containers:\n  - name: pause\n    image: registry.k8s.io/pause:3.1\n</code></pre> <ol> <li>Pod \u5206\u914d\u7684\u6578\u91cf\u8207\u6700\u5c11\u6578\u91cf\uff0c\u6700\u591a\u76f8\u5dee 1</li> <li>Node \u4ee5 <code>zone</code> \u5206\u7fa4\uff0cPod \u61c9\u5e73\u5747\u5206\u914d\u81f3\u5404\u7fa4\u3002</li> <li>\u7576\u65b0\u9032\u7684 Pod \u7121\u6cd5\u6eff\u8db3\u689d\u4ef6\u6642\uff0c\u4fdd\u6301 pending \u4e0d\u8981\u5206\u914d Node\u3002</li> <li>\u9650\u5236\u689d\u4ef6\u5957\u7528\u5728 label <code>foo: bar</code> \u7684 Pod \u4e0a\u3002</li> </ol>"},{"location":"kubernetes/pod-topology-spread-constraints.html#pod-zone-a","title":"\u2715 \u65b0\u9032\u4f86\u7684 Pod \u88ab\u5206\u914d\u81f3 Zone A","text":"<p>  skew = 3 - 1 = 2\uff0c\u8d85\u904e <code>maxSkew: 1</code> (line 9-10) \u7684\u9650\u5236\u3002</p>"},{"location":"kubernetes/pod-topology-spread-constraints.html#pod-zone-b","title":"\u2713 \u65b0\u9032\u4f86\u7684 Pod \u88ab\u5206\u914d\u81f3 Zone B","text":"<p>  skew = 2 - 2 = 0\uff0c\u7b26\u5408 <code>maxSkew: 1</code> (line 9-10) \u7684\u9650\u5236\u3002</p>"},{"location":"kubernetes/pod-topology-spread-constraints.html#2-multiple-topology-spread-constraints","title":"\u7bc4\u4f8b 2: multiple topology spread constraints","text":"<p>Cluster \u6709 4 \u500b Node\uff0c3 \u500b Pod (label: <code>foo:bar</code>)\uff0c\u5206\u5225\u88ab\u90e8\u7f72\u5230 Node 1, Node 2, Node 3\u3002</p> <p></p> <p>\u65b0\u9032\u4f86\u7684 Pod \u76ee\u6a19\u8981\u5c31\u76ee\u524d\u7684\u72c0\u614b\uff0c\u5e73\u5747\u5206\u6563\u5728\u500b Zone \u8207 Node\u3002\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u914d\u7f6e\u3002</p> <pre><code>kind: Pod\napiVersion: v1\nmetadata:\n  name: mypod\n  labels:\n    foo: bar\nspec:\n  topologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone \n    whenUnsatisfiable: DoNotSchedule\n    labelSelector:\n      matchLabels:\n        foo: bar\n  - maxSkew: 1 # (1)!\n    topologyKey: node # (2)!\n    whenUnsatisfiable: DoNotSchedule # (3)!\n    labelSelector:\n      matchLabels:\n        foo: bar # (4)!\n  containers:\n  - name: pause\n    image: registry.k8s.io/pause:3.1\n</code></pre> <ol> <li>Pod \u5206\u914d\u7684\u6700\u5927\u6578\u91cf\u8207\u6700\u5c11\u6578\u91cf\uff0c\u6700\u591a\u76f8\u5dee 1</li> <li>Node \u4ee5 <code>node</code> \u5206\u7fa4\uff0cPod \u61c9\u5e73\u5747\u5206\u914d\u81f3\u5404\u7fa4\u3002</li> <li>\u7576\u65b0\u9032\u7684 Pod \u7121\u6cd5\u6eff\u8db3\u689d\u4ef6\u6642\uff0c\u4fdd\u6301 pending \u4e0d\u8981\u5206\u914d Node\u3002</li> <li>\u9650\u5236\u689d\u4ef6\u5957\u7528\u5728 label <code>foo: bar</code> \u7684 Pod \u4e0a\u3002</li> </ol>"},{"location":"kubernetes/pod-topology-spread-constraints.html#pod-zone-a_1","title":"\u2715 \u65b0\u9032\u4f86\u7684 Pod \u88ab\u5206\u914d\u81f3 Zone A","text":"<p>  Zone: skew = 3 - 1 = 2\uff0c\u8d85\u904e <code>maxSkew: 1</code> (line 9-10) \u7684\u9650\u5236\u3002</p>"},{"location":"kubernetes/pod-topology-spread-constraints.html#pod-zone-b-node-3","title":"\u2715 \u65b0\u9032\u4f86\u7684 Pod \u88ab\u5206\u914d\u81f3 Zone B \u7684 Node 3","text":"<p> Zone: skew = 2 - 2 = 0\uff0c\u7b26\u5408 <code>maxSkew: 1</code> (line 9-10) \u7684\u9650\u5236\u3002 Node: skew = 2 - 0 = 2\uff0c\u8d85\u904e <code>maxSkew: 1</code> (line 15-16) \u7684\u9650\u5236\u3002</p>"},{"location":"kubernetes/pod-topology-spread-constraints.html#pod-zone-b-node-4","title":"\u2713 \u65b0\u9032\u4f86\u7684 Pod \u88ab\u5206\u914d\u81f3 Zone B \u7684 Node 4","text":"<p> Zone: 2 - 2 = 0\uff0c\u7b26\u5408 <code>maxSkew: 1</code> (line 9-10) \u7684\u9650\u5236\u3002 Node: 1 - 1 = 0\uff0c\u7b26\u5408 <code>maxSkew: 1</code> (line 15-16) \u7684\u9650\u5236\u3002</p>"},{"location":"kubernetes/pod-topology-spread-constraints.html#3-conflicting-topology-spread-constraints","title":"\u7bc4\u4f8b 3: conflicting topology spread constraints","text":"<p>\u8003\u616e\u7bc4\u4f8b 2 \u7684\u8a2d\u5b9a\u906d\u9047\u885d\u7a81\u7684\u72c0\u6cc1</p> <p></p> <p>\u96d6\u7136\u76ee\u524d\u7684\u72c0\u614b\u7b26\u5408\u8a2d\u5b9a\u7684\u9650\u5236\uff0c\u4e0d\u904e\u65b0\u9032\u7684 Pod \u6c92\u6709\u53ef\u80fd\u6709\u6392\u6210\u53ef\u4ee5\u6eff\u8db3\u9650\u5236\uff0c\u6545\u6703\u8655\u65bc Pending \u72c0\u614b\u3002</p>"},{"location":"kubernetes/pod-topology-spread-constraints.html#pod-zone-a_2","title":"\u2715 \u65b0\u9032\u4f86\u7684 Pod \u88ab\u5206\u914d\u81f3 Zone A","text":"<p>  Zone: skew = 4 - 2 = 2\uff0c\u8d85\u904e <code>maxSkew: 1</code> (line 9-10) \u7684\u9650\u5236\u3002</p>"},{"location":"kubernetes/pod-topology-spread-constraints.html#pod-zone-b_1","title":"\u2715 \u65b0\u9032\u4f86\u7684 Pod \u88ab\u5206\u914d\u81f3 Zone B","text":"<p>Zone: skew = 3 - 3 = 0\uff0c\u7b26\u5408 <code>maxSkew: 1</code> (line 9-10) \u7684\u9650\u5236\u3002 Node: skew = 3 - 1 = 2\uff0c\u8d85\u904e <code>maxSkew: 1</code> (line 15-16) \u7684\u9650\u5236\u3002</p>"},{"location":"kubernetes/pod-topology-spread-constraints.html#_1","title":"\u89e3\u6c7a\u65b9\u6cd5","text":"<ul> <li>\u8abf\u6574 <code>maxSkew: 2</code> (line 15)</li> <li>\u8abf\u6574 <code>whenUnsatisfiable: ScheduleAnyway</code> (line 17)</li> </ul>"},{"location":"kubernetes/pod-topology-spread-constraints.html#4-topology-spread-constraints-with-node-affinity","title":"\u7bc4\u4f8b 4: topology spread constraints with node affinity","text":"<p>Cluster \u6709 5 \u500b Node\uff0c\u88ab\u90e8\u7f72\u5230 Zone A, Zone B, Zone C\u3002</p> <p></p> <p>\u6211\u5011\u8981\u6392\u9664 Zone C \u4e0d\u8981\u88ab\u5206\u914d Pod\u3002\u4e5f\u5c31\u662f\u8aaa\uff0cPod \u53ea\u6703\u88ab\u5b89\u6392\u5230 Zone A, Zone B \u7684 Node \u4e0a\u57f7\u884c\u3002\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u914d\u7f6e\u3002</p> <pre><code>kind: Pod\napiVersion: v1\nmetadata:\n  name: mypod\n  labels:\n    foo: bar\nspec:\n  topologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    labelSelector:\n      matchLabels:\n        foo: bar\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n        - matchExpressions:\n          - key: zone\n            operator: NotIn\n            values:\n            - zoneC\n  containers:\n  - name: pause\n    image: registry.k8s.io/pause:3.1\n</code></pre>"},{"location":"kubernetes/pod-topology-spread-constraints.html#_2","title":"\u53c3\u8003","text":"<ul> <li>Pod Topology Spread Constraints</li> </ul>"},{"location":"spring-boot/set-up-microservices-project.html","title":"\u65b0\u589e Spring Boot microservices \u5c08\u6848","text":"<p>\u5b89\u88dd spring boot \u7684\u6307\u4ee4: (\u53c3\u8003)</p> <pre><code>$ brew tap spring-io/tap\n$ brew install spring-boot\n</code></pre>"},{"location":"spring-boot/spring-boot-basic.html","title":"Spring Boot Basic","text":"<pre><code>@SpringBootApplication\npublic class MyApplication {\n  public static void main(String[] args) {\n    SpringApplication.run(MyApplication.class, args);\n  }\n}\n</code></pre> <p><code>@SpringBootApplication</code> \u7684\u529f\u80fd\uff1a</p> <ol> <li>Component Scanning    \u81ea\u52d5\u6383\u63cf\u6a19\u8a3b\u985e\u5225\u6240\u5728\u5957\u4ef6\u53ca\u5176\u5b50\u5957\u4ef6\u4e2d\u7684 Spring components\uff08\u4f8b\u5982 <code>@Component</code>, <code>@Service,</code> <code>@Repository</code>, <code>@Controller</code>\uff09\u8207 configuration \u985e\u5225\uff08\u4f8b\u5982 <code>@Configuration</code>\uff09\u3002</li> <li>Configuration Class    \u5c07\u6a19\u8a3b\u7684\u985e\u5225\u672c\u8eab\u8996\u70ba\u4e00\u500b Spring \u7684 configuration \u985e\u5225\uff08\u7b49\u540c\u65bc\u6a19\u8a3b <code>@Configuration</code>\uff09\u3002</li> <li>\u555f\u7528 Auto-configuration    \u555f\u7528 Spring Boot \u7684\u81ea\u52d5\u914d\u7f6e\uff08Auto-Configuration\uff09\uff0c\u81ea\u52d5\u8f09\u5165\u4f9d\u8cf4\u95dc\u806f\u7684\u9810\u8a2d\u914d\u7f6e\uff0c\u7c21\u5316\u624b\u52d5\u8a2d\u5b9a\u3002</li> </ol> <p><code>@SpringBootApplication</code> \u5176\u5be6\u662f <code>@Configuration</code>, <code>@EnableAutoConfiguration</code> \u548c <code>@ComponentScan</code> \u7684\u7d44\u5408\u8a3b\u89e3\uff0c\u65b9\u4fbf\u958b\u767c\u8005\u4e00\u6b21\u6027\u555f\u7528\u76f8\u95dc\u529f\u80fd\u3002</p>"},{"location":"spring-boot/spring-boot-basic.html#component-scanning","title":"Component Scanning","text":"<pre><code>@Component\npublic class MyComponentImpl implements MyComponent {\n  // ...\n}\n</code></pre> <ul> <li>\u4f7f\u7528 <code>@Component</code> \u6a19\u8a3b\u7684\u985e\u5225\u6703\u88ab Spring \u5bb9\u5668\u7ba1\u7406\uff0c\u6210\u70ba\u4e00\u500b Spring Component\u3002</li> <li>\u8a72\u985e\u5225\u53ef\u4ee5\u900f\u904e\u81ea\u52d5\u6ce8\u5165\uff08automatically injected\uff0c\u6216\u7a31 auto-wired)\uff0c\u4f9b\u5176\u4ed6\u9700\u8981\u7684\u985e\u5225\u4f7f\u7528\u3002</li> </ul> <pre><code>public class AnotherComponent {\n  private final MyComponent myComponent;\n\n  public AnotherComponent(MyComponent myComponent) {\n    this.myComponent = myComponent;\n  }\n\n  // ...\n}\n</code></pre> <p>\u512a\u5148\u8003\u616e constructor injection \u6bd4\u8d77 field \u6216 setter injection \u53ef\u4ee5\u78ba\u4fdd component \u7684 immutable\u3002</p> <p>\u53ef\u4ee5\u4f7f\u7528 <code>@ComponentScan</code> \u6307\u5b9a\u984d\u5916\u8981\u984d\u5916\u6383\u7784\u7684\u5957\u4ef6:</p> <pre><code>package se.magnus.myapp;\n\n@SpringBootApplication\n@ComponentScan({\"se.magnus.myapp\", \"se.magnus.util\" })\npublic class MyApplication {\n  // ..\n}\n</code></pre> <ul> <li>\u5982\u6b64\u8a2d\u5b9a\u5f8c\uff0cSpring \u5bb9\u5668\u6703\u81ea\u52d5\u6383\u63cf\u4e26\u7ba1\u7406 <code>se.magnus.myapp</code> \u8207 <code>se.magnus.util</code> \u5957\u4ef6\u4e0b\u7684\u6240\u6709 Spring Components\uff08\u5982 <code>@Component</code>, <code>@Service</code>, <code>@Repository</code> \u7b49\uff09\u3002</li> <li>\u9019\u4e9b\u88ab\u6383\u63cf\u5230\u7684 components \u5c31\u53ef\u4ee5\u900f\u904e <code>@Autowired</code> \u81ea\u52d5\u6ce8\u5165\u5230\u5176\u4ed6\u985e\u5225\u4e2d\u4f7f\u7528\u3002</li> </ul>"},{"location":"spring-boot/spring-boot-basic.html#configuration","title":"Configuration","text":"<p>\u53ef\u4ee5\u5728\u985e\u5225\u4e0a\u4f7f\u7528 <code>@Configuration</code> \u8a3b\u89e3\uff0c\u4ee5\u5b9a\u7fa9\u6216\u8986\u5beb Spring Boot \u7684\u9810\u8a2d\u8a2d\u5b9a\u3002</p> <pre><code>@Configuration\npublic class MyCustomConfig {\n\n  @Bean\n  public MyService myService() {\n    // \u81ea\u8a02\u4e00\u500b MyService Bean\uff0c\u8986\u5beb\u9810\u8a2d\u8a2d\u5b9a\n    return new MyCustomServiceImpl();\n  }\n}\n</code></pre> <ul> <li><code>@Configuration</code> \u6a19\u8a3b\u7684\u985e\u5225\u8868\u793a\u9019\u662f\u4e00\u500b Spring \u7684\u8a2d\u5b9a\u985e\u5225\u3002</li> <li>Bean \u65b9\u6cd5\u6703\u5b9a\u7fa9\u4e26\u8a3b\u518a\u4e00\u500b Bean\uff08\u4f8b\u5982 <code>MyService</code>\uff09\u5230 Spring \u5bb9\u5668\u4e2d\u3002</li> <li>\u5982\u679c\u6709\u540c\u540d\u7684 Bean \u5df2\u5b58\u5728\uff08\u4f8b\u5982\u7531 Auto-Configuration \u63d0\u4f9b\u7684\uff09\uff0c\u9019\u500b\u81ea\u8a02\u7684\u8a2d\u5b9a\u5c07\u6703\u8986\u5beb\u9810\u8a2d\u7684\u5b9a\u7fa9\u3002</li> </ul>"},{"location":"spring-boot/spring-webflux.html","title":"Spring Webflux","text":"<p>gradle dependency</p> <pre><code>implementation('org.springframework.boot:spring-boot-starter-webflux')\n</code></pre> <ul> <li>Spring WebFlux \u9810\u8a2d\u4f7f\u7528 Netty \u4f5c\u70ba Web \u4f3a\u670d\u5668</li> </ul> \u4f7f\u7528 tomcat \u4f5c\u70ba\u9810\u8a2d Web \u4f3a\u670d\u5668 <pre><code>implementation('org.springframework.boot:spring-boot-starter-webflux')\n{\n    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-reactor-netty'\n}\nimplementation('org.springframework.boot:spring-boot-starter-tomcat')\n</code></pre> <p>\u555f\u52d5 Server \u61c9\u6703\u770b\u5230 log</p> <pre><code>2023-03-09 18:23:44.182 INFO 17648 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http)\n</code></pre> <p>\u9810\u8a2d\u7684 port \u70ba 8080\uff0c\u4ee5\u4e0b\u7bc4\u4f8b\u66f4\u6539 port \u70ba 7001:</p> application.yaml<pre><code>server.port: 7001\n</code></pre>"},{"location":"spring-boot/spring-webflux.html#rest-controller","title":"Rest Controller","text":"<pre><code>@RestController\npublic class MyRestService {\n\n  @GetMapping(value = \"/my-resource\", produces = \"application/json\")\n  List&lt;Resource&gt; listResources() {\n    // ...\n  }\n\n  // ...\n }\n</code></pre> <ul> <li><code>@RestController</code><ul> <li>\u6a19\u8a3b\u985e\u5225\u70ba\u4e00\u500b RESTful Web Service \u7684 Controller\uff0c\u8ca0\u8cac\u8655\u7406 HTTP \u8acb\u6c42\u4e26\u8fd4\u56de\u8cc7\u6599\uff08\u901a\u5e38\u70ba JSON \u6216 XML\uff09\u3002</li> <li>\u7b49\u540c\u65bc\u540c\u6642\u4f7f\u7528 <code>@Controller</code> \u548c <code>@ResponseBody</code>\u3002</li> </ul> </li> <li><code>@GetMapping</code><ul> <li>\u5b9a\u7fa9\u4e00\u500b GET \u65b9\u6cd5\u5c0d\u61c9\u5230 /my-resource \u7684\u8def\u5f91\u3002</li> <li><code>produces = \"application/json\"</code> \u6307\u5b9a\u56de\u50b3\u5167\u5bb9\u985e\u578b\u70ba JSON\u3002</li> </ul> </li> </ul> <p>\u5728 Server \u555f\u52d5\u5f8c\uff0c\u9023\u63a5\u5230\u7db2\u5740\u53ef\u4ee5\u53d6\u5f97 <code>List&lt;Resource&gt;</code> \u7684 JSON \u8cc7\u6599: http://localhost:8080/my-resource</p>"},{"location":"spring-boot/scheduler/hello_world.html","title":"Quartz: Hello World","text":""},{"location":"spring-boot/scheduler/hello_world.html#5-hello-world","title":"\u6bcf 5 \u79d2\u8f38\u51fa \"Hello World!\" \u5230\u756b\u9762\u4e0a","text":"<pre>41df272d11c32d1692051033ef65cee814cb5f8eee4014dbcaeb8cd2a19bd7b30ad2b5f2a790a35bda01cbda8bdae1c4e3e2e513a4ca79540a669e1f94b102d5</pre><pre>c27124dd8a9d9ba4f968985d63f5cea1105807a217f3bbfbb2cd88960bbcaad44e9b7a62b40237d6b6e08e66cd3c33d7227af7d5a739a8b1ac26dae81223c9e9</pre> <p>\u7576\u7a0b\u5f0f\u555f\u52d5\u6642\uff0c Quartz Scheduler \u6703\u5728\u80cc\u666f\u57f7\u884c\uff0c\u4e26\u5728 <code>helloWorldTrigger</code> \u5b9a\u7fa9\u7684\u6bcf 5 \u79d2\u57f7\u884c\u4e00\u6b21 <code>HelloWorldJob</code> \u5be6\u4f5c\u7684 <code>execute</code> \u8f38\u51fa \"Hello World!\" \u5230\u756b\u9762\u4e0a\u3002</p> <p>\u5728 <code>build.gradle.kts</code> \u4e2d\u65b0\u589e <code>spring-boot-starter-quartz</code> \u76f8\u4f9d\u5957\u4ef6\u3002\u5982\u6b64\uff0c\u7a0b\u5f0f\u555f\u52d5\u5f8c\u5c31\u6703\u6709\u4e00\u500b Quartz Scheduler \u5728\u80cc\u666f\u57f7\u884c\u3002</p> build.gradle.kts<pre><code>implementation(\"org.springframework.boot:spring-boot-starter-quartz\")\n</code></pre> <p>\u63a5\u8457\uff0c\u6211\u5011\u9700\u8981\u5b9a\u7fa9 <code>HelloWorldJob</code> \u5be6\u4f5c <code>Job</code> \u4ecb\u9762\uff0c\u5be6\u4f5c\u8f38\u51fa \"Hello World!\" \u7684\u908f\u8f2f\u3002</p> HelloWorldJob.java<pre><code>public class HelloWorldJob implements Job {\n    @Override\n    public void execute(JobExecutionContext jobExecutionContext) {\n        System.out.println(\"Hello World!\");\n    }\n}\n</code></pre> <p>\u7136\u5f8c\uff0c\u6211\u5011\u9700\u8981\u518d\u65b0\u589e\u5169\u500b Bean \u5b9a\u7fa9 <code>JobDetail</code> \u548c <code>Trigger</code>\u3002\u5176\u4e2d\uff0c<code>JobDetail</code> \u5b9a\u7fa9\u4e86 <code>HelloWorldJob</code> \u7684 metadata\uff0c\u800c <code>Trigger</code> \u5b9a\u7fa9\u4e86 <code>JobDetail</code> \u7684\u89f8\u767c\u689d\u4ef6\u3002</p> QuartzConfig.java<pre><code>@Component\npublic class QuartzConfig {\n\n    @Bean\n    public JobDetail helloWorldJobDetail() {\n        return JobBuilder.newJob(HelloWorldJob.class)\n                         .withIdentity(\"helloWorldJob\")\n                         .storeDurably() // (1)\n                         .build();\n    }\n\n    @Bean\n    public Trigger helloWorldTrigger(JobDetail printHelloWorldJobDetail) {\n        SimpleScheduleBuilder scheduleBuilder = SimpleScheduleBuilder\n                .simpleSchedule()\n                .withIntervalInSeconds(5)\n                .repeatForever();\n        return TriggerBuilder.newTrigger()\n                             .forJob(printHelloWorldJobDetail)\n                             .withIdentity(\"helloWorldTrigger\")\n                             .withSchedule(scheduleBuilder)\n                             .build();\n    }\n}\n</code></pre> <ol> <li><code>Trigger</code> \u8981\u57f7\u884c\u7684 <code>JobDetail</code> \u5fc5\u9808\u8981\u5728 <code>JobStore</code> \u4e2d\uff0c\u8a2d\u5b9a <code>storeDurably()</code> \u4f86\u4fdd\u8b49 <code>JobDetail</code> \u5728 <code>JobStore</code> \u4e2d\u3002\u5426\u5247\uff0c<code>JobDetail</code> \u6703\u5728\u6c92\u6709\u8207 <code>Trigger</code> \u95dc\u806f\u7684\u60c5\u6cc1\u4e0b\u88ab\u79fb\u9664\u3002</li> </ol> <p>\u6700\u5f8c\uff0c\u628a\u7a0b\u5f0f\u8dd1\u8d77\u4f86\u5f8c\uff0c\u6bcf 5 \u79d2\u5c31\u6703\u5728\u756b\u9762\u4e0a\u8f38\u51fa \"Hello World!\"\u3002</p>"},{"location":"spring-boot/scheduler/hello_world.html#5-hello-name","title":"\u6bcf 5 \u79d2\u8f38\u51fa \"Hello {name}!\" \u5230\u756b\u9762\u4e0a","text":"<p>\u9019\u88e1\u5c55\u793a <code>Job</code> \u53ef\u4ee5\u5b58\u53d6\u5230 bean \u7684\u65b9\u5f0f\u3002\u70ba\u4e86\u65b9\u4fbf\u5c55\u793a\uff0c\u6211\u5011\u65b0\u589e\u4e00\u500b <code>name</code> bean\uff0c\u4e26\u5728 <code>HelloWorldJob</code> \u4e2d\u53d6\u5f97 <code>name</code> bean \u7684\u503c\u3002</p> HelloWorldJob.java<pre><code>@Bean\npublic String name() {\n    return \"Teddy\";\n}\n</code></pre> <p>\u4fee\u6539 <code>HelloWorldJob</code> \u7684\u5efa\u69cb\u5f0f\u63a5\u6536 <code>name</code> \u5b57\u4e32\uff0c\u9019\u500b\u8b8a\u6578\u7684\u5be6\u9ad4\uff0c\u6703\u900f\u904e DI \u6ce8\u5165\u3002</p> HelloWorldJob.java<pre><code>public class HelloWorldJob implements Job {\n    private final String name;\n\n    public HelloWorldJob(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public void execute(JobExecutionContext jobExecutionContext) {\n        System.out.println(\"Hello \" + name + \"!\");\n    }\n}\n</code></pre> <p>\u6700\u5f8c\uff0c\u628a\u7a0b\u5f0f\u8dd1\u8d77\u4f86\u5f8c\uff0c\u6bcf 5 \u79d2\u5c31\u6703\u5728\u756b\u9762\u4e0a\u8f38\u51fa \"Hello Teddy!\"\u3002</p>"},{"location":"spring-boot/scheduler/hello_world.html#_1","title":"\u81ea\u52d5\u5316\u6e2c\u8a66","text":"<p>\u4f7f\u7528 awaitility \u4f86\u5be6\u4f5c\u9700\u8981\u7b49\u5f85\u6642\u9593\u7684\u6e2c\u8a66\u3002\u9996\u5148\uff0c\u9700\u8981\u589e\u52a0\u76f8\u4f9d\u5957\u4ef6\u3002</p> build.gradle.kts<pre><code>testImplementation(\"org.awaitility:awaitility\")\n</code></pre> <p>awaitility \u5728 Spring Boot 3.2 \u5df2\u53d7\u5230\u76f8\u4f9d\u63a7\u7ba1\uff0c\u6240\u4ee5\u4f7f\u7528 3.2 \u4ee5\u4e0a\u7684\u7248\u672c\u9019\u88e1\u4e0d\u9700\u8981\u52a0\u7248\u672c\u865f\u78bc\u3002</p> <p>\u4f7f\u7528 JUnit 5 \u9032\u884c\u6e2c\u8a66\u3002\u6e2c\u8a66\u9a57\u8b49 15 \u79d2\u5167\uff0c\u5fc5\u9808\u8981\u6709 \"Hello World!\" \u5b57\u4e32\u8f38\u51fa\u5230 standard output \u4e0a\u3002</p> <pre><code>@SpringBootTest\nclass HelloWorldJobTest {\n    private final PrintStream standardOut = System.out; // (1)!\n\n    private final ByteArrayOutputStream outputStreamCaptor = new ByteArrayOutputStream(); // (2)!\n\n    @BeforeEach\n    public void setUp() {\n        System.setOut(new PrintStream(outputStreamCaptor)); // (3)!\n    }\n\n    @AfterEach\n    public void tearDown() {\n        System.setOut(standardOut); // (4)!\n    }\n\n    @Test\n    void helloWorld() {\n    await().atMost(Duration.ofSeconds(15)) // (5)!\n           .untilAsserted(() -&gt; assertThat(outputStreamCaptor.toString()).contains(\"Hello World!\")); // (6)!\n    }\n}\n</code></pre> <ol> <li>\u5148\u8a18\u4e0b\u9810\u8a2d\u7684 <code>System.out</code>\uff0c\u5728\u6e2c\u8a66\u7d50\u675f\u5f8c\u9084\u539f\u4f7f\u7528\u3002</li> <li>\u5efa\u7acb\u4e00\u500b <code>ByteArrayOutputStream</code> \u4f86\u53d6\u4ee3 <code>System.out</code>\uff0c\u9019\u6a23\u53ef\u4ee5\u628a <code>System.out</code> \u7684\u8f38\u51fa\u6355\u6349\u5230 <code>ByteArrayOutputStream</code> \u4e2d\u3002</li> <li>\u5728\u6bcf\u4e00\u500b\u6e2c\u8a66\u958b\u59cb\u524d\uff0c\u628a <code>System.out</code> \u8a2d\u5b9a\u70ba <code>ByteArrayOutputStream</code>\u3002</li> <li>\u5728\u6bcf\u4e00\u500b\u6e2c\u8a66\u7d50\u675f\u5f8c\uff0c\u628a <code>System.out</code> \u9084\u539f\u70ba\u9810\u8a2d\u7684 <code>System.out</code>\u3002</li> <li>\u7b49\u5f85\u6700\u591a 15 \u79d2\u3002</li> <li>\u78ba\u8a8d standard output \u8f38\u51fa\u5fc5\u9808\u5305\u542b \"Hello World!\"\u3002</li> </ol>"},{"location":"spring-boot/scheduler/hello_world.html#_2","title":"\u53c3\u8003","text":"<ul> <li>Scheduling Tasks</li> <li>Unit Testing of <code>System.out.println()</code> with JUnit</li> </ul>"},{"location":"spring-boot/scheduler/jdbc_job_store.html","title":"Quartz: JDBC JobStore","text":""},{"location":"spring-boot/scheduler/jdbc_job_store.html#job","title":"\u7c21\u55ae\u7684 Job \u7bc4\u4f8b","text":"<p>\u4ee5\u4e0b\u7bc4\u4f8b\u5c55\u793a\uff0c\u5728 Spring Boot \u4e2d\u5982\u4f55\u8a2d\u5b9a Quartz \u4f7f\u7528 JDBC JobStore\u3002\u5982\u6b64\u4e00\u4f86\uff0c\u6211\u5011\u628a Job \u653e\u5230 cluster \u4e0a\u57f7\u884c\u3002</p> <p>\u5728 <code>build.gradle.kts</code> \u4e2d\u65b0\u589e <code>spring-boot-starter-quartz</code> \u76f8\u4f9d\u5957\u4ef6\u3002\u5982\u6b64\uff0c\u7a0b\u5f0f\u555f\u52d5\u5f8c\u5c31\u6703\u6709\u4e00\u500b Quartz Scheduler \u5728\u80cc\u666f\u57f7\u884c\u3002</p> build.gradle.kts<pre><code>implementation(\"org.springframework.boot:spring-boot-starter-quartz\")\n</code></pre> <p>\u4f7f\u7528 docker compose \u57f7\u884c mysql\u3002</p> compose.yml<pre><code>version: '3.1'\n\nservices:\n  database:\n    image: mysql:8.4.0\n    ports:\n      - \"3306:3306\"\n    environment:\n      MYSQL_ALLOW_EMPTY_PASSWORD: true\n      MYSQL_DATABASE: quartz\n</code></pre> <p>\u8a2d\u5b9a spring boot \u7684 properties\u3002</p> src/main/resources/application.yml<pre><code>spring:\n  datasource: #(1)!\n    name: datasource\n    url: jdbc:mysql://localhost:3306/quartz\n    username: root\n    password:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n  quartz:\n    job-store-type: jdbc #(2)!\n    jdbc:\n      initialize-schema: always #(3)!\n    overwrite-existing-jobs: true\n    properties:\n      org:\n        quartz:\n          scheduler:\n            instanceName: scheduler\n            instanceId: AUTO #(4)!\n          dataSource:\n            quartzDataSource: #(5)!\n              driver: com.mysql.cj.jdbc.Driver\n              URL: jdbc:mysql://localhost:3306/quartz\n              user: root\n              password:\n              provider: hikaricp\n          jobStore:\n            class: org.quartz.impl.jdbcjobstore.JobStoreTX\n            dataSource: quartzDataSource #(5)!\n            isClustered: true #(6)!\n</code></pre> <ol> <li><code>spring.quartz.jdbc.initialize-schema</code> \u5403\u7684 Data Source \u8a2d\u5b9a\u3002\u5728 <code>spring.quartz.properties.org.quartz.dataSource</code> \u8a2d\u5b9a\u7684 Data Source \u4e0d\u652f\u63f4 initialize schema\u3002</li> <li>\u4f7f\u7528 JDBC JobStore\u3002</li> <li>\u6bcf\u6b21\u555f\u52d5\u90fd\u6703\u521d\u59cb\u5316 schema\u3002\u63db\u53e5\u8a71\u8aaa\uff0c\u6211\u5011\u53ef\u4ee5\u4e0d\u5fc5\u624b\u52d5\u65b0\u589e quartz \u76f8\u95dc\u7684 tables\u3002(SQL \u53c3\u8003)</li> <li>\u5728 cluster \u4e0a\u7684 pod \u9700\u8981\u6709\u552f\u4e00\u7684 instance id\u3002\u9019\u88e1\u8a2d\u5b9a <code>AUTO</code> \u5373\u53ef\u9054\u5230\u9700\u6c42\u3002</li> <li>data source \u7684\u8a2d\u5b9a\u3002\u9019\u88e1\u7684\u540d\u7a31\u6703\u5728\u4e0b\u9762\u8a2d\u5b9a job store \u7684 dataSource \u53c3\u8003\u3002</li> <li>job store \u4f7f\u7528\u7684 dataSource\u3002</li> <li>\u555f\u7528 cluster\u3002</li> </ol> \u4f7f\u7528\u8b8a\u6578\u4f86\u907f\u514d\u91cd\u8907\u8a2d\u5b9a <pre><code>spring:\n  quartz:\n    properties:\n      org:\n        quartz:\n          dataSource:\n            quartzDataSource:\n              driver: ${spring.datasource.driver-class-name}\n              URL: ${spring.datasource.url}\n              user: ${spring.datasource.username}\n              password: ${spring.datasource.password}\n</code></pre> <p>\u65b0\u589e <code>Job</code> \u5be6\u4f5c\uff0c\u7c21\u55ae\u7684\u5728\u756b\u9762\u8f38\u51fa\u73fe\u5728\u7684\u6642\u9593\u4ee5\u53ca \"Hello World!\"\u3002\u5370\u51fa\u6642\u9593\u662f\u70ba\u4e86\u5e6b\u52a9\u6211\u5011\u8b58\u5225\u9019\u662f\u54ea\u500b\u6642\u9593\u9ede\u6240\u89f8\u767c\u7684 Job\u3002</p> HelloWorldJob.java<pre><code>public class HelloWorldJob implements Job {\n    @Override\n    public void execute(JobExecutionContext jobExecutionContext) {\n        String time = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"hh:mm:ss\"));\n        System.out.println(time + \" Hello World!\");\n    }\n}\n</code></pre> <p>\u65b0\u589e <code>JobDetail</code> \u548c <code>Trigger</code> \u7684 Bean \u5b9a\u7fa9\u3002\u9019\u88e1\u8a2d\u5b9a\u6bcf 10 \u79d2\u89f8\u767c\u4e00\u6b21 Job \u5728\u756b\u9762\u4e0a\u8f38\u51fa \"Hello World!\"\u3002</p> <pre><code>@Component\npublic class QuartzConfig {\n\n    @Bean\n    public JobDetail helloWorldJobDetail() {\n        return JobBuilder.newJob(HelloWorldJob.class)\n                         .withIdentity(\"helloWorldJob\")\n                         .storeDurably()\n                         .build();\n    }\n\n    @Bean\n    public Trigger helloWorldTrigger(JobDetail helloWorldJobDetail) {\n        return TriggerBuilder.newTrigger()\n                             .forJob(helloWorldJobDetail)\n                             .withIdentity(\"helloWorldTrigger\")\n                             .withSchedule(CronScheduleBuilder.cronSchedule(\"*/10 * * * * ?\"))\n                             .build();\n    }\n}\n</code></pre> <p>\u70ba\u4e86\u53ef\u4ee5\u540c\u6642\u57f7\u884c\u591a\u500b instance\uff0c\u6211\u5011\u5c07\u7a0b\u5f0f\u6253\u5305\u6210 tar \u6a94\u3002\u5c08\u6848\u7684\u76ee\u9304 /build/libs \u61c9\u8a72\u6703\u7522\u751f xxx.jar \u6a94\u3002</p> <pre><code>./gradlew bootJar\n</code></pre> <p>\u6253\u958b 3 \u500b terminal\uff0c\u5206\u5225\u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4\u57f7\u884c\u7a0b\u5f0f: (xxx \u66ff\u63db\u6210\u5be6\u969b\u6a94\u6848\u540d\u7a31)</p> <pre><code>java -jar build/libs/xxx.jar\n</code></pre> <p>\u89c0\u5bdf\u6bcf 10 \u79d2\u53ea\u6703\u6709\u4e00\u500b terminal \u8f38\u51fa \"Hello World!\"\u3002\u9019\u8868\u793a Job \u662f\u5728 cluster \u4e0a\u57f7\u884c\u7684\u3002\u5c07\u8f38\u51fa\u8a0a\u606f\u7684 terminal \u95dc\u9589\uff0c\u53ef\u4ee5\u89c0\u5bdf\u5230\u5176\u4ed6 terminal \u6703\u63a5\u7e8c\u57f7\u884c\u8f38\u51fa \"Hello World!\" \u7684 Job\u3002</p> <p>\u4e00\u500b trigger \u4e00\u500b job instance \u7684\u8a2d\u5b9a</p> <p><code>org.quartz.scheduler.batchTriggerAcquisitionMaxCount</code> \u9810\u8a2d\u503c\u70ba 1 \u8a2d\u5b9a\u4e86 Trigger \u7684 job \u4e00\u6b21\u57f7\u884c\u4e00\u500b instance\u3002\u53ef\u4ee5\u8a2d\u5b9a\u5176\u4ed6\u6578\u503c\u4f86\u8b93\u540c\u4e00 trigger \u540c\u6642\u57f7\u884c\u591a\u500b job\u3002</p>"},{"location":"spring-boot/scheduler/jdbc_job_store.html#_1","title":"\u63a2\u8a0e: \u57f7\u884c\u6642\u9593\u8d85\u904e\u4e0b\u4e00\u6b21\u6392\u7a0b\u7684\u6642\u9593\u7684\u884c\u70ba","text":"<p>\u5047\u8a2d\u6211\u5011\u8a2d\u5b9a\u6bcf 10 \u79d2\u8dd1\u4e00\u500b job\u3002\u4e26\u4e14\uff0c\u6bcf\u500b job \u57f7\u884c\u6642\u9593\u9700\u8981 15 \u79d2\u3002\u4e5f\u5c31\u662f\u8aaa\uff0cjob \u7684\u57f7\u884c\u6642\u9593\u5fc5\u5b9a\u6703\u8986\u84cb\u5230\u4e0b\u4e00\u6b21\u89f8\u767c\u7684\u6642\u9593\u3002\u5728\u6c92\u6709\u7279\u5225\u8a2d\u5b9a\u7684\u60c5\u6cc1\u4e0b\uff0c\u7d93\u904e 30 \u79d2\u5f8c\uff0c\u5c07\u6703\u6709 3 \u500b job \u88ab\u8dd1\u8d77\u4f86\u3002job \u8207 job \u7684\u6642\u9593\u6642\u9593\u662f\u6703\u91cd\u758a\u7684\u3002</p> <pre>999618efe19ddfac021347f123a13fac6f24902d29be1c450e25cd6f40249ff3b6107d5d3b4a450cde10faa2f73f3abc81d93abbdd36d70119420ac7c9de33bb</pre><pre>92a4c04a90d762fb39488ef55e10949b5625fc3264e65ffa46c32363a66ed66b9ec4433f853f0586f28861ae4848db5615771d37e5925e10d1b9a575730603a3</pre>"},{"location":"spring-boot/scheduler/jdbc_job_store.html#disallowconcurrentexecution","title":"\u4f7f\u7528<code>@DisallowConcurrentExecution</code> \u4f86\u907f\u514d\u91cd\u758a\u57f7\u884c","text":"<p>\u5728 Job \u7684\u5ba3\u544a\u52a0\u4e0a <code>@DisallowConcurrentExecution</code> \u4f86\u907f\u514d Job \u91cd\u758a\u57f7\u884c\u3002</p> HelloWorldJob.java<pre><code>@DisallowConcurrentExecution\npublic class HelloWorldJob implements Job {\n    // ...\n}\n</code></pre> <p>\u5982\u6b64\uff0c\u7576 Job \u9084\u5728\u57f7\u884c\u6642\uff0c\u4e0b\u4e00\u6b21\u7684 Job \u5c07\u6703\u88ab\u5ef6\u9072\u5230\u4e0a\u4e00\u6b21\u7684 Job \u57f7\u884c\u5b8c\u7562\u5f8c\u518d\u57f7\u884c\u3002\u8b8a\u66f4\u5f8c\u7684 3 \u500b Job \u57f7\u884c\u6642\u9593\u8ef8\u53c3\u8003\u4e0b\u5716:</p> <pre>fb5db5dc58f7ae61e83b7b1f862d732c115e5f8d45054f2e8919616c1bdd2c344fabdbc4dcc53480080e9f359716ec5205b2ba670069061eeddcadd989120432</pre><pre>c7263fdc31d35e8a19f67ace4675e7afd0575991beb38cc0fc02111a70fd0c41aacb8b5b69652061ca8ce087a85cd886cbffb675203341aee779df8db1fe1d57</pre>"},{"location":"spring-boot/scheduler/jdbc_job_store.html#trigger","title":"\u8a08\u7b97\u6392\u7a0b\u7684\u6642\u9593\u8207\u89f8\u767c\u7684\u6642\u9593\u5dee\u4f86\u5ffd\u7565\u932f\u904e\u7684 trigger","text":"<p>\u5728 <code>Job.execute</code> \u958b\u59cb\u524d\uff0c\u6aa2\u67e5 job \u89f8\u767c\u7684\u6642\u9593\u8207\u6392\u7a0b\u7684\u6642\u9593\u5dee\uff0c\u5982\u679c\u8d85\u904e\u4e00\u5b9a\u6642\u9593\uff0c\u5247\u5ffd\u7565\u9019\u6b21\u7684 trigger\u3002\u7bc4\u4f8b\u4e2d\u662f\u6642\u9593\u5dee\u8d85\u904e 1000 \u6beb\u79d2 (1 \u79d2) \u5c31\u5ffd\u7565\u9019\u6b21\u7684 trigger\u3002</p> HelloWorldJob.java<pre><code>@DisallowConcurrentExecution\npublic class HelloWorldJob implements Job {\n    @Override\n    public void execute(JobExecutionContext context) {\n        if (context.getFireTime().getTime() - context.getScheduledFireTime().getTime() &gt; 1000) {\n            return;  // skip this trigger\n        }\n        // ...\n    }\n}\n</code></pre> <p>\u5982\u6b64\uff0ctrigger \u7684 job \u90fd\u6703\u843d\u5728\u6392\u7a0b\u8a2d\u5b9a\u7684\u6642\u9593\u9ede\u4e0a\u3002\u8b8a\u66f4\u5f8c\u7684 Job \u57f7\u884c\u6642\u9593\u8ef8\u53c3\u8003\u4e0b\u5716:</p> <pre>546df45cd57286c6cfd3bab1557b932f42f6e56baceb8c01a2d60788c94186bbf8b1bf6d1560e209da3f92d656af677cd2af1945dd3512a755d4d46518483a05</pre><pre>50d5aa2ec67fcb208bced51f488af894042863a5cb6986aeb70a7d85f31a8d230f5e8bb7ea70b61195ad4166653a16aa18cacab94cfbbdf3fd089dc5ac125ef4</pre> <p>Note</p> <p>\u76ee\u524d\u6c92\u6709\u767c\u73fe\u5b98\u65b9\u5c0d\u65bc\u6b64\u65b9\u6848\u7684\u89e3\u6cd5\u3002\u9019\u88e1\u7684\u89e3\u6cd5\u6709\u571f\u6cd5\u7149\u92fc\u7684\u611f\u89ba\u3002</p>"},{"location":"spring-boot/scheduler/jdbc_job_store.html#job_1","title":"\u63a2\u8a0e: Job \u57f7\u884c\u904e\u7a0b\u767c\u751f\u932f\u8aa4\u7684\u884c\u70ba","text":"<p>\u5728 Job \u57f7\u884c\u904e\u7a0b\u4e2d\uff0c\u5982\u679c\u62cb\u51fa\u4f8b\u5916\uff0cJob \u5373\u4e2d\u65b7\u57f7\u884c\u3002\u5982\u679c\u62cb\u51fa\u7684\u4f8b\u5916\u662f <code>JobExecutionException</code> \u4e26\u8a2d\u5b9a <code>refireImmediately</code> \u70ba <code>true</code>\uff0c\u5247 Job \u6703\u7acb\u5373\u91cd\u65b0\u57f7\u884c\uff0c\u4e26\u4e14\u4e0b\u4e00\u6b21 <code>JobExecutionContext.getRefireCount()</code> \u6578\u5b57\u7d2f\u52a0\u3002 \u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u5c55\u793a\u7576 Job \u5931\u6557\u62cb\u51fa\u4f8b\u5916\u6642\uff0c retry 3 \u6b21\u3002</p> HelloWorldJob.java<pre><code>@DisallowConcurrentExecution\npublic class HelloWorldJob implements Job {\n    @Override\n    public void execute(JobExecutionContext context) {\n        if(context.getRefireCount() &gt; 3) {\n            throw new JobExecutionException(\"Too many re-fires\");\n        }\n\n        // ...\n\n        throw new JobExecutionException(\"Something goes wrong\", true);\n    }\n}\n</code></pre>"},{"location":"spring-boot/scheduler/jdbc_job_store.html#_2","title":"\u53c3\u8003","text":"<ul> <li>Sprint Boot Quartz Scheduler</li> <li>Quartz Configuration - Configure Clustering with JDBC-JobStore </li> </ul>"},{"location":"spring-boot/testing/index.html","title":"\u53c3\u8003","text":"<ul> <li>Spring Framework / Testing</li> <li>String Boot / Testing</li> </ul>"},{"location":"blog/archive/2024.html","title":"2024","text":""},{"location":"blog/category/spring-boot.html","title":"Spring Boot","text":""},{"location":"blog/category/kubernetes.html","title":"Kubernetes","text":""},{"location":"blog/category/docker.html","title":"Docker","text":""},{"location":"blog/category/testing.html","title":"Testing","text":""}]}