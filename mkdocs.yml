site_name: Teddy 的筆記本

use_directory_urls: false

# https://squidfunk.github.io/mkdocs-material/
theme:
  name: material
  palette:
    - scheme: slate
  language: 'zh-TW'
  features:
    - content.code.select
    - content.code.annotate
    - content.code.copy
    - toc.integrate
    - navigation.top
    - content.footnote.tooltips
    - content.tooltips

# https://squidfunk.github.io/mkdocs-material/setup/setting-up-navigation/
# https://www.mkdocs.org/user-guide/writing-your-docs/#configure-pages-and-navigation
nav:
  - Development:
      - JetBrains:
        - 快捷鍵: development/jet-brains/shortcuts.md
        - Postfix Completion: development/jet-brains/postfix-completion.md
      - Vim:
        - zsh: development/vim/zsh.md
        - VSCode: development/vim/vscode.md
        - IdeaVim: development/vim/ideavim.md
        - 進階: development/vim/advanced.md
  - Kubernetes:
      - Apply: kubernetes/apply.md
      - Pod Topology Spread Constraints: kubernetes/pod-topology-spread-constraints.md
  - Domain-Driven Design:
      - 1 Crunching Knowledge: domain-driven-design/01-crunching-knowledge.md
      - 2 Communication and the Use of Language: domain-driven-design/02-communication-and-the-use-of-language.md
      - 3 Binding Model and Implementation: domain-driven-design/03-binding-model-and-implementation.md
      - 4 Isolating the Domain: domain-driven-design/04-isolating-the-domain.md
      - 5 A Model Expressed in Software: domain-driven-design/05-a-model-expressed-in-software.md
      - 6 The Life Cycle of a Domain Object: domain-driven-design/06-the-life-cycle-of-a-domain-object.md
      - 7 Using the Language - An Extended Example: domain-driven-design/07-using-the-language-an-extended-example.md
      - 8 Breakthrough: domain-driven-design/08-breakthrough.md
      - 9 Making Implicit Concepts Explicit: domain-driven-design/09-making-implicit-concepts-explicit.md
      - 10 Supple Design: domain-driven-design/10-supple-design.md
  - Clean Architecture:
      - 34 The Missing Chapter: clean-architecture/34.md
  - Java:
      - Effective Java, 3rd:
          - Creating And Destroying Objects:
              - Item 1 - Consider static factory methods instead of constructors: java/effective-java/001.md
              - Item 2 - Consider a builder when faced with many constructor parameters: java/effective-java/002.md
              - Item 3 - Enforce the singleton property with a private constructor or an enum type: java/effective-java/003.md
              - Item 4 - Enforce noninstantiability with a private constructor: java/effective-java/004.md
              - Item 5 - Prefer dependency injection to hardwiring resources: java/effective-java/005.md
              - Item 6 - Avoid creating unnecessary objects: java/effective-java/006.md
              - Item 7 - Eliminate obsolete object references: java/effective-java/007.md
              - Item 8 - Avoid finalizers and cleaners: java/effective-java/008.md
              - Item 9 - Prefer try-with-resources to try-finally: java/effective-java/009.md
          - Methods Common To All Objects:
              - Item 10 - Obey the general contract when overriding equals: java/effective-java/010.md
              - Item 11 - Always override hashCode when you override equals: java/effective-java/011.md
              - Item 12 = Always override toString: java/effective-java/012.md
              - Item 13 - Override clone judiciously: java/effective-java/013.md
              - Item 14 - Consider implementing Comparable: java/effective-java/014.md
          - Classes and Interface:
              - Item 15 - Minimize the accessibility of classes and members: java/effective-java/015.md
              - Item 16 - In public classes, use accessor methods, not public fields: java/effective-java/016.md
          - Methods:
              - Item 55 - Return optionals judiciously: java/effective-java/055.md
  - Spring:
      - Spring Boot Basic: spring-boot/spring-boot-basic.md
      - 新增 Spring Boot microservices 專案: spring-boot/set-up-microservices-project.md
      - Spring Webflux: spring-boot/spring-webflux.md
      - Scheduler:
          - Quartz:
              - Hello World!: spring-boot/scheduler/hello_world.md
              - JDBC JobStore: spring-boot/scheduler/jdbc_job_store.md
            # TODO: share data between jobs (via context ?)
            #       - Job vs Bean Job
            # TODO: tes
      - Testing: spring-boot/testing/index.md
  - Feature Toggles: feature-toggles/main.md
  - Blog: blog/index.md

markdown_extensions:
  - admonition
  - pymdownx.highlight
  - pymdownx.inlinehilite
  - pymdownx.snippets
  - pymdownx.superfences
  - pymdownx.details
  - pymdownx.superfences
  - pymdownx.keys
  - pymdownx.arithmatex:
      generic: true
  - nl2br
  - def_list
  - pymdownx.tasklist:
      custom_checkbox: true
  - pymdownx.tabbed:
      alternate_style: true
  - attr_list
  - pymdownx.emoji:
      emoji_index: !!python/name:material.extensions.emoji.twemoji
      emoji_generator: !!python/name:material.extensions.emoji.to_svg
  - footnotes
  - pymdownx.critic
  - pymdownx.caret
  - pymdownx.mark
  - pymdownx.tilde
  - abbr

plugins:
  - search
  - blog
  - plantuml:
      puml_url: https://www.plantuml.com/plantuml/
      puml_keyword: plantuml
      interaction:
        enabled: false
  - git-revision-date-localized:
      locale: zh
      enable_creation_date: true
      exclude:
        - index.md
        - blog/**/*

copyright: Copyright &copy; 2024 Teddy Lee
extra:
  generator: false

extra_javascript:
  - https://unpkg.com/mathjax@3/es5/tex-mml-chtml.js

extra_css:
  - css/style.css
